<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alvin-一座小楼</title>
  <subtitle>Test</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://czhzero.com/"/>
  <updated>2017-03-07T14:39:01.000Z</updated>
  <id>http://czhzero.com/</id>
  
  <author>
    <name>Alvin-一座小楼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SurfaceView和View的区别</title>
    <link href="http://czhzero.com/2017/03/07/surfaceview-view-diff/"/>
    <id>http://czhzero.com/2017/03/07/surfaceview-view-diff/</id>
    <published>2017-03-07T11:35:17.000Z</published>
    <updated>2017-03-07T14:39:01.000Z</updated>
    
    <content type="html">&lt;p&gt;Android的显示过程可以简单的概括为：Android应用程序把经过测量、布局、绘制后的surface缓存数据，通过SurfaceFlinger把数据渲染到显示屏幕上，通过Android但刷新机制来刷新数据。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;View简介&quot;&gt;&lt;a href=&quot;#View简介&quot; class=&quot;headerlink&quot; title=&quot;View简介&quot;&gt;&lt;/a&gt;View简介&lt;/h2&gt;&lt;p&gt;View一般在onDraw方法里面绘图，onDraw在UI主线程执行。onDraw默认只在View初始化的时候调用一遍，所以View不会自动刷新画面，一般要调用invalidate或者postInvalidate来重新执行。&lt;/p&gt;
&lt;p&gt;onDraw里面的代码进行刷新画面。UI主线程一般用来渲染组件、处理组件与用户之间的交互事件，比如说按钮的点击事件、文本框的输入事件。&lt;/p&gt;
&lt;p&gt;如果的画图任务相当繁重，那么onDraw方法里面的代码要执行好长一段时间，就可能会造成UI主线程阻塞。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/023/20160811221917915.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;SurfaceView简介&quot;&gt;&lt;a href=&quot;#SurfaceView简介&quot; class=&quot;headerlink&quot; title=&quot;SurfaceView简介&quot;&gt;&lt;/a&gt;SurfaceView简介&lt;/h2&gt;&lt;p&gt;Surfaceview是视图（view）的一个继承类，这个视图里内嵌了一个专门用于绘制的Surface。你可以控制这个这个Surface的格式和尺寸，Surfaceview控制这个Surface的绘制位置。&lt;/p&gt;
&lt;p&gt;Surfaceview也可以在onDraw里面绘图，即直接在UI主线程绘图并渲染，因为Surfaceview是View的子类。我们可以考虑这样的方案：在后台线程执行繁重的绘图任务，把所有绘制的东西缓存起来；绘制完毕后，再回到UI线程，一次性把所绘制的东西渲染到屏幕上（本质：就是后台线程绘制，UI主线程渲染）&lt;/p&gt;
&lt;p&gt;只使用View的onDraw方法是无法实现这种方案的，而Surfaceview可以实现这种方案。先看看Surfaceview的工作原理图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/023/20160811222116554&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;View缺乏双缓冲机制，SurfaceView有双缓冲&lt;/li&gt;
&lt;li&gt;当程序需要更新View上的图像时，程序必须重绘View上显示的整张图片&lt;/li&gt;
&lt;li&gt;SurfaceView是在一个新起的单独线程中可以重新绘制画面，而View必须在UI的主线程中更新画面&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android的显示过程可以简单的概括为：Android应用程序把经过测量、布局、绘制后的surface缓存数据，通过SurfaceFlinger把数据渲染到显示屏幕上，通过Android但刷新机制来刷新数据。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="surfaceview" scheme="http://czhzero.com/tags/surfaceview/"/>
    
  </entry>
  
  <entry>
    <title>设置Activity退出动画无效问题的解决</title>
    <link href="http://czhzero.com/2017/03/07/activity-exit-animation-invalid/"/>
    <id>http://czhzero.com/2017/03/07/activity-exit-animation-invalid/</id>
    <published>2017-03-07T07:52:29.000Z</published>
    <updated>2017-03-07T14:05:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Activity系统默认的进入动画是从右侧进入到左侧停止，退出动画是从左到右移动直到完全退出界面。如果要修改Activity进入和退出动画有两种方式。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;第一种方式-overridePendingTransition方法&quot;&gt;&lt;a href=&quot;#第一种方式-overridePendingTransition方法&quot; class=&quot;headerlink&quot; title=&quot;第一种方式:overridePendingTransition方法&quot;&gt;&lt;/a&gt;第一种方式:overridePendingTransition方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;startActivity()方法之前调用overridePendingTransition方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;startActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;overridePendingTransition(R.anim.fade_in, R.anim.fade_out);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;重写Activity的finish方法, 并调用overridePendingTransition方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void finish() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    super.finish();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    overridePendingTransition(R.anim.fade_in, R.anim.fade_out);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;第二种方式-设置Activity的theme属性&quot;&gt;&lt;a href=&quot;#第二种方式-设置Activity的theme属性&quot; class=&quot;headerlink&quot; title=&quot;第二种方式:设置Activity的theme属性&quot;&gt;&lt;/a&gt;第二种方式:设置Activity的theme属性&lt;/h2&gt;&lt;p&gt;在&lt;code&gt;values&lt;/code&gt;文件夹的&lt;code&gt;styles.xml&lt;/code&gt;中增加样式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;style name=&amp;quot;Anim_fade parent=&amp;quot;android:Theme.Light.NoTitleBar.Fullscreen&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;item name=&amp;quot;android:windowAnimationStyle&amp;quot;&amp;gt;@style/fade&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;style name=&amp;quot;fade&amp;quot; parent=&amp;quot;@android:style/Animation.Activity&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;item name=&amp;quot;android:activityOpenEnterAnimation&amp;quot;&amp;gt;@anim/fade_in&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;item name=&amp;quot;android:activityOpenExitAnimation&amp;quot;&amp;gt;@anim/fade_out&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;item name=&amp;quot;android:activityCloseEnterAnimation&amp;quot;&amp;gt;@anim/fade_in&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;item name=&amp;quot;android:activityCloseExitAnimation&amp;quot;&amp;gt;@anim/fade_out&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在AndroidManifest.xml文件中设置Activity的样式,&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;activity&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Android:name=&amp;quot;.TestActivity&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:theme=&amp;quot;@style/Anim_fade&amp;quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;&lt;p&gt;为了简洁通用，推荐使用第二种方式进行设置动画。使用第二种方式，有的机器虽然进入的动画是可用的，但是退出的动画无效，你必须使用第一种方式的重写finish方法实现退出动画。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Activity系统默认的进入动画是从右侧进入到左侧停止，退出动画是从左到右移动直到完全退出界面。如果要修改Activity进入和退出动画有两种方式。&lt;/p&gt;
    
    </summary>
    
      <category term="Bug分析" scheme="http://czhzero.com/categories/Bug%E5%88%86%E6%9E%90/"/>
    
    
      <category term="动画" scheme="http://czhzero.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>HashMap vs. LinkedHashMap vs. TreeMap vs. HashTable 四种容器对比</title>
    <link href="http://czhzero.com/2017/03/02/four-map-diff/"/>
    <id>http://czhzero.com/2017/03/02/four-map-diff/</id>
    <published>2017-03-02T13:03:11.000Z</published>
    <updated>2017-03-07T14:05:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Java为数据结构中的映射定义了一个接口&lt;code&gt;java.util.Map&lt;/code&gt;,它有四个实现类,分别是HashMap Hashtable LinkedHashMap 和TreeMap。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;HashMap&quot;&gt;&lt;a href=&quot;#HashMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap&quot;&gt;&lt;/a&gt;HashMap&lt;/h2&gt;&lt;p&gt;根据键的HashCode 值存储数据,根据键可以直接获取它的值，具有很快的访问速度。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/8565fd90daccb7f62375f2164a5eaf5b88b6e2b1/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f32303134303730313139313430333736343f77617465726d61726b2f322f746578742f6148523063446f764c324a736232637559334e6b626935755a585176626e4e665932396b5a513d3d2f666f6e742f3561364c354c32542f666f6e7473697a652f3430302f66696c6c2f49304a42516b46434d413d3d2f646973736f6c76652f37302f677261766974792f536f75746845617374&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遍历时，取得数据的顺序是完全随机的&lt;/li&gt;
&lt;li&gt;不支持线程的同步&lt;/li&gt;
&lt;li&gt;最多只允许一条记录的键为Null&lt;/li&gt;
&lt;li&gt;允许多条记录的值为Null&lt;/li&gt;
&lt;li&gt;在插入、删除和定位元素，速度较快。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多内容请查看&lt;a href=&quot;https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/HashMap%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HashMap源码剖析&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;LinkedHashMap&quot;&gt;&lt;a href=&quot;#LinkedHashMap&quot; class=&quot;headerlink&quot; title=&quot;LinkedHashMap&quot;&gt;&lt;/a&gt;LinkedHashMap&lt;/h2&gt;&lt;p&gt;LinkedHashMap是HashMap的子类，与HashMap有着同样的存储结构，但它加入了一个双向链表的头结点，将所有put到LinkedHashmap的节点一一串成了一个双向循环链表，因此它保留了节点插入的顺序，可以使节点的输出顺序与输入顺序相同。&lt;/p&gt;
&lt;p&gt;LinkedHashMap可以用来实现LRU算法。&lt;/p&gt;
&lt;p&gt;LinkedHashMap同样是非线程安全的，只在单线程环境下使用。&lt;br&gt;在遍历的时候会比HashMap慢，不过有种情况例外，当HashMap容量很大，实际数据较少时，遍历起来可能会 比LinkedHashMap慢，因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关。&lt;/p&gt;
&lt;p&gt;更多内容请查看&lt;a href=&quot;https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/LinkedHashMap%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LinkedHashMap源码剖析&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;TreeMap&quot;&gt;&lt;a href=&quot;#TreeMap&quot; class=&quot;headerlink&quot; title=&quot;TreeMap&quot;&gt;&lt;/a&gt;TreeMap&lt;/h2&gt;&lt;p&gt;TreeMap实现SortMap接口，能够把它保存的记录根据键排序,默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。&lt;/p&gt;
&lt;p&gt;TreeMap取出来的是排序后的键值对。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。&lt;/p&gt;
&lt;h2 id=&quot;HashTable&quot;&gt;&lt;a href=&quot;#HashTable&quot; class=&quot;headerlink&quot; title=&quot;HashTable&quot;&gt;&lt;/a&gt;HashTable&lt;/h2&gt;&lt;p&gt;HashMap和Hashtable都实现了Map接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步(synchronization)，以及速度。Hashtable的方法是同步的，而HashMap的方法不是。所以有人一般都建议如果是涉及到多线程同步时采用HashTable，没有涉及就采用HashMap。&lt;/p&gt;
&lt;p&gt;更多内容请查看&lt;a href=&quot;https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/HashTable%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HashTable源码剖析&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Java为数据结构中的映射定义了一个接口&lt;code&gt;java.util.Map&lt;/code&gt;,它有四个实现类,分别是HashMap Hashtable LinkedHashMap 和TreeMap。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://czhzero.com/categories/Java/"/>
    
    
      <category term="容器" scheme="http://czhzero.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android后台进程保活策略汇总</title>
    <link href="http://czhzero.com/2017/02/26/how-to-keep-service-alive/"/>
    <id>http://czhzero.com/2017/02/26/how-to-keep-service-alive/</id>
    <published>2017-02-26T03:07:32.000Z</published>
    <updated>2017-03-07T14:05:01.000Z</updated>
    
    <content type="html">&lt;p&gt;后台常驻一直是Android开发者研究的课题，一方面是为了实现即时通信的长连接，一方面也是为了背地里做一些黑暗的事情。网上后台保活的方案也很多，但是有可执行效果的也不多，尤其是面对国内小米，魅族等深度定制的Android系统。本文也会持续更新，动态收集一些新的方案。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;p&gt;一般来说，后台进程回收分为三种情况，第三种是最霸道的，他们权限最高，后台进程被杀死后，连系统广播都无法让你监听。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统内存不够时的回收&lt;/li&gt;
&lt;li&gt;360等安全软件的回收&lt;/li&gt;
&lt;li&gt;厂商后台管理程序的回收&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Android系统进程状态分为五个等级，具体每种进程含义这边不细说了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前台进程&lt;/li&gt;
&lt;li&gt;可见进程&lt;/li&gt;
&lt;li&gt;服务进程&lt;/li&gt;
&lt;li&gt;后台进程&lt;/li&gt;
&lt;li&gt;空进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这五种状态的进程相对于系统来说的重要性从上至下排列，空进程容易被杀死，其次是后台进程，然后是服务进程甚至是可见进程，而前台进程一般则不会被轻易干掉。&lt;/p&gt;
&lt;p&gt;Android进程有两个比较重要的概念，一个是Importance等级，一个是adj值。Importance等级与adj值在ActivityManagerService中被关联起来，相较于Importance等级而言adj值可以赋予我们更多的参考价值。adj值越小，则越不容易回收，这个值会随着进程的状态转换而变化。&lt;/p&gt;
&lt;p&gt;我们可以通过adb shell命令实时查看这个adj值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;adb shell&lt;/p&gt;
&lt;p&gt;ps | grep &amp;lt;关键字&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;USER     PID   PPID  VSIZE  RSS     WCHAN    PC         NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root      1     0     812    668   ffffffff 00000000 S /init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root      2     0     0      0     ffffffff 00000000 S kthreadd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;adb shell&lt;/p&gt;
&lt;p&gt;cat /proc/PID/oom_adj&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;cat命令执行后，会得到一个adj整数数值。&lt;/p&gt;
&lt;h2 id=&quot;策略选择&quot;&gt;&lt;a href=&quot;#策略选择&quot; class=&quot;headerlink&quot; title=&quot;策略选择&quot;&gt;&lt;/a&gt;策略选择&lt;/h2&gt;&lt;p&gt;后台保活两个目标，一是轻易不让系统回收，二是杀死后可以重启。最好的方式当然系统白名单，让系统为你这个进程开个后门，这种方式不再讨论范围。&lt;/p&gt;
&lt;h3 id=&quot;1-Service的onStartCommand函数返回START-STICKY&quot;&gt;&lt;a href=&quot;#1-Service的onStartCommand函数返回START-STICKY&quot; class=&quot;headerlink&quot; title=&quot;1.Service的onStartCommand函数返回START_STICKY&quot;&gt;&lt;/a&gt;1.Service的onStartCommand函数返回START_STICKY&lt;/h3&gt;&lt;p&gt;&lt;code&gt;START_STICKY&lt;/code&gt;是官方提供的参数，意思是当service被内存回收了，系统会对service进行重启。面对360等内存回收，并没什么作用。&lt;/p&gt;
&lt;h3 id=&quot;2-在service-的onDestory里面重启服务&quot;&gt;&lt;a href=&quot;#2-在service-的onDestory里面重启服务&quot; class=&quot;headerlink&quot; title=&quot;2.在service 的onDestory里面重启服务&quot;&gt;&lt;/a&gt;2.在service 的onDestory里面重启服务&lt;/h3&gt;&lt;p&gt;onDestroy()方法只有在service正常停止的时候才会被调用，面对上述回收的第二与第三种方法没有效果。&lt;/p&gt;
&lt;h3 id=&quot;3-守护线程相互监听&quot;&gt;&lt;a href=&quot;#3-守护线程相互监听&quot; class=&quot;headerlink&quot; title=&quot;3.守护线程相互监听&quot;&gt;&lt;/a&gt;3.守护线程相互监听&lt;/h3&gt;&lt;p&gt;AB两个进程，A进程里面轮询检查B进程是否存活，没存活的话将其拉起，同样B进程里面轮询检查A进程是否存活，没存活的话也将其拉起，而我们的后台逻辑则随便放在某个进程里执行即可。&lt;/p&gt;
&lt;p&gt;这种方法面对回收的时候，其实作用也不大，而且很消耗性能。另外，也有人提到过使用两个native进程监控，那种方法没试过。&lt;/p&gt;
&lt;h3 id=&quot;4-AlarmManager-or-JobScheduler循环触发&quot;&gt;&lt;a href=&quot;#4-AlarmManager-or-JobScheduler循环触发&quot; class=&quot;headerlink&quot; title=&quot;4.AlarmManager or JobScheduler循环触发&quot;&gt;&lt;/a&gt;4.AlarmManager or JobScheduler循环触发&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class AlarmService extends Service &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Nullable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public IBinder onBind(Intent intent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public int onStartCommand(Intent intent, int flags, int startId) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        initAlarm(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.d(&amp;quot;czh&amp;quot;, &amp;quot;AlarmService onStartCommand&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return super.onStartCommand(intent, flags, startId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void initAlarm(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Intent intent = new Intent(context, AlarmReceiver.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        intent.setAction(&amp;quot;repeating&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PendingIntent sender = PendingIntent.getBroadcast(context, 0, intent, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //开始时间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        long firsTime = SystemClock.elapsedRealtime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        AlarmManager am = (AlarmManager) getSystemService(ALARM_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        am.setRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP, firsTime, 5 * 1000, sender);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;5-与系统service绑定&quot;&gt;&lt;a href=&quot;#5-与系统service绑定&quot; class=&quot;headerlink&quot; title=&quot;5.与系统service绑定&quot;&gt;&lt;/a&gt;5.与系统service绑定&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/aigestudio/article/details/51348408&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;论Android应用进程长存的可行性&lt;/a&gt; 一文中，提到用NotificationListenerService代替普通service，从而达到保活的作用。 原理是没有问题，在小米4上亲测过后，发现并没什么用。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class SimulateNotificationService extends NotificationListenerService &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onNotificationPosted(StatusBarNotification sbn) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.onNotificationPosted(sbn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onNotificationRemoved(StatusBarNotification sbn) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.onNotificationRemoved(sbn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;service android:name=&amp;quot;.service.SimulateNotificationService&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:permission=&amp;quot;android.permission.BIND_NOTIFICATION_LISTENER_SERVICE&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:process=&amp;quot;:test5&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;intent-filter&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;action android:name=&amp;quot;android.service.notification.NotificationListenerService&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/intent-filter&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/service&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;6-监听系统Receiver保活&quot;&gt;&lt;a href=&quot;#6-监听系统Receiver保活&quot; class=&quot;headerlink&quot; title=&quot;6.监听系统Receiver保活&quot;&gt;&lt;/a&gt;6.监听系统Receiver保活&lt;/h3&gt;&lt;p&gt;使用Receiver来检测目标进程是否存活不失为一个好方法，静态注册一系列广播，什么开机启动、网络状态变化、时区地区变化、充电状态变化等等等等，这听起来好像很6，而且在大部分手机中都是可行的方案，但是对于深度定制的ROM，是的，又是深度定制，你没有看错，而且代表性人物还是魅族、小米，这两个业界出了名的喜欢“深度定制”系统。&lt;br&gt;自从Android 3.1开始系统对我们的应用增加了一种叫做STOPPED的状态，什么叫STOPPED？就是安装了之后从未启动过的，大家可能经常在网上看到对开机广播的解释，说要想应用正确接收到开机广播那么就得先启动一下应用，这个说法的技术支持就来源于此，因为自Android 3.1后所有的系统广播都会在Intent添加一个叫做FLAG_EXCLUDE_STOPPED_PACKAGES的标识，说白了就是所有处于STOPPED状态的应用都不可以接收到系统广播。&lt;/p&gt;
&lt;h3 id=&quot;7-提高进程优先级-Notification提权&quot;&gt;&lt;a href=&quot;#7-提高进程优先级-Notification提权&quot; class=&quot;headerlink&quot; title=&quot;7.提高进程优先级, Notification提权&quot;&gt;&lt;/a&gt;7.提高进程优先级, Notification提权&lt;/h3&gt;&lt;p&gt;这种保活手段是应用范围最广泛。它是利用系统的漏洞来启动一个前台的Service进程，与普通的启动方式区别在于，它不会在系统通知栏处出现一个Notification，看起来就如同运行着一个后台Service进程一样。这样做带来的好处就是，用户无法察觉到你运行着一个前台进程（因为看不到Notification）,但你的进程优先级又是高于普通后台进程的。&lt;/p&gt;
&lt;p&gt;这种方法面对第二种回收方式有效，但是面对小米之类的后台回收，还是无能为力。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class NotificationService extends Service &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private final static int SERVICE_ID = 1001;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Nullable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public IBinder onBind(Intent intent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public int onStartCommand(Intent intent, int flags, int startId) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (Build.VERSION.SDK_INT &amp;lt; 18) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            startForeground(SERVICE_ID, new Notification());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Intent innerIntent = new Intent(this, InnerService.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            startService(innerIntent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            startForeground(SERVICE_ID, new Notification());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return super.onStartCommand(intent, flags, startId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 给 API &amp;gt;= 18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static class InnerService extends Service &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public int onStartCommand(Intent intent, int flags, int startId) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            startForeground(SERVICE_ID, new Notification());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            stopForeground(true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            stopSelf();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return super.onStartCommand(intent, flags, startId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Nullable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public IBinder onBind(Intent intent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;8-不同的app进程，用广播相互唤醒&quot;&gt;&lt;a href=&quot;#8-不同的app进程，用广播相互唤醒&quot; class=&quot;headerlink&quot; title=&quot;8.不同的app进程，用广播相互唤醒&quot;&gt;&lt;/a&gt;8.不同的app进程，用广播相互唤醒&lt;/h3&gt;&lt;p&gt;如果你手机安装了各种app,或者应用了各种第三方代sdk,即可互相唤醒。&lt;br&gt;假如你手机里装了支付宝、淘宝、天猫、UC等阿里系的app，那么你打开任意一个阿里系的app后，有可能就顺便把其他阿里系的app给唤醒了。&lt;/p&gt;
&lt;p&gt;这个方法针对内存回收的三种方式均有效，只要有一个活着，其他的就会活下来。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;目前相对靠谱的方法就是6、7、8。第6种方法，要看手机，很多手机会屏蔽系统广播，第7种方法还是那句话，有条件就干。第8种方法在一定程度上保活，面对小米手机rom到系统回收还是没有办法的。&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/aigestudio/article/details/51348408&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;论Android应用进程长存的可行性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/63aafe3c12af&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;关于 Android 进程保活，你所需要知道的一切&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;后台常驻一直是Android开发者研究的课题，一方面是为了实现即时通信的长连接，一方面也是为了背地里做一些黑暗的事情。网上后台保活的方案也很多，但是有可执行效果的也不多，尤其是面对国内小米，魅族等深度定制的Android系统。本文也会持续更新，动态收集一些新的方案。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="后台保活" scheme="http://czhzero.com/tags/%E5%90%8E%E5%8F%B0%E4%BF%9D%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>常用Android学习资源汇总(四) - 便捷开发工具</title>
    <link href="http://czhzero.com/2017/02/24/android-study-resource-4/"/>
    <id>http://czhzero.com/2017/02/24/android-study-resource-4/</id>
    <published>2017-02-24T15:32:41.000Z</published>
    <updated>2017-02-24T15:51:54.000Z</updated>
    
    <content type="html">&lt;p&gt;常用Android学习资源汇总为Android技术开发相关的资源索引，以供学习查找之用。总共分为四个部分，本篇为第四篇便捷开发工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://czhzero.com/2016/07/19/android-study-resource/&quot;&gt;常用Android学习资源汇总(一)-优秀网站博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用Android学习资源汇总(二)-优秀开源框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用Android学习资源汇总(三)-高频技术专题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用Android学习资源汇总(四)-便捷开发工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;开发资源&quot;&gt;&lt;a href=&quot;#开发资源&quot; class=&quot;headerlink&quot; title=&quot;开发资源&quot;&gt;&lt;/a&gt;开发资源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.androiddevtools.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Dev&lt;/a&gt; —— android各种工具，资源，我不信你不知道&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Trinea/android-open-project&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 开源项目分类汇总&lt;/a&gt; —— 史上最全的Android开源项目汇总&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oschina.net/project/tag/11/devtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2702款 开发工具开源软件&lt;/a&gt; —— 如题&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://app.memect.com/doc/android.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 资源库列表&lt;/a&gt; —— 一个超级棒的安卓资源库列表&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oschina.net/question/2285044_219206?fromerr=gEGePPMG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最强开发资源平台大合集&lt;/a&gt; —— 各种UI图标库、工具集&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.materialpalette.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MD 调色板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://icomoon.io/app/#/select&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;icon 图标&lt;/a&gt; —— 各种icon图标&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.flaticon.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图标下载库&lt;/a&gt; —— 160,428 vector icons grouped in 2,409 packs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/l123456789jy/Lazy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一些常用的开发工具类&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;性能检测工具&quot;&gt;&lt;a href=&quot;#性能检测工具&quot; class=&quot;headerlink&quot; title=&quot;性能检测工具&quot;&gt;&lt;/a&gt;性能检测工具&lt;/h2&gt;&lt;p&gt;TODO&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;常用Android学习资源汇总为Android技术开发相关的资源索引，以供学习查找之用。总共分为四个部分，本篇为第四篇便捷开发工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://czhzero.com/2016/07/19/android-study-resource/&quot;&gt;常用Android学习资源汇总(一)-优秀网站博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-2/&quot;&gt;常用Android学习资源汇总(二)-优秀开源框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-3/&quot;&gt;常用Android学习资源汇总(三)-高频技术专题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-4/&quot;&gt;常用Android学习资源汇总(四)-便捷开发工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="资源索引" scheme="http://czhzero.com/tags/%E8%B5%84%E6%BA%90%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>常用Android学习资源汇总(三)-高频技术专题</title>
    <link href="http://czhzero.com/2017/02/24/android-study-resource-3/"/>
    <id>http://czhzero.com/2017/02/24/android-study-resource-3/</id>
    <published>2017-02-24T15:32:37.000Z</published>
    <updated>2017-02-24T15:52:07.000Z</updated>
    
    <content type="html">&lt;p&gt;常用Android学习资源汇总为Android技术开发相关的资源索引，以供学习查找之用。总共分为四个部分，本篇为第三篇高频技术专题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://czhzero.com/2016/07/19/android-study-resource/&quot;&gt;常用Android学习资源汇总(一)-优秀网站博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用Android学习资源汇总(二)-优秀开源框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用Android学习资源汇总(三)-高频技术专题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用Android学习资源汇总(四)-便捷开发工具&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;网络相关&quot;&gt;&lt;a href=&quot;#网络相关&quot; class=&quot;headerlink&quot; title=&quot;网络相关&quot;&gt;&lt;/a&gt;网络相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/starstone/p/4890409.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP 必知必会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://realm.io/news/droidcon-jake-wharton-simple-http-retrofit-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit 2 用法解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/aad5aacd79bf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OkHttp3 源码分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/nugongahou110/article/details/46829605&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Volley 源码分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://drakeet.me/retrofit-2-0-okhttp-3-0-config&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit 2.0 + OkHttp 3.0 配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/09/restful&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;理解 RESTful架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/efan006/article/details/50543990&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit + RxJava实战日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/9c3b4ea108a7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 Retrofit 和 Okhttp 实现网络缓存&lt;/a&gt; —— 无网读缓存，有网根据过期时间重新请求&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/7e28c8216c7d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava 处理网络连接失败&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/584707554ed7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 推送技术研究&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/77d418e7b5d6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OkHttp, Retrofit, Volley 应该选择哪一个？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/java/j-lo-okhttp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OkHttp：Java 平台上的新一代 HTTP 客户端&lt;/a&gt; —— 来自IBM的技术文章&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/qq_21430549/article/details/51212977&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit 文件上传下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/evan_man/article/details/51320408&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit 的使用与深入学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/93153b34310e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Retrofit 2.0 使用-补充篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/90b1f20b123d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit 笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;RxJava相关&quot;&gt;&lt;a href=&quot;#RxJava相关&quot; class=&quot;headerlink&quot; title=&quot;RxJava相关&quot;&gt;&lt;/a&gt;RxJava相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://gank.io/post/560e15be2dca930e00da1083&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rxjava 详解&lt;/a&gt; —— 抛物线出品经典Rxjava详解&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/lzyzsd/article/details/41833541&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入浅出 Rxjava&lt;/a&gt; —— rx教父大头鬼出品深入浅出rxjava&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mcxiaoke/RxDocs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxDocs - RxJava 文档中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lzyzsd/Awesome-RxJava&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava resources&lt;/a&gt; —— rx教父大头鬼整理的Rxjava学习集合&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wangxinghe.me/blog/2016-03-27/rxjava-basis/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava 学习总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@diolor/improving-ux-with-rxjava-4440a13b157f#.9mc2oeyzo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Improving UX with RxJava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mcxiaoke.gitbooks.io/rxdocs/content/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactiveX 文档中文翻译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/richardradics/RxAndroidBootstrap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava + Dagger2 + LAMBDA 的一个 MVP demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mrfu.me/2016/01/10/RxWeekend/?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava 的周末狂欢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/c2c7c46e6b97&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 RxBinding 响应控件的异步事件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/6d1ef9f43cdc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;详细解析 RxAndroid 的使用方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/f3f0eccbcd6f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJava简洁封装之道&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;MVP-MVVM架构相关&quot;&gt;&lt;a href=&quot;#MVP-MVVM架构相关&quot; class=&quot;headerlink&quot; title=&quot;MVP/MVVM架构相关&quot;&gt;&lt;/a&gt;MVP/MVVM架构相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/1f21e1d375aa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;不容错过，最全的 Android 架构合集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/0590f530c617&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android MVP 详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.judymax.com/archives/1141?utm_source=tuicool&amp;amp;utm_medium=referral&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google官方 MVP 案例 todoAPP 解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/6872b699879d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android MVVM 框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/269c3f70ec1e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dagger2 详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/collection/b838b070d6de?utm_campaign=hugo&amp;amp;utm_medium=reader_share&amp;amp;utm_content=collection&amp;amp;utm_source=weibo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Dagger2 系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/01d3c014b0b1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Google官方 MVP + Dagger2 架构详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;插件化开发&quot;&gt;&lt;a href=&quot;#插件化开发&quot; class=&quot;headerlink&quot; title=&quot;插件化开发&quot;&gt;&lt;/a&gt;插件化开发&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.androidblog.cn/index.php/Index/detail/id/16&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;插件化开发专栏&lt;/a&gt; —— 有关插件化的资料这里全都有&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Qihoo360/DroidPlugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DroidPlugin&lt;/a&gt; —— 360手机助手插件机制&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/limpoxe/Android-Plugin-Framework&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-Plugin-Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wequick/Small&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Small&lt;/a&gt; —— Small，做最轻巧的跨平台插件化框架&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/singwhatiwanna/dynamic-load-apk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dynamic-load-apk&lt;/a&gt; —— Android 使用动态加载框架DL进行插件化开发&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CtripMobile/DynamicAPK&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DynamicAPK&lt;/a&gt; —— 携程动态加载技术&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/houkx/android-pluginmgr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android-pluginmgr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alibaba/AndFix&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndFix&lt;/a&gt; —— 阿里动态加载&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;单元测试系列&quot;&gt;&lt;a href=&quot;#单元测试系列&quot; class=&quot;headerlink&quot; title=&quot;单元测试系列&quot;&gt;&lt;/a&gt;单元测试系列&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rexstjohn.com/unit-testing-with-android-studio/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;unit-testing-with-android-studio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/9d988a2f8ff7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Robolectric3.0 介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/b2717dc245da&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 单元测试: 首先，从是什么开始&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/4b03123b4f81&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在 Android 中同时使用 unit test 和 instrument test 作为单元测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/fa76b126a7e7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 单元测试——辅助工具介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/00ab03f3d394&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 单元测试实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/cf446be43ae8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解读 Android 官方 MVP 项目单元测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tech.meituan.com/Android_unit_test.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;美团 Android 单元测试研究与实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.stormzhang.com/android/2014/07/07/learn-android-from-rookie/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 学习之路&lt;/a&gt; —— stormzhang的Android学习之路&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tangqi92/Android-Tips&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-Tips&lt;/a&gt; —— 作者收集了大量Android开发Tip&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ZhaoKaiQiang/AndroidDifficultAnalysis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidDifficultAnalysis&lt;/a&gt; —— 安卓开发中遇到的重难点解析，也包括平常的读书笔记和知识点整理&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://will_he.gitbooks.io/android/content/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 知识整理 GitBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bboyfeiyu/android-tech-frontier/wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android wiki 周刊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bboyfeiyu/Worth-Reading-the-Android-technical-articles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;值得阅读的 Android 技术文章&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bxbxbai.github.io/2014/10/07/android-develop-resource/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;整理一些比较好的 Android 开发教程&lt;/a&gt; —— 这些都是该作者在学习Android开发过程中觉得比较好的教程和博客&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/kaede/20326073&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 应用性能调优的技术点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004063006&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Segmentfault 上回答较好的一些问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.woshipm.com/ucd/243897.html?utm_source=tuicool&amp;amp;utm_medium=referral&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 界面设计视觉规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugly.qq.com/bbs/forum.php?mod=forumdisplay&amp;amp;fid=39&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯 bugly 社区&lt;/a&gt; —— 腾讯技术大牛写的博客文章&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;从零开始的 Android 新项目&lt;/a&gt; —— 从架构搭建、到数据层之Retrofit与Realm&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cloudchou.com/android/post-788.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解 Activity 启动流程&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/f269bcda335f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;你需要知道的 Android 拍照适配方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/94e0f9ab3f1d&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Context 都没弄明白，还怎么做 Android 开发？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;amp;tid=1022&amp;amp;extra=page%3D1%26filter%3Dauthor%26orderby%3Ddateline&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 性能优化典范之多线程篇&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;常用Android学习资源汇总为Android技术开发相关的资源索引，以供学习查找之用。总共分为四个部分，本篇为第三篇高频技术专题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://czhzero.com/2016/07/19/android-study-resource/&quot;&gt;常用Android学习资源汇总(一)-优秀网站博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-2/&quot;&gt;常用Android学习资源汇总(二)-优秀开源框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-3/&quot;&gt;常用Android学习资源汇总(三)-高频技术专题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-4/&quot;&gt;常用Android学习资源汇总(四)-便捷开发工具&lt;/a&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="资源索引" scheme="http://czhzero.com/tags/%E8%B5%84%E6%BA%90%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>常用Android学习资源汇总(二)-优秀开源框架</title>
    <link href="http://czhzero.com/2017/02/24/android-study-resource-2/"/>
    <id>http://czhzero.com/2017/02/24/android-study-resource-2/</id>
    <published>2017-02-24T15:31:12.000Z</published>
    <updated>2017-02-24T15:52:15.000Z</updated>
    
    <content type="html">&lt;p&gt;常用Android学习资源汇总为Android技术开发相关的资源索引，以供学习查找之用。总共分为四个部分，本篇为第二篇优秀开源框架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://czhzero.com/2016/07/19/android-study-resource/&quot;&gt;常用Android学习资源汇总(一)-优秀网站博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用Android学习资源汇总(二)-优秀开源框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用Android学习资源汇总(三)-高频技术专题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用Android学习资源汇总(四)-便捷开发工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;图片加载框架&quot;&gt;&lt;a href=&quot;#图片加载框架&quot; class=&quot;headerlink&quot; title=&quot;图片加载框架&quot;&gt;&lt;/a&gt;图片加载框架&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UniversalImageLoader&lt;/a&gt; —— 老牌最火的图片加载库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/square/picasso&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Picasso&lt;/a&gt; —— Picasso是Square公司开源的一个Android平台上的图片加载框架，简单易用，一句话搞定项目中的图片加载，好用到令人发指。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bumptech/glide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Glide&lt;/a&gt; —— Glide 是 Google 一位员工的大作，他完全是基于 Picasso 的，沿袭了 Picasso 的简洁风格，但是在此做了大量优化与改进。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/fresco&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fresco&lt;/a&gt; —— Fresco 是 Facebook 出品&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;网络加载框架&quot;&gt;&lt;a href=&quot;#网络加载框架&quot; class=&quot;headerlink&quot; title=&quot;网络加载框架&quot;&gt;&lt;/a&gt;网络加载框架&lt;/h2&gt;&lt;h2 id=&quot;数据库框架&quot;&gt;&lt;a href=&quot;#数据库框架&quot; class=&quot;headerlink&quot; title=&quot;数据库框架&quot;&gt;&lt;/a&gt;数据库框架&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;常用Android学习资源汇总为Android技术开发相关的资源索引，以供学习查找之用。总共分为四个部分，本篇为第二篇优秀开源框架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://czhzero.com/2016/07/19/android-study-resource/&quot;&gt;常用Android学习资源汇总(一)-优秀网站博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-2/&quot;&gt;常用Android学习资源汇总(二)-优秀开源框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-3/&quot;&gt;常用Android学习资源汇总(三)-高频技术专题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/24/android-study-resource-4/&quot;&gt;常用Android学习资源汇总(四)-便捷开发工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="资源索引" scheme="http://czhzero.com/tags/%E8%B5%84%E6%BA%90%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>Java类初始化顺序</title>
    <link href="http://czhzero.com/2017/02/24/java-init-sequence-sample/"/>
    <id>http://czhzero.com/2017/02/24/java-init-sequence-sample/</id>
    <published>2017-02-24T14:25:10.000Z</published>
    <updated>2017-02-24T14:32:50.000Z</updated>
    
    <content type="html">&lt;p&gt;Java程序在它运行之前，并非完全加载，其各个部分是在必需时才加载。Java类的初始化顺序，是先静态对象，而后是非静态对象。类加载器加载class文件时，初始化静态对象。new操作符时，初始化非静态对象。&lt;/p&gt;
&lt;p&gt;在类的内部，变量定义的先后决定了初始化的顺序。即使变量定义散布于方法定义之间，它们仍旧会在任何方法(包括构造方法)被调用之前得到初始化。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-无继承类初始化&quot;&gt;&lt;a href=&quot;#1-无继承类初始化&quot; class=&quot;headerlink&quot; title=&quot;1.无继承类初始化&quot;&gt;&lt;/a&gt;1.无继承类初始化&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Client &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static class Person &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public Person(String str) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static class Test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//静态成员变量 A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public static Person sPersonA = new Person(&amp;quot;A 静态成员变量初始化&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//静态初始化代码块 B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		static &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&amp;quot;B 静态初始化块&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//成员变量 C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public Person mPersonC = new Person(&amp;quot;C 成员变量初始化&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//初始化代码 D&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&amp;quot;D 初始化代码块&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//构造函数 E&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public Test() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&amp;quot;E 构造函数&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//静态成员变量 F&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public static Person sPersonF = new Person(&amp;quot;F 静态成员变量初始化&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//静态初始化代码块 G&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		static &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&amp;quot;G 静态初始化块&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//成员变量 H&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public Person mPersonH = new Person(&amp;quot;H 成员变量初始化&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//初始化代码 I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.out.println(&amp;quot;I 初始化代码块&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Test test = new Test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A 静态成员变量初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B 静态初始化块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F 静态成员变量初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;G 静态初始化块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C 成员变量初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D 初始化代码块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;H 成员变量初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I 初始化代码块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E 构造函数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由此可以得出以下结论：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;初始化顺序: 静态变量/静态代码块 -&amp;gt;  成员变量/代码块 -&amp;gt; 构造函数&lt;/strong&gt;&lt;br&gt;其中，静态变量与静态代码块，成员变量与代码块的初始化顺序只取决于定义顺序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-子类初始化顺序&quot;&gt;&lt;a href=&quot;#2-子类初始化顺序&quot; class=&quot;headerlink&quot; title=&quot;2. 子类初始化顺序&quot;&gt;&lt;/a&gt;2. 子类初始化顺序&lt;/h3&gt;&lt;p&gt;创建一个TestSub类继承Test类，    &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static class TestSub extends Test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//静态成员变量 a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static Person sPersonA = new Person(&amp;quot;a 静态成员变量初始化&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//静态初始化代码块 b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	static &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&amp;quot;b 静态初始化块&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//成员变量 c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Person mPersonC = new Person(&amp;quot;c 成员变量初始化&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//初始化代码 d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&amp;quot;d 初始化代码块&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//构造函数 e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public TestSub() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&amp;quot;e 构造函数&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//静态成员变量 f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static Person sPersonF = new Person(&amp;quot;f 静态成员变量初始化&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//静态初始化代码块 g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	static &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&amp;quot;g 静态初始化块&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//成员变量 h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Person mPersonH = new Person(&amp;quot;h 成员变量初始化&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//初始化代码 i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		System.out.println(&amp;quot;i 初始化代码块&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//Test test = new Test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	TestSub sub = new TestSub();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A 静态成员变量初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B 静态初始化块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F 静态成员变量初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;G 静态初始化块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a 静态成员变量初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b 静态初始化块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f 静态成员变量初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;g 静态初始化块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C 成员变量初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D 初始化代码块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;H 成员变量初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I 初始化代码块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E 构造函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c 成员变量初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d 初始化代码块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;h 成员变量初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i 初始化代码块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e 构造函数&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由此可以得出以下结论：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;子类初始化顺序：&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;父类静态变量/父类静态方法块 -&amp;gt; 子类静态变量/子类静态方法块 -&amp;gt; 父类成员变量/方法块 -&amp;gt; 父类构造函数 -&amp;gt;  子类成员变量/方法块 -&amp;gt; 子类构造函数&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Java程序在它运行之前，并非完全加载，其各个部分是在必需时才加载。Java类的初始化顺序，是先静态对象，而后是非静态对象。类加载器加载class文件时，初始化静态对象。new操作符时，初始化非静态对象。&lt;/p&gt;
&lt;p&gt;在类的内部，变量定义的先后决定了初始化的顺序。即使变量定义散布于方法定义之间，它们仍旧会在任何方法(包括构造方法)被调用之前得到初始化。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://czhzero.com/categories/Java/"/>
    
    
      <category term="初始化" scheme="http://czhzero.com/tags/%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化(四)－ 代码优化</title>
    <link href="http://czhzero.com/2017/02/07/performance-optimization-4/"/>
    <id>http://czhzero.com/2017/02/07/performance-optimization-4/</id>
    <published>2017-02-07T14:54:52.000Z</published>
    <updated>2017-02-07T15:16:34.000Z</updated>
    
    <content type="html">&lt;p&gt;主要介绍Java代码中性能优化方法，包括缓存、异步、延迟、数据存储等方式。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;性能优化系列:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(一)－UI优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(一)－数据库优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(三)－ 移动网络优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(四)－ 代码优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;缓存优化&quot;&gt;&lt;a href=&quot;#缓存优化&quot; class=&quot;headerlink&quot; title=&quot;缓存优化&quot;&gt;&lt;/a&gt;缓存优化&lt;/h2&gt;&lt;p&gt;缓存主要包括对象缓存、IO缓存、网络缓存、DB缓存，对象缓存能减少内存的分配，IO缓存减少磁盘的读写次数，网络缓存减少网络传输，DB缓存较少Database的访问次数。&lt;br&gt;在内存、文件、数据库、网络的读写速度中，内存都是最优的，且速度数量级差别，所以尽量将需要频繁访问或访问一次消耗较大的数据存储在缓存中&lt;/p&gt;
&lt;p&gt;Android常用缓存如下,&lt;/p&gt;
&lt;p&gt;(1) 线程池&lt;br&gt;(2) 大文件/图片缓存&lt;br&gt;(3) 消息缓存(handler.obtainMessage)&lt;br&gt;(4) view缓存(ListView的contentView)&lt;br&gt;(5) 网络缓存(Http缓存)&lt;/p&gt;
&lt;p&gt;数据库缓存http response，根据http头信息中的Cache-Control域确定缓存过期时间。&lt;/p&gt;
&lt;p&gt;(6) 文件IO缓存&lt;/p&gt;
&lt;p&gt;使用具有缓存策略的输入流，BufferedInputStream替代InputStream，BufferedReader替代Reader，BufferedReader替代BufferedInputStream.对文件、网络IO皆适用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据存储优化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数据类型选择&lt;/p&gt;
&lt;p&gt;  字符串拼接用StringBuilder代替String，在非并发情况下用StringBuilder代替StringBuffer。如果你对字符串的长度有大致了解，如100字符左右，可以直接new StringBuilder(128)指定初始大小，减少空间不够时的再次分配。&lt;br&gt;  64位类型如long double的处理比32位如int慢&lt;br&gt;  使用SoftReference、WeakReference相对正常的强应用来说更有利于系统垃圾回收&lt;br&gt;  final类型存储在常量区中读取效率更高&lt;br&gt;  LocalBroadcastManager代替普通BroadcastReceiver，效率和安全性都更高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据结构选择&lt;/p&gt;
&lt;p&gt;  常见的数据结构选择如：&lt;br&gt;  ArrayList和LinkedList的选择，ArrayList根据index取值更快，LinkedList更占内存、随机插入删除更快速、扩容效率更高。一般推荐ArrayList。&lt;br&gt;  ArrayList、HashMap、LinkedHashMap、HashSet的选择，hash系列数据结构查询速度更优，ArrayList存储有序元素，HashMap为键值对数据结构，LinkedHashMap可以记住加入次序的hashMap，HashSet不允许重复元素。&lt;br&gt;  HashMap、WeakHashMap选择，WeakHashMap中元素可在适当时候被系统垃圾回收器自动回收，所以适合在内存紧张型中使用。&lt;br&gt;  Collections.synchronizedMap和ConcurrentHashMap的选择，ConcurrentHashMap为细分锁，锁粒度更小，并发性能更优。Collections.synchronizedMap为对象锁，自己添加函数进行锁控制更方便。&lt;/p&gt;
&lt;p&gt;  Android也提供了一些性能更优的数据类型，如SparseArray、SparseBooleanArray、SparseIntArray、Pair。&lt;br&gt;  Sparse系列的数据结构是为key为int情况的特殊处理，采用二分查找及简单的数组存储，加上不需要泛型转换的开销，相对Map来说性能更优。不过我不太明白为啥默认的容量大小是10，是做过数据统计吗，还是说现在的内存优化不需要考虑这些东西，写16会死吗，还是建议大家根据自己可能的容量设置初始值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;异步，利用多线程提高TPS&quot;&gt;&lt;a href=&quot;#异步，利用多线程提高TPS&quot; class=&quot;headerlink&quot; title=&quot;异步，利用多线程提高TPS&quot;&gt;&lt;/a&gt;异步，利用多线程提高TPS&lt;/h2&gt;&lt;p&gt;充分利用多核Cpu优势，利用线程解决密集型计算、IO、网络等操作。&lt;br&gt;关于多线程可参考：Java线程池&lt;br&gt;在Android应用程序中由于系统ANR的限制，将可能造成主线程超时操作放入另外的工作线程中。在工作线程中可以通过handler和主线程交互。&lt;/p&gt;
&lt;h2 id=&quot;提前或延迟操作，错开时间段提高TPS&quot;&gt;&lt;a href=&quot;#提前或延迟操作，错开时间段提高TPS&quot; class=&quot;headerlink&quot; title=&quot;提前或延迟操作，错开时间段提高TPS&quot;&gt;&lt;/a&gt;提前或延迟操作，错开时间段提高TPS&lt;/h2&gt;&lt;p&gt;(1) 延迟操作&lt;br&gt;不在Activity、Service、BroadcastReceiver的生命周期等对响应时间敏感函数中执行耗时操作，可适当delay。&lt;br&gt;Java中延迟操作可使用ScheduledExecutorService，不推荐使用Timer.schedule;&lt;br&gt;Android中除了支持ScheduledExecutorService之外，还有一些delay操作，如&lt;br&gt;handler.postDelayed，handler.postAtTime，handler.sendMessageDelayed，View.postDelayed，AlarmManager定时等。&lt;/p&gt;
&lt;p&gt;(2) 提前操作&lt;br&gt;对于第一次调用较耗时操作，可统一放到初始化中，将耗时提前。如得到壁纸wallpaperManager.getDrawable();&lt;/p&gt;
&lt;h2 id=&quot;其他方面&quot;&gt;&lt;a href=&quot;#其他方面&quot; class=&quot;headerlink&quot; title=&quot;其他方面&quot;&gt;&lt;/a&gt;其他方面&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;用位操作代替乘除法&lt;/li&gt;
&lt;li&gt;合理利用浮点数，浮点数比整形慢两倍&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要重复初始化变量，默认情况下，调用类的构造函数时，Java会把变量初始化成确定的值：所有的对象被设置成null，整数变量（byte、short、int、long）设置成0，float和double设置成0.0，逻辑值设置成false。所有尽量不要重复初始化变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽量使用局部变量，调用方法时传递的参数以及在调用中创建的临时变量都保存在栈（stack）中，速度较快，并且随所在线程的死亡而自动销毁。其他变量，如静态变量、实例变量等，都在堆（heap）中创建，速度较慢，垃圾回收是的耗能会导致APP出现卡顿现象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽量指定类的final修饰符。带有final修饰符的类是不可派生的。另外，如果指定一个类为final，则该类所有的方法都是final。Java编译器会寻找机会内联（inline）所有的final方法。此举能够使性能平均提高50%。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;私有内部类要访问外部类的field或方法时，其成员变量不要用private，因为在编译时会生成setter/getter影响性能。可以把外部类的field或者方法声明为包访问权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果方法用不到成员变量，可以把方法申明为static，性能会提高到15%到20%。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;异常对性能不利。抛出异常首先要创建一个新的对象。Throwable接口的构造函数调用名为fillnStackTrace()的本地(Native)方法，fillnStackTrace()方法检查堆栈，收集调用跟踪信息。只要有异常被抛出，VM就必须调整调用堆栈，因为在处理过程中创建了一个新的对象。异常只能用于错误处理，不应该用来控制程序流程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.trinea.cn/android/java-android-performance/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;性能优化之Java(Android)代码优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/wtyvhreal/article/details/44172125&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化 浅析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;主要介绍Java代码中性能优化方法，包括缓存、异步、延迟、数据存储等方式。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="性能优化" scheme="http://czhzero.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化(三)－ 移动网络优化</title>
    <link href="http://czhzero.com/2017/02/07/performance-optimization-3/"/>
    <id>http://czhzero.com/2017/02/07/performance-optimization-3/</id>
    <published>2017-02-07T14:17:48.000Z</published>
    <updated>2017-02-07T15:16:50.000Z</updated>
    
    <content type="html">&lt;p&gt;本篇文章介绍了移动端开发基本的网络优化方式，包括连接服务器策略，获取数据策略等等。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;性能优化系列:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(一)－UI优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(一)－数据库优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(三)－ 移动网络优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(四)－ 代码优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;连接服务器优化&quot;&gt;&lt;a href=&quot;#连接服务器优化&quot; class=&quot;headerlink&quot; title=&quot;连接服务器优化&quot;&gt;&lt;/a&gt;连接服务器优化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;IP直连&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不用域名，用IP直接连接，省去DNS解析时间。一般为了安全，这个ip会设置成动态Ip列表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器合理部署&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;服务器多运营商多地部署，一般至少含三大运营商、南中北三地部署。&lt;/p&gt;
&lt;p&gt;配合上面说到的动态 IP 列表，支持优先级，每次根据地域、网络类型等选择最优的服务器 IP 进行连接。&lt;/p&gt;
&lt;h2 id=&quot;获取数据优化&quot;&gt;&lt;a href=&quot;#获取数据优化&quot; class=&quot;headerlink&quot; title=&quot;获取数据优化&quot;&gt;&lt;/a&gt;获取数据优化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;连接复用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;节省连接建立时间，如开启 keep-alive。&lt;/p&gt;
&lt;p&gt;Http 1.1 默认启动了 keep-alive。对于 Android 来说默认情况下 HttpURLConnection 和 HttpClient 都开启了 keep-alive。只是 2.2 之前 HttpURLConnection 存在影响连接池的 Bug，具体可见：&lt;a href=&quot;http://www.trinea.cn/android/android-http-api-compare/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android HttpURLConnection 及 HttpClient 选择&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求合并&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即将多个请求合并为一个进行请求，比较常见的就是网页中的 CSS Image Sprites。 如果某个页面内请求过多，也可以考虑做一定的请求合并。&lt;/p&gt;
&lt;p&gt;具体业务的网络请求，能够合并的也尽量合并。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;压缩数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(1) 对于 POST 请求，Body 可以做 Gzip 压缩，如日志。&lt;a href=&quot;http://www.cnblogs.com/tinyclear/p/6109792.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GZIP压缩与解压&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;(2) 对请求头进行压缩&lt;br&gt;这个 Http 1.1 不支持，SPDY 及 Http 2.0 支持。 Http 1.1 可以通过服务端对前一个请求的请求头进行缓存，后面相同请求头用 md5 之类的 id 来表示即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CDN 缓存静态资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缓存常见的图片、JS、CSS 等静态资源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减小每次返回数据的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(1) 压缩&lt;br&gt;一般 API 数据使用 Gzip 压缩，下图是之前测试的 Gzip 压缩前后对比图。 &lt;/p&gt;
&lt;p&gt;(2) 精简数据格式&lt;/p&gt;
&lt;p&gt;如 JSON 代替 XML，WebP 代替其他图片格式。&lt;/p&gt;
&lt;p&gt;(3) 对于不同的设备不同网络返回不同的内容 如不同分辨率图片大小。&lt;/p&gt;
&lt;p&gt;(4) 增量更新&lt;/p&gt;
&lt;p&gt;需要数据更新时，可考虑增量更新。如常见的服务端进行 bsdiff，客户端进行 bspatch。&lt;/p&gt;
&lt;p&gt;(5) 大文件下载&lt;br&gt;支持断点续传，并缓存 Http Resonse 的 ETag 标识，下次请求时带上，从而确定是否数据改变过，未改变则直接返回 304。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Http缓存获取到的数据，在一定的有效时间内再次请求可以直接从缓存读取数据。&lt;/p&gt;
&lt;h2 id=&quot;其他方案&quot;&gt;&lt;a href=&quot;#其他方案&quot; class=&quot;headerlink&quot; title=&quot;其他方案&quot;&gt;&lt;/a&gt;其他方案&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;预取&lt;br&gt;包括预连接、预取数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分优先级、延迟部分请求&lt;br&gt;将不重要的请求延迟，这样既可以削峰减少并发、又可以和后面类似的请求做合并。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多连接&lt;br&gt;对于较大文件，如大图片、文件下载可考虑多连接。 需要控制请求的最大并发量，毕竟移动端网络受限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wifi传输&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;wifi比蜂窝数据，包括2G(GPRS)、3G更省电)尽量在Wi-Fi下传输数据。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章介绍了移动端开发基本的网络优化方式，包括连接服务器策略，获取数据策略等等。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="性能优化" scheme="http://czhzero.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化(二)－ 数据库性能优化</title>
    <link href="http://czhzero.com/2017/02/07/performance-optimization-2/"/>
    <id>http://czhzero.com/2017/02/07/performance-optimization-2/</id>
    <published>2017-02-07T13:50:36.000Z</published>
    <updated>2017-02-07T15:17:02.000Z</updated>
    
    <content type="html">&lt;p&gt;本文为性能优化的第二篇——数据库性能优化，主要包括索引，事务，异步线程等几个方面。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;性能优化系列:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(一)－UI优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(一)－数据库优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(三)－ 移动网络优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(四)－ 代码优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h2&gt;&lt;p&gt;简单的说，索引就像书本的目录，目录可以快速找到所在页数，数据库中索引可以帮助快速找到数据，而不用全表扫描，合适的索引可以大大提高数据库查询的效率。&lt;/p&gt;
&lt;p&gt;优点是加快了数据库点检索速度，但是缺点也很明显，索引但创建和维护存在消耗，索引会占用物理空间，且随着数据量的增加而增加。在对数据库进行增删改时需要维护索引，所以会对增删改的性能存在影响。&lt;/p&gt;
&lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;p&gt;使用事务的两大好处是原子提交和更优性能。&lt;/p&gt;
&lt;p&gt;Sqlite默认会为每个插入、更新操作创建一个事务，并且在每次插入、更新后立即提交。&lt;br&gt;这样如果连续插入100次数据实际是创建事务-&amp;gt;执行语句-&amp;gt;提交这个过程被重复执行了100次。如果我们显示的创建事务-&amp;gt;执行100条语句-&amp;gt;提交会使得这个创建事务和提交这个过程只做一次，通过这种一次性事务可以使得性能大幅提升。尤其当数据库位于sd卡时，时间上能节省两个数量级左右。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public void insertWithOneTransaction() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SQLiteDatabase db = sqliteOpenHelper.getWritableDatabase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Begins a transaction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    db.beginTransaction();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // your sqls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i = 0; i &amp;lt; 100; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            db.insert(yourTableName, null, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // marks the current transaction as successful&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        db.setTransactionSuccessful();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // process it&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // end a transaction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        db.endTransaction();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;异步线程&quot;&gt;&lt;a href=&quot;#异步线程&quot; class=&quot;headerlink&quot; title=&quot;异步线程&quot;&gt;&lt;/a&gt;异步线程&lt;/h2&gt;&lt;p&gt;Android中数据不多时表查询可能耗时不多，不会导致anr，不过大于100ms时同样会让用户感觉到延时和卡顿，可以放在线程中运行，但sqlite在并发方面存在局限，多线程控制较麻烦，这时候可使用单线程池，在任务中执行db操作，通过handler返回结果和ui线程交互，既不会影响UI线程，同时也能防止并发带来的异常。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;singleThreadExecutor.execute(new Runnable() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		// db operetions, u can use handler to send message after&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		db.insert(yourTableName, null, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		handler.sendEmptyMessage(xx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;其他优化&quot;&gt;&lt;a href=&quot;#其他优化&quot; class=&quot;headerlink&quot; title=&quot;其他优化&quot;&gt;&lt;/a&gt;其他优化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有些能用文件操作的，尽量使用文件操作，文件操作的速度比数据库的操作要快10倍左右。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cursor的使用，管理好cursor，不要每次打开关闭cursor，因为打开关闭cursor非常耗时。Cursor.require用于刷cursor。同时由于SQLiteDatabase对象较为耗费资源，所以我们在使用完SQLiteDatabase对象之后，必须立即关闭它，避免它继续占用资源，否则我们继续程序可能会导致OOM或者其他异常。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询时返回更少的结果集及更少的字段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;少用cursor.getColumnIndex(可以在建表的时候用static变量记住某列的index，直接调用相应index而不是每次查询。)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优化sql语句字符串等，语句的拼接使用StringBuilder代替String。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.trinea.cn/android/database-performance/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;性能优化之数据库优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/wtyvhreal/article/details/44172125&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化 浅析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文为性能优化的第二篇——数据库性能优化，主要包括索引，事务，异步线程等几个方面。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="性能优化" scheme="http://czhzero.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化(一)－UI优化</title>
    <link href="http://czhzero.com/2017/02/07/performance-optimization-1/"/>
    <id>http://czhzero.com/2017/02/07/performance-optimization-1/</id>
    <published>2017-02-07T09:37:31.000Z</published>
    <updated>2017-02-07T15:17:14.000Z</updated>
    
    <content type="html">&lt;p&gt;本文为Android性能优化的第一篇——UI优化，主要介绍使用抽象布局标签(include, viewstub, merge)、去除不必要的嵌套和View节点、减少不必要的infalte及其他Layout方面可调优点，顺带提及布局调优相关工具。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;性能优化系列:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(一)－UI优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(一)－数据库优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(三)－ 移动网络优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.czhzero.com/2017/02/07/performance-optimization-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化(四)－ 代码优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;性能问题指标&quot;&gt;&lt;a href=&quot;#性能问题指标&quot; class=&quot;headerlink&quot; title=&quot;性能问题指标&quot;&gt;&lt;/a&gt;性能问题指标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;响应时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指从用户操作开始到系统给用户以正确反馈的时间。一般包括逻辑处理时间,网络传输时间,展现时间。对于非网络类应用不包括网络传输时间。展现时间即网页或App界面渲染时间。响应时间是用户对性能最直接的感受。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TPS(Transaction Per Second)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TPS为每秒处理的事务数，是系统吞吐量的指标，在搜索系统中也用QPS(Query Per Second)衡量。TPS一般与响应时间反相关。通常所说的性能问题就是指响应时间过长、系统吞吐量过低。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统内存占用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个Android应用程序都执行在自己的虚拟机中，那了解Java的一定明白，每个虚拟机必定会有堆内存阈值限制（值得一提的是这个阈值一般都由厂商依据硬件配置及设备特性自己设定，没有统一标准，可以为64M，也可以为128M等；它的配置是在Android的属性系统的/system/build.prop中配置dalvik.vm.heapsize=128m即可，若存在dalvik.vm.heapstartsize则表示初始申请大小），也即一个应用进程同时存在的对象必须小于阈值规定的内存大小才可以正常运行。&lt;/p&gt;
&lt;p&gt;接着我们运行的App在自己的虚拟机中内存管理基本就是遵循Java的内存管理机制了，系统在特定的情况下主动进行垃圾回收。但是要注意的一点就是在Android系统中执行垃圾回收（GC）操作时所有线程（包含UI线程）都必须暂停，等垃圾回收操作完成之后其他线程才能继续运行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;耗电量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在移动设备开发中耗电量是一个非常重要的指标，如果用户一旦发现我们的应用非常耗电，不好意思，他们大多会选择卸载来解决此类问题，所以耗电量是一个十分重要的问题。其实我们一款应用耗电量最大的部分不是UI绘制显示等，常见耗电量最大原因基本都是因为网络数据交互、GPS定位、大量内存性能问题、冗余的后台线程和Service等造成。&lt;/p&gt;
&lt;h2 id=&quot;UI优化&quot;&gt;&lt;a href=&quot;#UI优化&quot; class=&quot;headerlink&quot; title=&quot;UI优化&quot;&gt;&lt;/a&gt;UI优化&lt;/h2&gt;&lt;h3 id=&quot;1-抽象布局标签&quot;&gt;&lt;a href=&quot;#1-抽象布局标签&quot; class=&quot;headerlink&quot; title=&quot;1.抽象布局标签&quot;&gt;&lt;/a&gt;1.抽象布局标签&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;include&amp;gt;&lt;/code&gt;标签&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;include标签常用于将布局中的公共部分提取出来供其他layout共用，以实现布局模块化，这在布局编写方便提供了大大的便利。&lt;br&gt;下面以在一个布局main.xml中用include引入另一个布局foot.xml为例。main.mxl代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_height=&amp;quot;match_parent&amp;quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/tv_text&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_marginBottom=&amp;quot;@dimen/dp_80&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;include layout=&amp;quot;@layout/foot.xml&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中include引入的foot.xml为公用的页面底部，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_height=&amp;quot;match_parent&amp;quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Button&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/button&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;@dimen/dp_40&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_above=&amp;quot;@+id/text&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;TextView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/text&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;@dimen/dp_40&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_alignParentBottom=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:text=&amp;quot;@string/app_name&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;include&gt;标签唯一需要的属性是layout属性，指定需要包含的布局文件。可以定义android:id和android:layout_*属性来覆盖被引入布局根节点的对应属性值。注意重新定义android:id后，子布局的顶结点i就变化了。&lt;/include&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;viewstub&amp;gt;&lt;/code&gt;标签 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;viewstub标签同include标签一样可以用来引入一个外部布局，不同的是，viewstub引入的布局默认不会扩张，即既不会占用显示也不会占用位置，从而在解析layout时节省cpu和内存。&lt;br&gt;viewstub常用来引入那些默认不会显示，只在特殊情况下显示的布局，如进度布局、网络失败显示的刷新布局、信息出错出现的提示布局等。&lt;br&gt;下面以在一个布局main.xml中加入网络错误时的提示页面network_error.xml为例。main.mxl代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_height=&amp;quot;match_parent&amp;quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;ViewStub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/network_error_layout&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout=&amp;quot;@layout/network_error&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中network_error.xml为只有在网络错误时才需要显示的布局，默认不会被解析，示例代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:layout_height=&amp;quot;match_parent&amp;quot; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Button&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/network_setting&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;@dimen/dp_160&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_centerHorizontal=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:text=&amp;quot;@string/network_setting&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;Button&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:id=&amp;quot;@+id/network_refresh&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_width=&amp;quot;@dimen/dp_160&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_below=&amp;quot;@+id/network_setting&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_centerHorizontal=&amp;quot;true&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:layout_marginTop=&amp;quot;@dimen/dp_10&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:text=&amp;quot;@string/network_refresh&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/RelativeLayout&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在java中通过(ViewStub)findViewById(id)找到ViewStub，通过stub.inflate()展开ViewStub，然后得到子View，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private View networkErrorView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private void showNetError() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// not repeated infalte&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (networkErrorView != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		networkErrorView.setVisibility(View.VISIBLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ViewStub stub = (ViewStub)findViewById(R.id.network_error_layout);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	networkErrorView = stub.inflate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Button networkSetting = (Button)networkErrorView.findViewById(R.id.network_setting);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Button refresh = (Button)findViewById(R.id.network_refresh);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private void showNormal() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (networkErrorView != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		networkErrorView.setVisibility(View.GONE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面showNetError()中展开了ViewStub，同时我们对networkErrorView进行了保存，这样下次不用继续inflate。这就是后面第三部分提到的减少不必要的infalte。&lt;br&gt;viewstub标签大部分属性同include标签类似。&lt;/p&gt;
&lt;p&gt;viewstub标签大部分属性同include标签类似。&lt;/p&gt;
&lt;p&gt;上面展开ViewStub部分代码&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ViewStub stub = (ViewStub)findViewById(R.id.network_error_layout);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;networkErrorView = stub.inflate();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以写成下面的形式&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;View viewStub = findViewById(R.id.network_error_layout);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;viewStub.setVisibility(View.VISIBLE);   // ViewStub被展开后的布局所替换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;networkErrorView =  findViewById(R.id.network_error_layout); // 获取展开后的布局&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果一致，只是不用显示的转换为ViewStub。通过viewstub的原理我们可以知道将一个view设置为GONE不会被解析，从而提高layout解析速度，而VISIBLE和INVISIBLE这两个可见性属性会被正常解析。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;merge&amp;gt;&lt;/code&gt;标签&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在使用了include后可能导致布局嵌套过多，多余不必要的layout节点，从而导致解析变慢，不必要的节点和嵌套可通过hierarchy viewer(下面布局调优工具中有具体介绍)或设置-&amp;gt;开发者选项-&amp;gt;显示布局边界查看。&lt;/p&gt;
&lt;p&gt;merge标签可用于两种典型情况：&lt;/p&gt;
&lt;p&gt;a.布局顶结点是FrameLayout且不需要设置background或padding等属性，可以用merge代替，因为Activity内容试图的parent view就是个FrameLayout，所以可以用merge消除只剩一个。&lt;/p&gt;
&lt;p&gt;b.某布局作为子布局被其他布局include时，使用merge当作该布局的顶节点，这样在被引入时顶结点会自动被忽略，而将其子节点全部合并到主布局中。&lt;/p&gt;
&lt;h3 id=&quot;2-去除不必要的嵌套和View节点&quot;&gt;&lt;a href=&quot;#2-去除不必要的嵌套和View节点&quot; class=&quot;headerlink&quot; title=&quot;2.去除不必要的嵌套和View节点&quot;&gt;&lt;/a&gt;2.去除不必要的嵌套和View节点&lt;/h3&gt;&lt;p&gt;(1) 首次不需要使用的节点设置为GONE或使用viewstub&lt;/p&gt;
&lt;p&gt;(2) 使用RelativeLayout代替LinearLayout大约在Android4.0之前，新建工程的默认main.xml中顶节点是LinearLayout，而在之后已经改为RelativeLayout，因为RelativeLayout性能更优，且可以简单实现LinearLayout嵌套才能实现的布局。&lt;/p&gt;
&lt;h3 id=&quot;3-减少不必要的infalte&quot;&gt;&lt;a href=&quot;#3-减少不必要的infalte&quot; class=&quot;headerlink&quot; title=&quot;3.减少不必要的infalte&quot;&gt;&lt;/a&gt;3.减少不必要的infalte&lt;/h3&gt;&lt;p&gt;(1) 对于inflate的布局可以直接缓存，用全部变量代替局部变量，避免下次需再次inflate&lt;br&gt;如上面ViewStub示例中的&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (networkErrorView != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	networkErrorView.setVisibility(View.VISIBLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;(2) ListView提供了item缓存，adapter getView的标准写法，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public View getView(int position, View convertView, ViewGroup parent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ViewHolder holder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (convertView == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		convertView = inflater.inflate(R.layout.list_item, null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		holder = new ViewHolder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		convertView.setTag(holder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		holder = (ViewHolder)convertView.getTag();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * ViewHolder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @author trinea@trinea.cn 2013-08-01&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;private static class ViewHolder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ImageView appIcon;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	TextView  appName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	TextView  appInfo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-其他建议&quot;&gt;&lt;a href=&quot;#4-其他建议&quot; class=&quot;headerlink&quot; title=&quot;4.其他建议&quot;&gt;&lt;/a&gt;4.其他建议&lt;/h3&gt;&lt;p&gt;(1) 用SurfaceView或TextureView代替普通View&lt;br&gt;SurfaceView或TextureView可以通过将绘图操作移动到另一个单独线程上提高性能。&lt;br&gt;普通View的绘制过程都是在主线程(UI线程)中完成，如果某些绘图操作影响性能就不好优化了，这时我们可以考虑使用SurfaceView和TextureView，他们的绘图操作发生在UI线程之外的另一个线程上。&lt;br&gt;因为SurfaceView在常规视图系统之外，所以无法像常规试图一样移动、缩放或旋转一个SurfaceView。TextureView是Android4.0引入的，除了与SurfaceView一样在单独线程绘制外，还可以像常规视图一样被改变。&lt;/p&gt;
&lt;p&gt;(2) 使用RenderJavascript&lt;br&gt;RenderScript是Adnroid3.0引进的用来在Android上写高性能代码的一种语言，语法给予C语言的C99标准，他的结构是独立的，所以不需要为不同的CPU或者GPU定制代码代码。&lt;/p&gt;
&lt;p&gt;(3) 使用OpenGL绘图&lt;br&gt;Android支持使用OpenGL API的高性能绘图，这是Android可用的最高级的绘图机制，在游戏类对性能要求较高的应用中得到广泛使用。&lt;br&gt;Android 4.3最大的改变，就是支持OpenGL ES 3.0。相比2.0，3.0有更多的缓冲区对象、增加了新的着色语言、增加多纹理支持等等，将为Android游戏带来更出色的视觉体验。&lt;/p&gt;
&lt;p&gt;(4)尽量为所有分辨率创建资源&lt;br&gt;减少不必要的硬件缩放，这会降低UI的绘制速度。&lt;/p&gt;
&lt;p&gt;(5)尽量减少不必要的背景设置，图片尽量压缩处理显示，尽量避免频繁内存抖动等问题出现。&lt;/p&gt;
&lt;p&gt;(6)尽量避免在draw、measure、layout中做过于耗时及耗内存操作，尤其是draw方法中，尽量减少draw、measure、layout等执行次数。&lt;/p&gt;
&lt;p&gt;(7)将Activity中的window的背景图设置为空，默认的背景不为空getWindow().setBackgroundDrawable(null)。&lt;/p&gt;
&lt;p&gt;(8)View中设置缓存属性.setDrawingCache为true。&lt;/p&gt;
&lt;h3 id=&quot;5-布局调优工具&quot;&gt;&lt;a href=&quot;#5-布局调优工具&quot; class=&quot;headerlink&quot; title=&quot;5.布局调优工具&quot;&gt;&lt;/a&gt;5.布局调优工具&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Hierarchy viewer&lt;/li&gt;
&lt;li&gt;Android Lint&lt;/li&gt;
&lt;li&gt;使用GPU过度绘制分析UI性能&lt;/li&gt;
&lt;li&gt;使用GPU呈现模式图及FPS&lt;/li&gt;
&lt;li&gt;使用Memory监测及GC打印与Allocation Tracker进行UI卡顿分析&lt;/li&gt;
&lt;li&gt;使用Traceview和dmtracedump进行分析优化&lt;/li&gt;
&lt;li&gt;使用Systrace进行分析优化&lt;/li&gt;
&lt;li&gt;通过Android SDK中tools目录下的layoutopt命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详细内容具体参考&lt;a href=&quot;http://blog.csdn.net/christopher_411524/article/details/50582740&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化总结&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/christopher_411524/article/details/50582740&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android性能优化总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.trinea.cn/android/layout-performance/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;性能优化之布局优化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文为Android性能优化的第一篇——UI优化，主要介绍使用抽象布局标签(include, viewstub, merge)、去除不必要的嵌套和View节点、减少不必要的infalte及其他Layout方面可调优点，顺带提及布局调优相关工具。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="性能优化" scheme="http://czhzero.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Vim常用快捷键总结</title>
    <link href="http://czhzero.com/2017/01/17/vim-key-shortcut/"/>
    <id>http://czhzero.com/2017/01/17/vim-key-shortcut/</id>
    <published>2017-01-17T14:53:58.000Z</published>
    <updated>2017-01-17T15:08:43.000Z</updated>
    
    <content type="html">&lt;p&gt;vi命令是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;工作模式&quot;&gt;&lt;a href=&quot;#工作模式&quot; class=&quot;headerlink&quot; title=&quot;工作模式&quot;&gt;&lt;/a&gt;工作模式&lt;/h2&gt;&lt;p&gt;Vim编辑器共有两种工作模式，一个是插入模式，一个是命令模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用来编写文本内容。在命令模式下, 按&lt;code&gt;字母i键&lt;/code&gt;即可进入到插入模式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/020/insertmodel.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是用来编辑文本，如上下翻页等，复制粘贴，跳转到指定行等操作。在插入模式下，按&lt;code&gt;Esc键&lt;/code&gt;，再按&lt;code&gt;冒号:键&lt;/code&gt;即可进入命令模式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/020/commandmodel.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当前编辑的顶部或者底部会显示vim处于何种模式下。如：mode：COMMAND!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有命令都必须在英文输入法下面输入&lt;br&gt;命令对大小写敏感&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;打开-保存-退出&quot;&gt;&lt;a href=&quot;#打开-保存-退出&quot; class=&quot;headerlink&quot; title=&quot;打开/保存/退出&quot;&gt;&lt;/a&gt;打开/保存/退出&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进入&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//filename，若已经存在则打开已存在的文件，不存在则新建一个文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//默认开始进入的模式是命令模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vi filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;保存/退出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入命令模式，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:wq              保存修改并退出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ZZ               快捷键，保存修改并退出(前面没有冒号)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:q!              不保存退出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:wq!             强行保存退出，(文件所属者科忽略文件的制度属性)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:w               保存不退出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:wqa             保存所有文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:w new_filename  另存为指定文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;编辑&quot;&gt;&lt;a href=&quot;#编辑&quot; class=&quot;headerlink&quot; title=&quot;编辑&quot;&gt;&lt;/a&gt;编辑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;插入&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a                     在光标后附加文本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A                     在本行行末附加文本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i                     在光标前插入文本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I                     在本行开始插入文本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;o (字母)               在光标下插入新行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;O (字母)               在光标上插入新行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;剪切复制粘贴&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yy、Y                         复制当前行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nyy，nY                       复制当前行一下n行(包括当前行)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p、P                          粘贴在当前光标所在行下或行上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ddp                          交换当前行和其下一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dd                           剪切当前行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ndd                          剪切当前行一下n行(包括当前行)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:1,10d                       将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:1, 10 m 20                  将第1-10行移动到第20行之后。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;删除&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x                     删除后面的字符 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X                     删除前一个字符  删除3个字符就是3x  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dd                    删除一行   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D                     删除到行尾 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dw                    删除一个单词（光标后部分）  　　　　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d4w                   删除4个单词　　　　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d$                    删除当前光标到行尾　　　　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d^                    删除当前光标至行首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;J                     删除换行符，使下一行并上来。     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nJ                    连接后面的n行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;撤销&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;u                         取消上一步操作(最多连续取消500次)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+r                    恢复上一步被撤销的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;U                         撤销当前一行的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:e!                       返回上次保存后的状态&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;定位&quot;&gt;&lt;a href=&quot;#定位&quot; class=&quot;headerlink&quot; title=&quot;定位&quot;&gt;&lt;/a&gt;定位&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;h、方向左键              左移一个字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;j、 方向下键             下移一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k、方向上键              上移一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l、 方向右键             右移一个字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$                       移至行尾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0                       移至行首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;^(尖角号)                移至行首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;H                       移至屏幕上端&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M                       移至屏幕中央&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L                       移至屏幕下端&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(                        (左小括号)移动到上一个句子首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)                        (右小括号)移动到下一个句子首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;                        (左大括号)移动到上一个段落首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;                        (右大括号)移动到下一个段落首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;&amp;apos;                       (连续输入法两个单引号)光标跳转到上次停靠处&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;W                        移动到下一个单词的首位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;w                        将光标右移一个单词的首位置。光标停留在下一个单词的首位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e                        移动到单词末尾。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E                        和小写用法一样，只是以空格字符作为字的分隔符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b                        移动到单词的头部&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B                        和小写用法一样，只是以空格字符作为字的分隔符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//w W e E b B 都可以与n结合使用, n为数量单位， 如nw nW ne nE nb nB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set nu                      设置行号为显示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set nonu                    设置行号为隐藏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set nu!                     设置行号为显示/隐藏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gg                           光标移动到第一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;G                            光标移动到最后一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nG                           光标跳转到指定行    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:n                           光标跳转到指定行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + e                 向下滚动一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + y                 向上滚动一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + d                 向下滚动半屏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + u                 向上滚动半屏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + f                 向下滚动一屏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + b                 向上滚动一屏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zz:将当前行滚动于屏幕中间，方便查看上下文  zt置顶，zb置尾&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;查找&quot;&gt;&lt;a href=&quot;#查找&quot; class=&quot;headerlink&quot; title=&quot;查找&quot;&gt;&lt;/a&gt;查找&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//在command模式下，通过按  f 或者 F   快速定位内容。(不需要输入冒号)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f                            向后查找&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F                            向前查找&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//可以结合数字来进行多次查找，如按下  3fq   ,就会放下查找第三个q&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//如果不加数字，如fq,就会向后查找第一个q&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*                            向后查找, 查找与光标下的词组相同的词组。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#                            向前查找, 查找与光标下的词组相同的词组。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//举例：假设光标停留在第一个if处&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//if  we are god   if you are human&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//我们在command模式下，输入  *  ，光标就会跳到“if you are human”的那个if上去&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//查找string，回车后，按n键可以跳到下一个，N上一个，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//?另外按/键后，按上下键可以找到以前查找的记录，同样的 ：也有记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/string  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//同上，默认向上查找&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;?string  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set ignorecase          大小写无关&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set noignorecase        大小写敏感&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set hlsearch            高亮显示查找结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set nohlsearch          取消高亮&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:nohlsearch              去掉当前显示的高亮（一次性）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;替换&quot;&gt;&lt;a href=&quot;#替换&quot; class=&quot;headerlink&quot; title=&quot;替换&quot;&gt;&lt;/a&gt;替换&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;r                         (小写)替换光标所在处一个字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;R                         (大写)开始替换,直到按ESC键退出替换,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cc                        (小写)取代光标所在整行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S                         (大写)与ss(小写)效果相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C                         (大写)取代到行尾,包括光标处字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c0                        (小写,数字0)取代到行首,不包括光标处字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c^                        (小写)与c0(小写,数字0)效果相同&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dabu.info/vim-shortcut-key-operation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我个人精心收集的必须熟悉的vim快捷键操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/tianyajuanke/archive/2012/04/25/2470002.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vim 常用快捷键&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;vi命令是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://czhzero.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="vim" scheme="http://czhzero.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Java虚拟机学习笔记(一) - 运行时数据区域</title>
    <link href="http://czhzero.com/2017/01/15/jvm-learning-1/"/>
    <id>http://czhzero.com/2017/01/15/jvm-learning-1/</id>
    <published>2017-01-15T07:09:36.000Z</published>
    <updated>2017-02-05T06:52:53.000Z</updated>
    
    <content type="html">&lt;p&gt;Java运行时数据区域(JVM RuntimeArea)其实就是指Java虚拟机在运行期间，其对Java虚拟机内存空间的划分和分配。Java虚拟机管理的内存包括几个运行时数据内存：方法区、虚拟机栈、本地方法栈、堆、程序计数器，其中方法区和堆是由线程共享的数据区，其他几个是线程隔离的数据区。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/017/20160819150110871.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;程序计数器&quot;&gt;&lt;a href=&quot;#程序计数器&quot; class=&quot;headerlink&quot; title=&quot;程序计数器&quot;&gt;&lt;/a&gt;程序计数器&lt;/h2&gt;&lt;p&gt;程序计数器(PC寄存器)是一块较小的内存，他可以看做是当前线程所执行的行号指示器。字节码解释器工作的时候就是通过改变这个计数器的值来选取下一条需要执行的字节码的指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器则为空。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每条线程都需要一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，生命周期与线程相同，我们称这类内存区域为&lt;strong&gt;线程私有&lt;/strong&gt;的内存&lt;/li&gt;
&lt;li&gt;唯一一个在Java虚拟机规范中没有规定任何OutOfMemotyError情况的区域&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Java虚拟机栈&quot;&gt;&lt;a href=&quot;#Java虚拟机栈&quot; class=&quot;headerlink&quot; title=&quot;Java虚拟机栈&quot;&gt;&lt;/a&gt;Java虚拟机栈&lt;/h2&gt;&lt;p&gt;虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于储存局部变量表、操作数栈、动态链接、方法出口等信息。每个方法从调用直至完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。&lt;/p&gt;
&lt;p&gt;栈内存就是虚拟机栈，或者说是虚拟机栈中局部变量表的部分&lt;/p&gt;
&lt;p&gt;局部变量表存放了编辑期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（refrence）类型和returnAddress类型（指向了一条字节码指令的地址）&lt;/p&gt;
&lt;p&gt;其中64位长度的long和double类型的数据会占用两个局部变量空间，其余的数据类型只占用1个。&lt;/p&gt;
&lt;p&gt;Java虚拟机规范对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。如果虚拟机扩展时无法申请到足够的内存，就会跑出OutOfMemoryError异常&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个线程创建的同时都会创建Java虚拟机栈，生命周期与线程相同，&lt;strong&gt;线程私有&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;内存分配高效，并且当线程运行完毕后，这些内存将被自动回收。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;本地方法栈&quot;&gt;&lt;a href=&quot;#本地方法栈&quot; class=&quot;headerlink&quot; title=&quot;本地方法栈&quot;&gt;&lt;/a&gt;本地方法栈&lt;/h2&gt;&lt;p&gt;本地方法栈和虚拟机栈发挥的作用是非常类似的，他们的区别是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务&lt;/p&gt;
&lt;p&gt;本地方法栈区域也会抛出StackOverflowError和OutOfMemoryErroy异常&lt;/p&gt;
&lt;h2 id=&quot;Java堆&quot;&gt;&lt;a href=&quot;#Java堆&quot; class=&quot;headerlink&quot; title=&quot;Java堆&quot;&gt;&lt;/a&gt;Java堆&lt;/h2&gt;&lt;p&gt;堆是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动的时候创建，此内存区域的唯一目的是存放对象实例，几乎所有的对象实例都在这里分配内存。所有的对象实例和数组都在堆上分配&lt;/p&gt;
&lt;p&gt;Java堆是垃圾收集器管理的主要区域。Java堆细分为新生代和老年代&lt;/p&gt;
&lt;p&gt;不管怎样，划分的目的都是为了更好的回收内存，或者更快地分配内存&lt;/p&gt;
&lt;p&gt;Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。如果在堆中没有完成实例分配，并且堆也无法在扩展时将会抛出OutOfMemoryError异常&lt;/p&gt;
&lt;h2 id=&quot;方法区&quot;&gt;&lt;a href=&quot;#方法区&quot; class=&quot;headerlink&quot; title=&quot;方法区&quot;&gt;&lt;/a&gt;方法区&lt;/h2&gt;&lt;p&gt;方法区它用于储存已被虚拟机加载的类信息（包括类的名称、方法信息、字段信息）、常量、静态变量、即时编译器编译后的代码等数据&lt;/p&gt;
&lt;p&gt;除了Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载&lt;/p&gt;
&lt;p&gt;当方法区无法满足内存分配需求时，将抛出OutOfMemoryErroy异常。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法区域全局共享&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于使用反射机制的原因，虚拟机很难推测哪个类信息不再使用，因此这块区域的回收很难！另外，对这块区域主要是针对常量池回收，值得注意的是JDK1.7已经把常量池转移到堆里面了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;运行时常量池&quot;&gt;&lt;a href=&quot;#运行时常量池&quot; class=&quot;headerlink&quot; title=&quot;运行时常量池&quot;&gt;&lt;/a&gt;运行时常量池&lt;/h2&gt;&lt;p&gt;它是方法区的一部分。Class文件中除了有关的版本、字段、方法、接口等描述信息外、还有一项信息是常量池，用于存放编辑期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。&lt;/p&gt;
&lt;p&gt;Java语言并不要求常量一定只有编辑期才能产生，也就是可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是&lt;a href=&quot;http://blog.csdn.net/seu_calvin/article/details/52291082&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;String类的intern()方法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;当常量池无法再申请到内存时会抛出OutOfMemoryError异常。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Java运行时数据区域(JVM RuntimeArea)其实就是指Java虚拟机在运行期间，其对Java虚拟机内存空间的划分和分配。Java虚拟机管理的内存包括几个运行时数据内存：方法区、虚拟机栈、本地方法栈、堆、程序计数器，其中方法区和堆是由线程共享的数据区，其他几个是线程隔离的数据区。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://czhzero.com/categories/Java/"/>
    
    
      <category term="Java虚拟机" scheme="http://czhzero.com/tags/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程(一) - 多线程的入门和使用</title>
    <link href="http://czhzero.com/2017/01/15/java-multi-thread-1/"/>
    <id>http://czhzero.com/2017/01/15/java-multi-thread-1/</id>
    <published>2017-01-15T05:34:50.000Z</published>
    <updated>2017-01-15T06:11:11.000Z</updated>
    
    <content type="html">&lt;p&gt;多线程可以减轻系统性能方面的瓶颈，提高CPU的处理器的效率，在多线程中，通过优先级管理，可以使重要的程序优先操作，提高了任务管理的灵活性；另一方面，在多CPU系统中，可以把不同的线程在不同的CPU中执行，真正做到同时处理多任务。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;先明确几个基本的概念:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行中的应用程序称为进程，拥有系统资源（cpu、内存）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程中的一段代码，一个进程中可以有多段代码。本身不拥有资源（共享所在进程的资源）。&lt;/p&gt;
&lt;p&gt;线程主要特点是，&lt;/p&gt;
&lt;p&gt;①、不能以一个文件名的方式独立存在在磁盘中。&lt;/p&gt;
&lt;p&gt;②、不能单独执行，只有在进程启动后才可启动。&lt;/p&gt;
&lt;p&gt;③、线程可以共享进程相同的内存（代码与数据）。&lt;/p&gt;
&lt;p&gt;线程的主要用途是，&lt;/p&gt;
&lt;p&gt;①、利用它可以完成重复性的工作（如实现动画、声音等的播放）。&lt;/p&gt;
&lt;p&gt;②、从事一次性较费时的初始化工作（如网络连接、声音数据文件的加载）。&lt;/p&gt;
&lt;p&gt;③、并发执行的运行效果（一个进程多个线程）以实现更复杂的功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在操作系统中能同时运行多个任务(程序)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多线程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指的是这个程序（一个进程）运行时产生了不止一个线程，有多个功能流同时执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多个cpu实例或者多台机器同时执行一段处理逻辑，是真正的同时。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过cpu调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时。并发往往在场景中有公用的资源，那么针对这个公用的资源往往产生瓶颈，我们会用TPS或者QPS来反应这个系统的处理能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程安全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经常用来描绘一段代码。指在并发的情况之下，该代码经过多线程使用，线程的调度顺序不影响任何结果。这个时候使用多线程，我们只需要关注系统的内存，cpu是不是够用即可。反过来，线程不安全就意味着线程的调度顺序会影响最终结果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java中的同步指的是通过人为的控制和调度，保证共享资源的多线程访问成为线程安全，来保证结果的准确。如上面的代码简单加入@synchronized关键字。在保证结果准确的同时，提高性能，才是优秀的程序。线程安全的优先级高于性能。&lt;/p&gt;
&lt;h2 id=&quot;线程的状态&quot;&gt;&lt;a href=&quot;#线程的状态&quot; class=&quot;headerlink&quot; title=&quot;线程的状态&quot;&gt;&lt;/a&gt;线程的状态&lt;/h2&gt;&lt;p&gt;关于Java中线程的生命周期，首先看一下下面这张较为经典的图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/019/232002051747387.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;状态（New）&quot;&gt;&lt;a href=&quot;#状态（New）&quot; class=&quot;headerlink&quot; title=&quot;状态（New）&quot;&gt;&lt;/a&gt;状态（New）&lt;/h3&gt;&lt;p&gt;当线程对象对创建后，即进入了新建状态，如：Thread t = new MyThread()。&lt;/p&gt;
&lt;h3 id=&quot;就绪状态（Runnable）&quot;&gt;&lt;a href=&quot;#就绪状态（Runnable）&quot; class=&quot;headerlink&quot; title=&quot;就绪状态（Runnable）&quot;&gt;&lt;/a&gt;就绪状态（Runnable）&lt;/h3&gt;&lt;p&gt;当调用线程对象的start()方法（t.start();），线程即进入就绪状态。处于就绪状态的线程，只是说明此线程已经做好了准备，随时等待CPU调度执行，并不是说执行了t.start()此线程立即就会执行。&lt;/p&gt;
&lt;h3 id=&quot;运行状态（Running）&quot;&gt;&lt;a href=&quot;#运行状态（Running）&quot; class=&quot;headerlink&quot; title=&quot;运行状态（Running）&quot;&gt;&lt;/a&gt;运行状态（Running）&lt;/h3&gt;&lt;p&gt;当CPU开始调度处于就绪状态的线程时，此时线程才得以真正执行，即进入到运行状态。注：就绪状态是进入到运行状态的唯一入口，也就是说，线程要想进入运行状态执行，首先必须处于就绪状态中。&lt;/p&gt;
&lt;h3 id=&quot;阻塞状态（Blocked）&quot;&gt;&lt;a href=&quot;#阻塞状态（Blocked）&quot; class=&quot;headerlink&quot; title=&quot;阻塞状态（Blocked）&quot;&gt;&lt;/a&gt;阻塞状态（Blocked）&lt;/h3&gt;&lt;p&gt;处于运行状态中的线程由于某种原因，暂时放弃对CPU的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才 有机会再次被CPU调用以进入到运行状态。根据阻塞产生的原因不同，阻塞状态又可以分为三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等待阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行状态中的线程执行wait()方法，使本线程进入到等待阻塞状态；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步阻塞 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他阻塞 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。&lt;/p&gt;
&lt;h3 id=&quot;死亡状态（Dead）&quot;&gt;&lt;a href=&quot;#死亡状态（Dead）&quot; class=&quot;headerlink&quot; title=&quot;死亡状态（Dead）&quot;&gt;&lt;/a&gt;死亡状态（Dead）&lt;/h3&gt;&lt;p&gt;线程执行完了或者因异常退出了run()方法，该线程结束生命周期。&lt;/p&gt;
&lt;h3 id=&quot;线程状态转换&quot;&gt;&lt;a href=&quot;#线程状态转换&quot; class=&quot;headerlink&quot; title=&quot;线程状态转换&quot;&gt;&lt;/a&gt;线程状态转换&lt;/h3&gt;&lt;p&gt;就绪状态转换为运行状态：当此线程得到处理器资源；&lt;/p&gt;
&lt;p&gt;运行状态转换为就绪状态：当此线程主动调用yield()方法或在运行过程中失去处理器资源。&lt;/p&gt;
&lt;p&gt;运行状态转换为死亡状态：当此线程线程执行体执行完毕或发生了异常。&lt;/p&gt;
&lt;p&gt;此处需要特别注意的是：当调用线程的yield()方法时，线程从运行状态转换为就绪状态，但接下来CPU调度就绪状态中的哪个线程具有一定的随机性，因此，可能会出现A线程调用了yield()方法后，接下来CPU仍然调度了A线程的情况。&lt;/p&gt;
&lt;p&gt;由于实际的业务需要，常常会遇到需要在特定时机终止某一线程的运行，使其进入到死亡状态。目前最通用的做法是设置一boolean型的变量，当条件满足时，使线程执行体快速执行完毕。&lt;/p&gt;
&lt;h2 id=&quot;基本线程类&quot;&gt;&lt;a href=&quot;#基本线程类&quot; class=&quot;headerlink&quot; title=&quot;基本线程类&quot;&gt;&lt;/a&gt;基本线程类&lt;/h2&gt;&lt;p&gt;基本线程类指的是Thread类，Runnable接口，Callable接口，其中Thread类实现了Runnable接口。&lt;/p&gt;
&lt;h3 id=&quot;Thread&quot;&gt;&lt;a href=&quot;#Thread&quot; class=&quot;headerlink&quot; title=&quot;Thread&quot;&gt;&lt;/a&gt;Thread&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class MyThread extends Thread &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     	//线程执行体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ThreadTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Thread myThread1 = new MyThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//调用start()方法使得线程进入就绪状态,并不一定立即执行                                                                		myThread1.start();                             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;关于中断&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它并不像stop方法那样会中断一个正在运行的线程。线程会不时地检测中断标识位，以判断线程是否应该被中断（中断标识值是否为true）。终端只会影响到wait状态、sleep状态和join状态。被打断的线程会抛出InterruptedException。&lt;br&gt;Thread.interrupted()检查当前线程是否发生中断，返回boolean&lt;br&gt;synchronized在获锁的过程中是不能被中断的。&lt;/p&gt;
&lt;p&gt;中断是一个状态！interrupt()方法只是将这个状态置为true而已。所以说正常运行的程序不去检测状态，就不会终止，而wait等阻塞方法会去检查并抛出异常。如果在正常运行的程序中添加while(!Thread.interrupted()) ，则同样可以在中断后离开代码体&lt;/p&gt;
&lt;h3 id=&quot;Runnable&quot;&gt;&lt;a href=&quot;#Runnable&quot; class=&quot;headerlink&quot; title=&quot;Runnable&quot;&gt;&lt;/a&gt;Runnable&lt;/h3&gt;&lt;p&gt;实现Runnable接口，并重写该接口的run()方法，该run()方法同样是线程执行体，创建Runnable实现类的实例，并以此实例作为Thread类的target来创建Thread对象，该Thread对象才是真正的线程对象。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class MyRunnable implements Runnable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//线程执行体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ThreadTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	// 创建一个Runnable实现类的对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		Runnable myRunnable = new MyRunnable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		// 将myRunnable作为Thread target创建新的线程                 		Thread thread1 = new Thread(myRunnable); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		// 调用start()方法使得线程进入就绪状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       thread1.start(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Thread类本身也是实现了Runnable接口。若Thread类和Runnable类均实现了run方法，start之后，会优先执行Runnable里面的run方法，而不会走Thread里面的run方法。&lt;/p&gt;
&lt;p&gt;我们看一下Thread类中对Runnable接口中run()方法的实现：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (target != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        target.run(); //target即是传入Thread的Runnable对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在程序开发中只要是多线程肯定永远以实现Runnable接口为主，因为实现Runnable接口相比继承Thread类有如下好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免点继承的局限，一个类可以继承多个接口。&lt;/li&gt;
&lt;li&gt;适合于资源的共享&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以卖票程序为例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static class MyThread extends Thread &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        private int ticket = 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            while (true) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (ticket &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    System.out.println(&amp;quot;卖票：ticket&amp;quot; + this.ticket--);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    System.out.println(&amp;quot;票卖完了&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static class MyRunnable implements Runnable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        private int ticket = 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            while (true) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (ticket &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    System.out.println(&amp;quot;卖票：ticket&amp;quot; + this.ticket--);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    System.out.println(&amp;quot;票卖完了&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String args[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyThread mt1=new MyThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyThread mt2=new MyThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyThread mt3=new MyThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mt1.start();//每个线程都各卖了10张，共卖了30张票&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mt2.start();//但实际只有10张票，每个线程都卖自己的票&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mt3.start();//没有达到资源共享&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyRunnable mr=new MyRunnable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new Thread(mr).start(); //三个线程共享了10张票&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new Thread(mr).start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new Thread(mr).start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Callable&quot;&gt;&lt;a href=&quot;#Callable&quot; class=&quot;headerlink&quot; title=&quot;Callable&quot;&gt;&lt;/a&gt;Callable&lt;/h3&gt;&lt;p&gt;使用Callable和Future接口创建线程。具体是创建Callable接口的实现类，并实现clall()方法。并使用FutureTask类来包装Callable实现类的对象，且以此FutureTask对象作为Thread对象的target来创建线程。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static class MyCallable implements Callable&amp;lt;Integer&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        private int i = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 与run()方法不同的是，call()方法具有返回值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public Integer call() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int sum = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for (; i &amp;lt; 100; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.println(Thread.currentThread().getName() + &amp;quot; &amp;quot; + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sum += i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 创建MyCallable对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Callable&amp;lt;Integer&amp;gt; myCallable = new MyCallable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //使用FutureTask来包装MyCallable对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FutureTask&amp;lt;Integer&amp;gt; ft = new FutureTask&amp;lt;&amp;gt;(myCallable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i = 0; i &amp;lt; 100; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(Thread.currentThread().getName() + &amp;quot; &amp;quot; + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (i == 30) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Thread thread = new Thread(ft);   //FutureTask对象作为Thread对象的target创建新的线程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                thread.start();                   //线程进入到就绪状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;主线程for循环执行完毕..&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int sum = ft.get();            //取得新创建的新线程中的call()方法返回的结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&amp;quot;sum = &amp;quot; + sum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (ExecutionException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先，我们发现，在实现Callable接口中，此时不再是run()方法了，而是call()方法，此call()方法作为线程执行体，同时还具有返回值！在创建新的线程时，是通过FutureTask来包装MyCallable对象，同时作为了Thread对象的target。那么看下FutureTask类的定义：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class FutureTask&amp;lt;V&amp;gt; implements RunnableFuture&amp;lt;V&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     //....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public interface RunnableFuture&amp;lt;V&amp;gt; extends Runnable, Future&amp;lt;V&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     void run();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;于是，我们发现FutureTask类实际上是同时实现了Runnable和Future接口，由此才使得其具有Future和Runnable双重特性。通过Runnable特性，可以作为Thread对象的target，而Future特性，使得其可以取得新创建线程中的call()方法的返回值。&lt;/p&gt;
&lt;p&gt;执行下此程序，我们发现sum = 4950永远都是最后输出的。而“主线程for循环执行完毕..”则很可能是在子线程循环中间输出。由CPU的线程调度机制，我们知道，“主线程for循环执行完毕..”的输出时机是没有任何问题的，那么为什么sum =4950会永远最后输出呢？&lt;/p&gt;
&lt;p&gt;原因在于通过ft.get()方法获取子线程call()方法的返回值时，当子线程此方法还未执行完毕，ft.get()方法会一直阻塞，直到call()方法执行完毕才能取到返回值。&lt;/p&gt;
&lt;p&gt;future模式：并发模式的一种，可以有两种形式，即无阻塞和阻塞，分别是isDone和get。其中Future对象用来存放该线程的返回值以及状态&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ExecutorService e = Executors.newFixedThreadPool(3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; //submit方法有多重参数版本，及支持callable也能够支持runnable接口类型.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Future future = e.submit(new myCallable());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;future.isDone() //return true,false 无阻塞&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;future.get() // return 返回值，阻塞直到该线程运行结束&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述主要讲解了三种常见的线程创建方式，对于线程的启动而言，都是调用线程对象的start()方法，需要特别注意的是：&lt;strong&gt;不能对同一线程对象两次调用start()方法&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;高级线程控制类简介&quot;&gt;&lt;a href=&quot;#高级线程控制类简介&quot; class=&quot;headerlink&quot; title=&quot;高级线程控制类简介&quot;&gt;&lt;/a&gt;高级线程控制类简介&lt;/h2&gt;&lt;p&gt;Java1.5提供了一个非常高效实用的多线程包:java.util.concurrent, 提供了大量高级工具,可以帮助开发者编写高效、易维护、结构清晰的Java多线程程序。&lt;/p&gt;
&lt;h3 id=&quot;ThreadLocal类&quot;&gt;&lt;a href=&quot;#ThreadLocal类&quot; class=&quot;headerlink&quot; title=&quot;ThreadLocal类&quot;&gt;&lt;/a&gt;ThreadLocal类&lt;/h3&gt;&lt;p&gt;用处：保存线程的独立变量。对一个线程类（继承自Thread)&lt;br&gt;当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。常用于用户登录控制，如记录session信息。&lt;/p&gt;
&lt;p&gt;实现：每个Thread都持有一个TreadLocalMap类型的变量（该类是一个轻量级的Map，功能与map一样，区别是桶里放的是entry而不是entry的链表。功能还是一个map。）以本身为key，以目标为value。&lt;br&gt;主要方法是get()和set(T a)，set之后在map里维护一个threadLocal -&amp;gt; a，get时将a返回。ThreadLocal是一个特殊的容器。&lt;/p&gt;
&lt;h3 id=&quot;原子类&quot;&gt;&lt;a href=&quot;#原子类&quot; class=&quot;headerlink&quot; title=&quot;原子类&quot;&gt;&lt;/a&gt;原子类&lt;/h3&gt;&lt;p&gt;如果使用atomic wrapper class如atomicInteger，或者使用自己保证原子的操作，则等同于synchronized&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//返回值为boolean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AtomicInteger.compareAndSet(int expect,int update)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该方法可用于实现乐观锁，考虑文中最初提到的如下场景：a给b付款10元，a扣了10元，b要加10元。此时c给b2元，但是b的加十元代码约为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if(b.value.compareAndSet(old, value))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   return ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //try again&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // if that fails, rollback and log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;AtomicReference&lt;/p&gt;
&lt;p&gt;对于AtomicReference 来讲，也许对象会出现，属性丢失的情况，即oldObject == current，但是oldObject.getPropertyA != current.getPropertyA。&lt;br&gt;这时候，AtomicStampedReference就派上用场了。这也是一个很常用的思路，即加上版本号&lt;/p&gt;
&lt;h3 id=&quot;Lock类&quot;&gt;&lt;a href=&quot;#Lock类&quot; class=&quot;headerlink&quot; title=&quot;Lock类&quot;&gt;&lt;/a&gt;Lock类&lt;/h3&gt;&lt;p&gt;lock: 在java.util.concurrent包内。共有三个实现：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ReentrantLock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReentrantReadWriteLock.ReadLock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReentrantReadWriteLock.WriteLock&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主要目的是和synchronized一样， 两者都是为了解决同步问题，处理资源争端而产生的技术。功能类似但有一些区别。&lt;/p&gt;
&lt;p&gt;lock更灵活，可以自由定义多把锁的枷锁解锁顺序（synchronized要按照先加的后解顺序）&lt;br&gt;提供多种加锁方案，lock 阻塞式, trylock 无阻塞式, lockInterruptily 可打断式， 还有trylock的带超时时间版本。&lt;br&gt;本质上和监视器锁（即synchronized是一样的）&lt;br&gt;能力越大，责任越大，必须控制好加锁和解锁，否则会导致灾难。&lt;br&gt;和Condition类的结合。&lt;/p&gt;
&lt;h3 id=&quot;容器类&quot;&gt;&lt;a href=&quot;#容器类&quot; class=&quot;headerlink&quot; title=&quot;容器类&quot;&gt;&lt;/a&gt;容器类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;BlockingQueue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;阻塞队列。该类是java.util.concurrent包下的重要类，通过对Queue的学习可以得知，这个queue是单向队列，可以在队列头添加元素和在队尾删除或取出元素。类似于一个管　　道，特别适用于先进先出策略的一些应用场景。普通的queue接口主要实现有PriorityQueue（优先队列），有兴趣可以研究&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ConcurrentHashMap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;高效的线程安全哈希map。请对比hashTable , concurrentHashMap, HashMap&lt;/p&gt;
&lt;h3 id=&quot;管理类&quot;&gt;&lt;a href=&quot;#管理类&quot; class=&quot;headerlink&quot; title=&quot;管理类&quot;&gt;&lt;/a&gt;管理类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ThreadPoolExecutor&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/wxd0108/p/5479442.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java中的多线程你只要看这一篇就够了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/lwbqqyumidi/p/3804883.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java总结篇系列：Java多线程（一）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/column/details/concurrency.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java并发编程系列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;多线程可以减轻系统性能方面的瓶颈，提高CPU的处理器的效率，在多线程中，通过优先级管理，可以使重要的程序优先操作，提高了任务管理的灵活性；另一方面，在多CPU系统中，可以把不同的线程在不同的CPU中执行，真正做到同时处理多任务。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://czhzero.com/categories/Java/"/>
    
    
      <category term="多线程" scheme="http://czhzero.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>新年开篇 | 总结一个技术总监的教训和经验</title>
    <link href="http://czhzero.com/2017/01/09/technical-director-experience/"/>
    <id>http://czhzero.com/2017/01/09/technical-director-experience/</id>
    <published>2017-01-09T03:09:03.000Z</published>
    <updated>2017-01-17T15:26:13.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;本文系腾讯Bugly独家内容，转载请在文章开头显眼处注明作者和出处“腾讯Bugly(&lt;a href=&quot;http://bugly.qq.com)”&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bugly.qq.com)”&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;2017年来了，新年开篇，就不跟大家聊技术啦，给大家分享一篇鹅厂技术总监在多年工作中总结出的教训和经验。&lt;/p&gt;
&lt;p&gt;这篇文章自从在腾讯内部论坛发表后，精神哥每年都会拿出来重新研读一番，每次都有新的感悟和收获，所以强烈推荐给大家。&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;资深程序员是团队中最强大的生产力，但往往被不合理的工作安排浪费掉。因此作为一个团队的技术的“头”，必须要有明确清晰的认识，把主要的事务性工作剥离出来，并且放弃大量的管理“权力”，以提高团队开发质量和效率为最主要的目标去安排自己的工作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般来说技术总监其实会被要求做事实上是2个职位的工作：主程、项目经理（技术化）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此必须明确此两个职位的工作任务分割，然后把项目经理的工作，安排给另外一个人做。当然其职称可能同样也得叫“技术总监”或“主程”，总之听起来越牛X越好。而真正的主程（技术总监）则应该投身于尽量多的技术工作中，其中最重要的工作则是开发———生产代码和文档。&lt;/p&gt;
&lt;h2 id=&quot;主程的工作&quot;&gt;&lt;a href=&quot;#主程的工作&quot; class=&quot;headerlink&quot; title=&quot;主程的工作&quot;&gt;&lt;/a&gt;主程的工作&lt;/h2&gt;&lt;h3 id=&quot;一、开发&quot;&gt;&lt;a href=&quot;#一、开发&quot; class=&quot;headerlink&quot; title=&quot;一、开发&quot;&gt;&lt;/a&gt;一、开发&lt;/h3&gt;&lt;p&gt;从来没有一个资深的外科医生会放下手术刀，而转到手术室外面指手画脚。一个资深的程序员也不应该离开代码和文档的编写，而只是做做架构图。作为对一个复杂系统的负责人，必须亲手领导和参与建造，才能有足够的能力去负担起这个责任。因此需要至少使用60%的时间来参与开发的工作，并且建议从一开始上班就开始，虽然早上的效率很低，但是跟任何艰巨工作都一样：万事开头难。&lt;/p&gt;
&lt;p&gt;在你好不容易等待电脑慢吞吞的打开了所有的IDE、需求文档、参考资料、工作计划这堆要命的东西之后，你就迈出了最重要的一步，你会发现你不在需要在网上看微博和聊QQ来提振开始工作的激情，而会被某一个优化代码的灵感而激励，或者被一个复杂而有趣的问题所吸引，从而更快的能投入到开发中。坚持打开电脑做的第一件事是打开IDE软件，是这一切最重要的一步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%281%29&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;开发的工作内容包括：&lt;/p&gt;
&lt;h4 id=&quot;1-提出非功能性需求&quot;&gt;&lt;a href=&quot;#1-提出非功能性需求&quot; class=&quot;headerlink&quot; title=&quot;1.提出非功能性需求&quot;&gt;&lt;/a&gt;1.提出非功能性需求&lt;/h4&gt;&lt;p&gt;一般来说功能需求总是让开发人员焦头烂额的主要原因。但实际上，很多项目死在发布之后，却是因为性能、产品质量、扩展性、二次开发效率等非功能性需求没认真去解决而导致的。&lt;/p&gt;
&lt;p&gt;主程作为经验最丰富的成员，必须要利用自己曾经的经验和教训（在这里教训往往比经验重要），提出那些自己折腾自己的“非功能性需求”，来保障整个项目在发布后不会轰然倒塌。&lt;/p&gt;
&lt;p&gt;这是个吃力不讨好的工作，因为老板和客户往往只会抱怨技术人员在玩弄把戏，骗取更多的资源或者杞人忧天。如何说服这些家伙也许不是主程的工作，但是主程必须要以高度的责任心把问题放到台面上来。沟通的工作也许让项目经理去做会更好，他们有一整套如何威逼利诱老板和客户的戏法。&lt;/p&gt;
&lt;p&gt;非功能性需求中，其中有三类：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;性能需求&lt;/p&gt;
&lt;p&gt;运维需求&lt;/p&gt;
&lt;p&gt;开发效率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;性能需求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最好的性能需求实际上所有没有需求，因为性能优化往往错的。特别是有一定经验的开发人员，更容易产生“执念”。经验不是特别丰富，而又热爱学习的开发者，往往对很多网上的所谓文章、经验没有太多的识别能力，又缺乏动手实际测试的机会，所以道听途说先入为主的观念也是非常多的。这些观念里面最多的就是关于性能的，先不论所谓优化性能的各种说法，就是推荐各种高性能框架、库的文章也很多。这个时候，拨开纷繁的信息迷雾的人，就只能靠主程了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运维需求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运维需求的目标是尽量自动化，这里除了最基本的批量启动、停止、重载静态数据（配置）外，还应该包括自动读取本地IP地址，以及自动下载配置文件来启动；等待所有用户退出后才停止的“安全退出”；自动检查进程停止后重启等等功能。&lt;/p&gt;
&lt;p&gt;但是运维的工具也要避免过度设计。很多人往往一想到搞运维工具，就想搞一个功能非常大而全，具备漂亮的WEB界面的大平台。实际上真正救命的往往是一些自动化的小型工具，只有这些小工具和小功能都齐备了，耐心额漂亮界面的平台系统真正有意义。所以这主要依赖于经验，但也需要有想象力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发效率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发效率的需求一般都在代码结构上，而这是最容易产生争吵的地方。实际上所谓的代码结构，是对业务领域抽象的一种表现形式，所以对业务领域的理解能力和经验是第一位的。如何抽象好业务领域的模型，不能照搬别人的经验，但也不能完全靠自己想象。需要自己对业务领域做深入思考，同时也多学习了解其他项目的模型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%282%29&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一般来说，比较底层的技术模型，作为开发人员，都是非常熟悉的。比如UNIX系统把所有东西都抽象成文件。而大量的开源项目，作为通用的技术产品，对于比较技术层面的抽象，也都非常优秀。但是，作为业务逻辑开发人员，是绝对不应该被这些模型所困住的，因为我们要解决的问题，并不是去写一个操作系统，或者某个开源框架，而是具体的某一个领域的问题。只有真正深入的去了解业务领域，才能很好的抽象业务领域的模型。&lt;/p&gt;
&lt;p&gt;也就是说，如果你是开发游戏的，就要深入的理解游戏产品的概念；如果你是开发电商产品的，就要对商业贸易有深入理解，否则是不配作这些产品的开发领导人的。我们有一些技术人员，并不愿意去深入业务领域做理解，而是希望把所有的业务问题，都抽象成他自己最拿手的某一种技术模型，这样反而是会严重影响开发效率的。&lt;/p&gt;
&lt;p&gt;比如说有的人，喜欢把所有的业务逻辑，都看成是一种“输入数据结构”和“输出数据结构”的处理管道，不管写什么程序，都是同样一套类似的代码结构，就是“读输入-解包-处理-写输出”。尽管这样一定可以完成所有的需求，但是其代码结构并不能应对真正的需求变化，开发效率也一定是低的。真正的主程，就是应该在这个时候，挺身而出提出自己的抽象模型，从而带动整个团队，提高开发效率，同时也做好应对需求变化的准备。&lt;/p&gt;
&lt;h4 id=&quot;2-设计和修正软件架构&quot;&gt;&lt;a href=&quot;#2-设计和修正软件架构&quot; class=&quot;headerlink&quot; title=&quot;2. 设计和修正软件架构&quot;&gt;&lt;/a&gt;2. 设计和修正软件架构&lt;/h4&gt;&lt;p&gt;软件架构设计至关重要，而且工作繁重。不画图纸就敢开工的技术人员要么是天才要么是笨蛋。对于团队来说，架构在分工合作、避免风险、提高质量等多个方面有无可替代的作用。&lt;/p&gt;
&lt;p&gt;架构要避免成为空洞的文档，最重要的一步是有人来掌控和实施。而主程主持设计和修正的架构，并且亲手实施，让团队中的腹诽之徒完全无法避开，否则代码将无法运行！所谓设计和修正架构，并不意味所有的文档应该一个人写，而是指这个架构的每个环节，都是经过主程决策同意的。当然最好这些文档能尽量由他撰写，对于“菜鸟”团队来说，输出这种文档本身就意味着“权势”，有助于主程建立个人威信——这种看起来有点肮脏的“政治”东西，在避免团队内无止境的扯皮，以及稳定那些随时准备跳槽的成员来说，都是相当实用的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%283%29&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;很多软件架构只有运行时架构，没有代码架构，这是非常可惜的。&lt;/strong&gt; 诚然，我们要关注系统的运行效率，运行时架构（进程结构图）是必不可少的。然而，代码架构是更加稳定的设计方案，因为在必定会发生的需求变更下，进程结构往往也会因此变化。代码的结构是对需求的抽象和描述，这种描述是对业务需求的理解，业务需求小的变化非常多，而大的方向却往往不会变化很频繁，因此如果能基于这些大的方向来组织代码，划分模块，那些繁复的小需求，仅仅是对系统局部的修改，而不会影响过多的其他部分；反之，如果我们没有整体的视野去组织代码和模块，仅仅从一开始的细节需求去组织进程代码，一定会因为需求变化而把整个系统改的乱七八糟。&lt;/p&gt;
&lt;p&gt;所以，作为主程或技术总监，把控代码结构，往往比把控进程结构更为重要。同样的代码可以组织到不同的进程内来启动，如果进程结构不适应性能需求，还是可以优化的。但反过来就行不通了，一个混乱的代码结构，不管你怎么去用进程结构调整，还是会问题百出。&lt;/p&gt;
&lt;h4 id=&quot;3-难点代码（关键需求）的开发&quot;&gt;&lt;a href=&quot;#3-难点代码（关键需求）的开发&quot; class=&quot;headerlink&quot; title=&quot;3.难点代码（关键需求）的开发&quot;&gt;&lt;/a&gt;3.难点代码（关键需求）的开发&lt;/h4&gt;&lt;p&gt;主程必须写代码，写那些大家都认为风险大的代码。&lt;/p&gt;
&lt;p&gt;有的系统对于性能要求很高，他就必须去完成容易出性能问题的部分。比如IO操作或者设计数据库索引。有些系统的需求非常飘忽，他就要去想办法完成框架代码或者脚本引擎，以便众多小弟可以跟着产品人员疲于奔命。这种工作内容会让主程不必完全的读过所有代码，而能牢牢的“掌握”代码，以免团队成员甩耙子的时候能充当备胎。因为融入团队的代码开发，也是一个让架构设计从日常工作中真正控制系统的工作。而且主程代码通常会被别人接触，能直接教育其他团队成员，同时也能建立——威信。&lt;/p&gt;
&lt;p&gt;在大公司中，由于团队成员普遍素质比较高，所以都这部分的需求会比较少。但是还是有一些部分的代码，应该亲自操刀。如果不能对最核心的实现模块下手，起码也应该对客户使用界面有一定的编码经验。&lt;/p&gt;
&lt;p&gt;比如游戏开发中，某个比较复杂的业务逻辑脚本；在发行的产品或库中，编写针对用户演示用的DEMO等等……。究其原因，是因为客户是最重要的，而领导者起码应该直接参与面对客户的部分。店长不迎宾，厂长不进车间，事情是绝对做不好的。&lt;/p&gt;
&lt;p&gt;而中小型公司里面，如果编码工作还是放给别人做，到头来还是给自己找麻烦。因为小型公司人力本来就紧张，而质量低下的代码，造成的故障和BUG，会更加消耗不多的时间成本。自己做的越多，项目成功的几率就会越大。&lt;/p&gt;
&lt;h4 id=&quot;4-救火和杀虫&quot;&gt;&lt;a href=&quot;#4-救火和杀虫&quot; class=&quot;headerlink&quot; title=&quot;4.救火和杀虫&quot;&gt;&lt;/a&gt;4.救火和杀虫&lt;/h4&gt;&lt;p&gt;这个工作其实和代码开发是一致的，如果没有平日的开发，通常紧急问题的解决也是比较难处理的。但是这个也有一个调试技巧的要求，比如要求会使用各种诊断工具。这些工具一般的开发人员可能会比较少使用。找问题的过程本身也可以提高团队其他人的技术水平。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%284%29&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;二、培训&quot;&gt;&lt;a href=&quot;#二、培训&quot; class=&quot;headerlink&quot; title=&quot;二、培训&quot;&gt;&lt;/a&gt;二、培训&lt;/h3&gt;&lt;p&gt;培训的工作应该占用30%左右的工作时间。培训是稳定团队人员最重要的手段。也是提高团队开发效率最有效的手段。工具、过程、制度、奖惩，这些都代替不了程序员一行行的去写代码，最直接的方法是让他们做的更快更好，这些需要经验和知识的积累。&lt;/p&gt;
&lt;h4 id=&quot;1-代码审查&quot;&gt;&lt;a href=&quot;#1-代码审查&quot; class=&quot;headerlink&quot; title=&quot;1.代码审查&quot;&gt;&lt;/a&gt;1.代码审查&lt;/h4&gt;&lt;p&gt;关于代码审查，有太多的论述。但是代码审查还是一种“强迫”推行某种风格或者技巧的手段，这是最真实的“控制”系统的手段。也是推广知识和经验最直接的手段。一个人写的代码通常应对的问题不会特别“广泛”，因此只要审查其中一部分代码，就能给大部分别的代码带来好处。&lt;/p&gt;
&lt;p&gt;代码审查的实施，应该有一定的基础。需要代码作者进行问题描述、代码结构的讲解。而且也需要作者自己来挑选重点代码段。主程序员应该指出自己关心的重点代码应该符合什么特征。&lt;/p&gt;
&lt;h4 id=&quot;2-技术方案评审&quot;&gt;&lt;a href=&quot;#2-技术方案评审&quot; class=&quot;headerlink&quot; title=&quot;2.技术方案评审&quot;&gt;&lt;/a&gt;2.技术方案评审&lt;/h4&gt;&lt;p&gt;什么事情应该写一个技术方案，然后进行评审，这是一个关键的问题。一般认为开发时间在2周以上的单项工作应该先做个方案。往往技术方案是系统架构的完善和补充，或者是挑战。所以主程的参与是非常必要的。但是要注意不需要去做的太琐碎，而是要提炼出“关键”的需求和“关键”的解决方案进行评审，而这些“关键”往往不是功能，而是质量上的需求，如这个系统的扩展性，是否能方便后续开发等等。也有可能在这些会议上会发生争吵，但是决策人是主程的地位是不容动摇的。君子和而不同，每个程序员都可以拥有自己的看法，但是代码必须能按方案运行起来，主程必须经常申明这点。&lt;/p&gt;
&lt;p&gt;技术方案在差距较大的团队中评审，一般来说可以视为一种培训；而在水平相当的团队中评审，可能会变成各自想法的争执。不同的项目经历，绝对会造成意见的大分歧。其实这就是所谓“非功能需求”没有被明确出来造成的。这个时候主程就应该履行自己的义务，去提炼争论中的“非功能需求”，然后做出决断。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%285%29&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-学习与讲座&quot;&gt;&lt;a href=&quot;#3-学习与讲座&quot; class=&quot;headerlink&quot; title=&quot;3.学习与讲座&quot;&gt;&lt;/a&gt;3.学习与讲座&lt;/h4&gt;&lt;p&gt;如果团队碰到问题，没有新的方法和技术去解决，是不会提高开发效率的。就好像你用牛来耕地，不管用什么管理方法，都不会赶上机械化的速度。而主程承担着不断突破自己的技术上限，介绍和推动团队使用更新的技术来解决问题的责任。抱残守缺，思想僵化，最后会被团队成员所抛弃，而且也会让团队的效能落后于业界，最后直接影响产品的生死。每年学一门新语言，这个说法可能有点激进，但是这也是作为程序员应该有的激情。&lt;/p&gt;
&lt;h3 id=&quot;三、管理&quot;&gt;&lt;a href=&quot;#三、管理&quot; class=&quot;headerlink&quot; title=&quot;三、管理&quot;&gt;&lt;/a&gt;三、管理&lt;/h3&gt;&lt;p&gt;管理等于权势？管理等于沟通？管理等于文山会海？多年专业训练出来的技术人员如何去做管理？&lt;/p&gt;
&lt;p&gt;管理的目标是提高绩效，如果和这个目标无关，而只是和“管理者”这个头衔有关的事情，最好丢给别人去做，包括那个头衔。管理主要手段是创新：想出新的方法去解决问题，而不是繁杂的事务性工作！——一个专业秘书能比主程做的好一百倍。技术工作的创新，最主要还是在技术工作里面，而不是跳出来说：做这个，做那个。&lt;/p&gt;
&lt;p&gt;管理的事情如果超过10%的工作时间，等于说你更像一个项目经理而非主程。&lt;/p&gt;
&lt;h4 id=&quot;1-绩效评定&quot;&gt;&lt;a href=&quot;#1-绩效评定&quot; class=&quot;headerlink&quot; title=&quot;1.绩效评定&quot;&gt;&lt;/a&gt;1.绩效评定&lt;/h4&gt;&lt;p&gt;以专业的意见来衡量别人的工作，这个负担是无人能够承担的。这个工作往往是利益分配的一种手段。类似奖惩手段。这种管理方法已经不是新事物了。但是实际上技术人员对于绩效往往持一定保留和暧昧的态度，因为这种事情难以很清晰的界定出来。需要判断而非量度，才是绩效的真正手段。如果一定要打分，一共两项足够了：进度、质量，5分制即可。更重要的事情是，告诉每个人主程的看法，告诉别人，怎样做才是更好。或者告诉团队，怎样做才更有利于我们成功（发财、上市、赢得老板和客户……）——把目标清晰告诉团队，发挥他们的主动性，是绩效评定最重要的目标。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%286%29&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;KPI是一个争论非常多的话题，技术人员的KPI的争议更多。&lt;/p&gt;
&lt;p&gt;关于KPI，有几个观点是必须明确的：&lt;/p&gt;
&lt;p&gt;难以量化的东西，就不要强行量化；&lt;br&gt;KPI应该以任务是否有去做完为标志，而不是做到的效果为标志；&lt;br&gt;分解和设计KPI是一个非常需要承担风险的工作，基本上等于提出实际的工作方案。&lt;br&gt;以上三点，是互为结合的。技术工作的质量很难量化，或者指导性不强，还不如以工作的数量为标准，指导性反而更强。&lt;/p&gt;
&lt;p&gt;那么要怎么设置这些工作任务的数量呢？&lt;/p&gt;
&lt;p&gt;应该去设计一些能“保证质量”的工作任务，作为必须要完成的工作数量。那么，问题就更进一步了，要设置些什么样的工作，才能作为指标？这就需要技术总监根据自己的经验和智慧，提出切实可行的方案去要求下属完成，而不是把需求简单的分切后丢给下属去自行了断。&lt;/p&gt;
&lt;p&gt;举个例子，有一个部门的业务逻辑开发任务很重，由于需求多变化快，代码质量难以监督，所以各种性能和逻辑故障都层出不穷。如果你只是设置了BUG的数量和需求完成数量作为指标，靠这种KPI是难以推动真正的改进的。反过来，如果你对需求实现模块，设置了必须要完成的单元测试任务指标，设置了运行质量监控系统的开发指标。如果部门完成了这些事情，项目的质量和进度自然就会有提高。——但是这些措施是否真的能奏效，这就是作为技术总监必须自己承担的决策风险。&lt;/p&gt;
&lt;h4 id=&quot;2-需求评定&quot;&gt;&lt;a href=&quot;#2-需求评定&quot; class=&quot;headerlink&quot; title=&quot;2.需求评定&quot;&gt;&lt;/a&gt;2.需求评定&lt;/h4&gt;&lt;p&gt;最让技术人员头疼的可能就是和客户谈判。这个事情实际上不应该让技术人员来伤心，有项目经理就可以了。而需求评定更多的是可行性的讨论。主程如果参加每个需求评定，他要三头六臂也搞不定，正确的做法应该是具体开发的团队人员参加，而主程在开会前给与自己的意见，或者会后听取参与者的总结。——这是了解别人做什么事的一个重要手段，但无需陷入太深，因为还有代码评审和项目经理的帮忙。&lt;/p&gt;
&lt;h4 id=&quot;3-跨部门沟通&quot;&gt;&lt;a href=&quot;#3-跨部门沟通&quot; class=&quot;headerlink&quot; title=&quot;3.跨部门沟通&quot;&gt;&lt;/a&gt;3.跨部门沟通&lt;/h4&gt;&lt;p&gt;实在没必要参加，能躲就躲，这是扯皮的天堂。让项目经理去吧，他们的专业技巧能让这些事情更加有效。只要回来后让项目经理告诉你发生了什么事情就可以了。&lt;/p&gt;
&lt;h4 id=&quot;4-进度审核和任务分派&quot;&gt;&lt;a href=&quot;#4-进度审核和任务分派&quot; class=&quot;headerlink&quot; title=&quot;4.进度审核和任务分派&quot;&gt;&lt;/a&gt;4.进度审核和任务分派&lt;/h4&gt;&lt;p&gt;又是一个很有“权势”的工作，实际上团队成员的情况大家都知道，决定谁应该做什么事情并非需要很多时间去想的事情。所以大可以把方向性的意见告诉项目经理，让他去做。很多优秀的开发者玩EXCELPROJECT之类的水平还不如只有一年工作经验的秘书，别折腾自己了。&lt;/p&gt;
&lt;h4 id=&quot;5-面试&quot;&gt;&lt;a href=&quot;#5-面试&quot; class=&quot;headerlink&quot; title=&quot;5.面试&quot;&gt;&lt;/a&gt;5.面试&lt;/h4&gt;&lt;p&gt;如果真想帮忙，准备一份有区分度的笔试题目吧。不靠谱的人太多，老板可不是花钱请你和他们聊天的。让项目经理去聊，不用担心他们技术不强，再不够，也会比大多数面试者要牛X。他们搞不定的人，就是应该雇佣的家伙。毕业生招聘怎么办？只要看看他们课外活动是不是有搞些专业的事情就可以了，上进心比别的东西都重要，HR会比主程看的更准，相信我。&lt;/p&gt;
&lt;h4 id=&quot;6-各种会议&quot;&gt;&lt;a href=&quot;#6-各种会议&quot; class=&quot;headerlink&quot; title=&quot;6.各种会议&quot;&gt;&lt;/a&gt;6.各种会议&lt;/h4&gt;&lt;p&gt;饭无好饭，会无好会，超过6个人的会议应该坚决抵制。如果你有一个程序等着你去写，你一定无比痛恨这些会议，顺应你的内心吧！上帝保佑你。&lt;/p&gt;
&lt;h2 id=&quot;最后说说项目经理的工作&quot;&gt;&lt;a href=&quot;#最后说说项目经理的工作&quot; class=&quot;headerlink&quot; title=&quot;最后说说项目经理的工作&quot;&gt;&lt;/a&gt;最后说说项目经理的工作&lt;/h2&gt;&lt;p&gt;项目经理就像下水道的清洁工，所有那些主程不愿意去做的事情，他们都弯下腰去认真的把玩，实在是太伟大了。既然如此，为何不让他们拥有更好一点的头衔呢？如果没有他们去处理这些工作，任何一个主程都会被逼疯掉，或者他们自己变成了项目经理，让团队损失了最强力的一台代码发动机。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%287%29&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在一些公司，有专门的项目经理的岗位，这无疑是幸福的，但也是不幸的。因为项目经理本身是一种既需要专业性，也需要通用技能的岗位。项目经理由于专业定义不清晰，导致了大量的误解，这就是不幸的原因。有的团队会说我们不需要项目经理，又有的团队会认为项目经理无比重要，这两种观点的争论一直没有平息过。因此比较实际的做法是，不要轻易的去评价“是否需要项目经理”，而是努力把工作细分，专业化，然后再看应该安排谁去做。不同的项目和不同的团队，也许项目经理的工作都是不同的。&lt;/p&gt;
&lt;p&gt;根据经验，项目经理大概的工作内容方向包含以下这些：&lt;/p&gt;
&lt;h3 id=&quot;一、进度&quot;&gt;&lt;a href=&quot;#一、进度&quot; class=&quot;headerlink&quot; title=&quot;一、进度&quot;&gt;&lt;/a&gt;一、进度&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;指定工作计划&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进度检查和进度延迟的预警&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作总结和统计&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;二、资源&quot;&gt;&lt;a href=&quot;#二、资源&quot; class=&quot;headerlink&quot; title=&quot;二、资源&quot;&gt;&lt;/a&gt;二、资源&lt;/h3&gt;&lt;p&gt;整合提供各种资源，如找DBA，IT，运维人员，硬件，SVN权限，测试环境，福利，周末的活动……&lt;br&gt;面试：人员是最重要的资源，不是吗？&lt;br&gt;资源谈判：往往是和老板谈判，让别人明白现在的真实情况。又一个吃力不讨好的差事，但是总需要人做。&lt;/p&gt;
&lt;h3 id=&quot;三、沟通&quot;&gt;&lt;a href=&quot;#三、沟通&quot; class=&quot;headerlink&quot; title=&quot;三、沟通&quot;&gt;&lt;/a&gt;三、沟通&lt;/h3&gt;&lt;p&gt;需求评审：和需求方讨价还价，项目经理真是命苦啊……&lt;br&gt;组织会议或者用其他方式通知信息给所有人：小喇叭、大喇叭、全服广播、世界频道……&lt;br&gt;总结&lt;/p&gt;
&lt;p&gt;对于一个小型公司，职权，头衔，收益，往往会更加敏感。但是这些都不是让项目失败的理由。一颗叫程序员的种子说：长大了我就是叫管理者的树。这个错误的观念只会让这个种子永远无法发芽。软件开发是类似外科医生的行业，而不是血汗工厂，所以不需要手持皮鞭的经理，而需要仁心仁术的神医。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="文摘随笔" scheme="http://czhzero.com/categories/%E6%96%87%E6%91%98%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="技术总监的工作" scheme="http://czhzero.com/tags/%E6%8A%80%E6%9C%AF%E6%80%BB%E7%9B%91%E7%9A%84%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Git 基础命令操作指引</title>
    <link href="http://czhzero.com/2016/12/26/git-basic-kill/"/>
    <id>http://czhzero.com/2016/12/26/git-basic-kill/</id>
    <published>2016-12-26T12:05:34.000Z</published>
    <updated>2017-01-17T15:22:10.000Z</updated>
    
    <content type="html">&lt;p&gt;Git是一个分布式版本管理系统，是为了更好地管理Linux内核开发而创立的。Git与Svn相比，不光有远程代码库，也有本地代码库，方便多人协作。&lt;/p&gt;
&lt;p&gt;另外，Git中分支的活用，也极大的方便了开发人员开发过程中的多版本同时开发。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/016/Git-start3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Git-初始化项目&quot;&gt;&lt;a href=&quot;#Git-初始化项目&quot; class=&quot;headerlink&quot; title=&quot;Git 初始化项目&quot;&gt;&lt;/a&gt;Git 初始化项目&lt;/h1&gt;&lt;h2 id=&quot;Create-a-new-repository&quot;&gt;&lt;a href=&quot;#Create-a-new-repository&quot; class=&quot;headerlink&quot; title=&quot;Create a new repository&quot;&gt;&lt;/a&gt;Create a new repository&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone git@*******/test.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;quot;add README&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push -u origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Existing-folder-or-Git-repository&quot;&gt;&lt;a href=&quot;#Existing-folder-or-Git-repository&quot; class=&quot;headerlink&quot; title=&quot;Existing folder or Git repository&quot;&gt;&lt;/a&gt;Existing folder or Git repository&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd existing_folder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin git@@*******/test.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Git-参数配置&quot;&gt;&lt;a href=&quot;#Git-参数配置&quot; class=&quot;headerlink&quot; title=&quot;Git 参数配置&quot;&gt;&lt;/a&gt;Git 参数配置&lt;/h1&gt;&lt;h2 id=&quot;config-配置文件位置&quot;&gt;&lt;a href=&quot;#config-配置文件位置&quot; class=&quot;headerlink&quot; title=&quot;config 配置文件位置&quot;&gt;&lt;/a&gt;config 配置文件位置&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;All User : /etc/gitconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Current User : ~/.gitconfig&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;config-查看所有配置信息&quot;&gt;&lt;a href=&quot;#config-查看所有配置信息&quot; class=&quot;headerlink&quot; title=&quot;config 查看所有配置信息&quot;&gt;&lt;/a&gt;config 查看所有配置信息&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;config-设置基本用户信息&quot;&gt;&lt;a href=&quot;#config-设置基本用户信息&quot; class=&quot;headerlink&quot; title=&quot;config 设置基本用户信息&quot;&gt;&lt;/a&gt;config 设置基本用户信息&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &amp;quot;xxxx@163.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;增加 &lt;code&gt;--global&lt;/code&gt; 表示该设置对当前系统登录用户生效，配置完成后，可以在&lt;code&gt;~/.gitconfig&lt;/code&gt;中查看结果。否则，表示只对当前git项目生效，在项目的&lt;code&gt;.git/config&lt;/code&gt;中查看结果。&lt;/p&gt;
&lt;h2 id=&quot;config-设置命令别名&quot;&gt;&lt;a href=&quot;#config-设置命令别名&quot; class=&quot;headerlink&quot; title=&quot;config 设置命令别名&quot;&gt;&lt;/a&gt;config 设置命令别名&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global alias.co checkout      //git co 代替 git checkout 命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global alias.ci commit	     //git ci 代替 git commit 命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global alias.br branch        //git br 代替 git branch 命令&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;别名设置除了可以设置单个命令的缩写外，还可以结合options进行设置。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//git unstage 代替 git reset HEAD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global alias.unstage &amp;apos;reset HEAD&amp;apos;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//git last 代替 git log -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global alias.last &amp;apos;log -1&amp;apos; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//git lg 代替 复杂的git log效果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global alias.lg &amp;quot;log --color --graph --pretty=format:&amp;apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;apos; --abbrev-commit&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;别名配置好了之后，如果通过&lt;code&gt;vi ~/.gitconfig&lt;/code&gt; 查看结果如下，修改配置文件，则可以修改别名设置效果。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[user]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = 你的姓名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        email = 你的邮箱&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[alias]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      st = status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ci = commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      br = branch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      co = checkout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      df = diff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      cp = cherry-pick&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      rb = &amp;quot;rebase -i HEAD~10&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      lg = &amp;quot;log --color --graph --pretty=format:&amp;apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;apos; --abbrev-commit&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Git-基础命令&quot;&gt;&lt;a href=&quot;#Git-基础命令&quot; class=&quot;headerlink&quot; title=&quot;Git 基础命令&quot;&gt;&lt;/a&gt;Git 基础命令&lt;/h1&gt;&lt;h2 id=&quot;git-status&quot;&gt;&lt;a href=&quot;#git-status&quot; class=&quot;headerlink&quot; title=&quot;git status&quot;&gt;&lt;/a&gt;git status&lt;/h2&gt;&lt;p&gt;查看git仓库文件状态, git文件状态如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/016/Git-start6.png&quot; alt=&quot;git文件状态&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;unstaged - git仓库中没有此文件的相关记录 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;modified - git仓库中有这个文件的记录，且此文件当前有改动 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;staged - 变更的文件被暂存,没有提交到仓库 (git add命令之后)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commited - 文件被提交到本地git仓库 (git commit之后)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-log&quot;&gt;&lt;a href=&quot;#git-log&quot; class=&quot;headerlink&quot; title=&quot;git log&quot;&gt;&lt;/a&gt;git log&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git log             #查看历史commit记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git log -1          #查看最近一个commit记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-add&quot;&gt;&lt;a href=&quot;#git-add&quot; class=&quot;headerlink&quot; title=&quot;git add&quot;&gt;&lt;/a&gt;git add&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add file/fileDir         #modified或unstaged的文件转换为staged状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add -A/--all             #modified或unstaged的所有文件转换为staged状态&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-rm&quot;&gt;&lt;a href=&quot;#git-rm&quot; class=&quot;headerlink&quot; title=&quot;git rm&quot;&gt;&lt;/a&gt;git rm&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git rm test.java             #从git仓库删除test.java文件，同时删除本地文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git rm  --cache test.java    #从git仓库删除test.java文件，不删除本地文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-commit&quot;&gt;&lt;a href=&quot;#git-commit&quot; class=&quot;headerlink&quot; title=&quot;git commit&quot;&gt;&lt;/a&gt;git commit&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;quot;xxx comment&amp;quot;    #staged状态转换为commited状态&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-diff&quot;&gt;&lt;a href=&quot;#git-diff&quot; class=&quot;headerlink&quot; title=&quot;git diff&quot;&gt;&lt;/a&gt;git diff&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git diff                     #查看本次修改的所有文件的改动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git diff file-path           #查看本次修改的指定文件有哪些改动&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-pull&quot;&gt;&lt;a href=&quot;#git-pull&quot; class=&quot;headerlink&quot; title=&quot;git pull&quot;&gt;&lt;/a&gt;git pull&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git pull [remote-name branch-name]  #获取远程服务器数据,并同时与本地数据合并(可能会出现冲突)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-fetch&quot;&gt;&lt;a href=&quot;#git-fetch&quot; class=&quot;headerlink&quot; title=&quot;git fetch&quot;&gt;&lt;/a&gt;git fetch&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git fetch [remote-name]     #(获取仓库的所有更新，但是不自动合并当前分支)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git fetch -p                #(获取仓库的所有更新，且自动删除不需要的分支，更新最新的分支下来)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-push&quot;&gt;&lt;a href=&quot;#git-push&quot; class=&quot;headerlink&quot; title=&quot;git push&quot;&gt;&lt;/a&gt;git push&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push [remote-name branch-name]         #上传数据到远程分支，若出现冲突，则上传失败。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push --force [remote-name branch-name] #强制上传数据到远程分支**，(覆盖远程数据，慎用)**&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-stash&quot;&gt;&lt;a href=&quot;#git-stash&quot; class=&quot;headerlink&quot; title=&quot;git stash&quot;&gt;&lt;/a&gt;git stash&lt;/h2&gt;&lt;p&gt;可用来暂存当前正在进行的工作，比commit简单，而且可以跨分支合并&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git stash                    #暂存更改的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash save &amp;quot;comment&amp;quot;     #暂存更改的内容,带注释&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash list               #显示所有暂存的内容 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git show stash@&amp;#123;0&amp;#125;           #显示指定stash的更改内容，类似于git diff &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash apply stash@&amp;#123;1&amp;#125;    #应用指定编号的stash, 但不从stash-list中清除&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash pop                #应用栈顶的stash,并从stash-list清除该记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash clear              #清除stash-list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash --help             #获取更多的信息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-tag&quot;&gt;&lt;a href=&quot;#git-tag&quot; class=&quot;headerlink&quot; title=&quot;git tag&quot;&gt;&lt;/a&gt;git tag&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git tag v1.01								        #增加新的tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git tag -a v1.01 -m &amp;quot;Relase version 1.01&amp;quot;    #增加新的tag -a 表示标签名称 -m 表示标签注释                      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git tag [-l]                                 # 查看所有标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin -tags                        # 推送tag到远程分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git tag -d v1.01	                            # 删除本地标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin :refs/tags/v1.01             # 删除远程标签&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;tag建立好了后，可以当做 commit-id使用，git reset的时候直接调到tag。&lt;/p&gt;
&lt;h1 id=&quot;Git-分支&quot;&gt;&lt;a href=&quot;#Git-分支&quot; class=&quot;headerlink&quot; title=&quot;Git 分支&quot;&gt;&lt;/a&gt;Git 分支&lt;/h1&gt;&lt;h2 id=&quot;git-branch&quot;&gt;&lt;a href=&quot;#git-branch&quot; class=&quot;headerlink&quot; title=&quot;git branch&quot;&gt;&lt;/a&gt;git branch&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git branch                  #查看本地分支列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch branch-name      #创建新分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -r               #查看远程分支列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -a               #查看所有分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -d branch-name   #删除指定分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -D branch-name   #强制删除指定分支&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-checkout&quot;&gt;&lt;a href=&quot;#git-checkout&quot; class=&quot;headerlink&quot; title=&quot;git checkout&quot;&gt;&lt;/a&gt;git checkout&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout branch-name                         #切换到指定分支 (切换前记得先commit或者stash)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b new-branch-name                  #基于当前分支创建一个新分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b branch-name origin/branch-name   #获取远程分支到本地 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout file-name                           #获取远程最新文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -- .                                #放弃本地所有的modify文件改动&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;add-remote-branch&quot;&gt;&lt;a href=&quot;#add-remote-branch&quot; class=&quot;headerlink&quot; title=&quot;add remote branch&quot;&gt;&lt;/a&gt;add remote branch&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.git checkout branch-name              #切换到要上传的分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.git remote add origin branch-name     #添加远程分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.git push origin branch-name            #推送数据到远程分支 (自动创建分支，step2可省去)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;delete-remote-branch&quot;&gt;&lt;a href=&quot;#delete-remote-branch&quot; class=&quot;headerlink&quot; title=&quot;delete remote branch&quot;&gt;&lt;/a&gt;delete remote branch&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push origin :remote-branch         #删除指定远程分支&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Git-分支合并&quot;&gt;&lt;a href=&quot;#Git-分支合并&quot; class=&quot;headerlink&quot; title=&quot;Git 分支合并&quot;&gt;&lt;/a&gt;Git 分支合并&lt;/h1&gt;&lt;h2 id=&quot;git-merge&quot;&gt;&lt;a href=&quot;#git-merge&quot; class=&quot;headerlink&quot; title=&quot;git merge&quot;&gt;&lt;/a&gt;git merge&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. git merge branch-name                 #合并指定分支内容到当前分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. git add -A                            #手动解决冲突后,重新暂存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. git commit -m &amp;quot;xxx 解决冲突&amp;quot;           #再次提交&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有些情况下我们需要优先选择使用 &lt;code&gt;git merge --squash branch-name&lt;/code&gt;&lt;br&gt;–squash选项的含义是：本地文件内容与不使用该选项的合并结果相同，&lt;br&gt;但是不提交、不移动HEAD，因此需要一条额外的commit命令。&lt;br&gt;其效果相当于将another分支上的多个commit合并成一个，放在当前分支上，原来的commit历史则没有拿过来。&lt;br&gt;判断是否使用–squash选项最根本的标准是，待合并分支上的历史是否有意义。&lt;br&gt;如果在开发分支上提交非常随意，甚至写成微博体，那么一定要使用–squash选项。&lt;/p&gt;
&lt;h2 id=&quot;git-rebase&quot;&gt;&lt;a href=&quot;#git-rebase&quot; class=&quot;headerlink&quot; title=&quot;git rebase&quot;&gt;&lt;/a&gt;git rebase&lt;/h2&gt;&lt;p&gt;使用rebase合并代码可以使提交的历史记录显得更简洁&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. git rebase target-branch-name         #合并目标分支内容到当前所在分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. git add -A                            #手动解决冲突后, 重新暂存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. git rebase -- abort                   #放弃rebase操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. git rebase -- continue                #解决冲突后，继续rebase操作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;暂时取消刚才的合并 (只能回退一个合并的commit)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard HEAD~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-cherry-pick&quot;&gt;&lt;a href=&quot;#git-cherry-pick&quot; class=&quot;headerlink&quot; title=&quot;git cherry-pick&quot;&gt;&lt;/a&gt;git cherry-pick&lt;/h2&gt;&lt;p&gt;挑选指定的commit-id,一个一个合并，合并速度慢了点，但是合并效果最好。 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. git cherry-pick commit-id         #合并指定commit到当前分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. git add -A                        #手动解决冲突后, 重新暂存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. git cherry-pick -- continue       #继续刚才的pick操作，这一步容易忘记&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. git cherry-pick -- abort          #放弃cherry-pick操作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;解决自动合并失败的冲突&quot;&gt;&lt;a href=&quot;#解决自动合并失败的冲突&quot; class=&quot;headerlink&quot; title=&quot;解决自动合并失败的冲突&quot;&gt;&lt;/a&gt;解决自动合并失败的冲突&lt;/h2&gt;&lt;p&gt;由于在同一行进行了修改，合并时候，产生了冲突。内容格式如下显示，然后根据实际需要解决冲突。&lt;/p&gt;
&lt;p&gt;冲突解决完成后，先使用 &lt;code&gt;git add -A&lt;/code&gt; ，然后根据合并命令，执行&lt;code&gt;git cherry-pick --continue&lt;/code&gt;&lt;br&gt;或者 &lt;code&gt;git rebase --continue&lt;/code&gt;命令。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;冲突内容一&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=======&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;冲突内容二&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; commit-id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Git-修改与撤销&quot;&gt;&lt;a href=&quot;#Git-修改与撤销&quot; class=&quot;headerlink&quot; title=&quot;Git 修改与撤销&quot;&gt;&lt;/a&gt;Git 修改与撤销&lt;/h1&gt;&lt;h2 id=&quot;git-commit-–amend&quot;&gt;&lt;a href=&quot;#git-commit-–amend&quot; class=&quot;headerlink&quot; title=&quot;git commit –amend&quot;&gt;&lt;/a&gt;git commit –amend&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git commit --amend   #编辑工具会显示最近一次提交的提交消息，用来修改消息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-reset&quot;&gt;&lt;a href=&quot;#git-reset&quot; class=&quot;headerlink&quot; title=&quot;git reset&quot;&gt;&lt;/a&gt;git reset&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset HEAD file          #将文件从staged转换为unstaged&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset HEAD .             #将所有文件从staged转换为unstaged&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --mixed commit-id  #默认方式，回退到指定个版本，只保留源码，回退commit和index信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --soft commit-id   #回退到某个版本，只回退了commit的信息，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             #不会恢复到index file级。如果还要提交，直接commit即可   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard commit-id   #彻底回退到某个版本，本地的源码也会变为上一个版本的内容&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-revert&quot;&gt;&lt;a href=&quot;#git-revert&quot; class=&quot;headerlink&quot; title=&quot;git revert&quot;&gt;&lt;/a&gt;git revert&lt;/h2&gt;&lt;p&gt;git revert 是生成一个新的提交来撤销某次提交，此次提交之前的commit都会被保留&lt;br&gt;git reset 是回到某次提交，提交及之前的commit都会被保留，但是此次之后的修改都会被退回到暂存区&lt;/p&gt;
&lt;p&gt;具体一个例子，假设有三个commit， &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;commit3: add test3.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit2: add test2.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit1: add test1.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当执行&lt;code&gt;git revert HEAD~1&lt;/code&gt;时， commit2被撤销了, 运行&lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;revert &amp;quot;commit2&amp;quot;:this reverts commit 5fe21s2...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit3: add test3.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit2: add test2.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit1: add test1.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行&lt;code&gt;git status&lt;/code&gt;， 没有任何暂存。&lt;/p&gt;
&lt;p&gt;如果换做执行&lt;code&gt;git reset --soft(默认) HEAD~1&lt;/code&gt;后，运行&lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;commit2: add test2.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit1: add test1.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行&lt;code&gt;git status&lt;/code&gt;， 其中 &lt;code&gt;test3.md&lt;/code&gt; 处于暂存区，准备提交。&lt;/p&gt;
&lt;p&gt;再如果换做执行&lt;code&gt;git reset --hard HEAD~1&lt;/code&gt;后,&lt;/p&gt;
&lt;p&gt;显示：&lt;code&gt;HEAD is now at commit2&lt;/code&gt;，运行&lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;commit2: add test2.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit1: add test1.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行&lt;code&gt;git status&lt;/code&gt;， 没有任何暂存。&lt;/p&gt;
&lt;p&gt;另外：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git revert &amp;lt;commit-id&amp;gt;&lt;/code&gt; 是撤消该commit，作为一个新的commit。&lt;/p&gt;
&lt;h2 id=&quot;git-rebase-1&quot;&gt;&lt;a href=&quot;#git-rebase-1&quot; class=&quot;headerlink&quot; title=&quot;git rebase&quot;&gt;&lt;/a&gt;git rebase&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(1) git rebase -i commit-id   #在vi编辑器中，显示commit-id到最新的所有commit记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2) git rebase -i HEAD~10     #在vi编辑器中，显示最新10条commit记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(3) 在vi编辑器中, 修改commit内容, wq保存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(4) git add -A                #解决冲突后，暂存文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(5) git rebase --continue     #完成未完成rebase操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(6) git rebase --abort        #完成未完成rebase操作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假定vim编辑器的初始内容如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pick 8e5da5f test-comment-1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-3 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick dcc8310 test-comment-4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;git常见的几种操作方式，都是通过vim编辑器来实现的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scene1 ： 修改commit的message内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改vim内容结果如下，然后保存。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 修改commit内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 8e5da5f test-comment-1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r 627a433 修改后的内容 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick dcc8310 test-comment-4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Scene2 ：删除指定commit的提交内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改vim内容结果如下，然后保存。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# commit-id删除 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 8e5da5f test-comment-1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick dcc8310 test-comment-4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Scene3 ：调换指定commit的提交顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改vim内容结果如下，然后保存。若有冲突，先解决冲突，&lt;br&gt;然后使用&lt;code&gt;git add -A&lt;/code&gt;添加，再使用&lt;code&gt;git rebase --continue&lt;/code&gt;继续。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 调换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 8e5da5f test-comment-1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-3 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick dcc8310 test-comment-4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Scene4 ：合并指定的两个commit的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改vim内容结果如下，然后保存, 若有冲突，先解决冲突，&lt;br&gt;然后使用&lt;code&gt;git add -A&lt;/code&gt;添加，再使用&lt;code&gt;git rebase --continue&lt;/code&gt;继续。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# commit-id 3 与 4合并&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 8e5da5f test-comment-1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-3 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s dcc8310 test-comment-4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-reflog&quot;&gt;&lt;a href=&quot;#git-reflog&quot; class=&quot;headerlink&quot; title=&quot;git reflog&quot;&gt;&lt;/a&gt;git reflog&lt;/h2&gt;&lt;p&gt;  显示所有过去commit历史，可使用&lt;code&gt;git reset --hard&lt;/code&gt;命令跳转到指定commit-id位置，&lt;br&gt;  用来恢复某些的误操作。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Git是一个分布式版本管理系统，是为了更好地管理Linux内核开发而创立的。Git与Svn相比，不光有远程代码库，也有本地代码库，方便多人协作。&lt;/p&gt;
&lt;p&gt;另外，Git中分支的活用，也极大的方便了开发人员开发过程中的多版本同时开发。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/016/Git-start3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://czhzero.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="http://czhzero.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Java中String数据类型转换与format总结</title>
    <link href="http://czhzero.com/2016/12/23/java-value-format-and-converter/"/>
    <id>http://czhzero.com/2016/12/23/java-value-format-and-converter/</id>
    <published>2016-12-23T02:10:48.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;Java中的String类型与List,数组等格式在日常工作中，经常需要进行相互转换，本文总结了几种常见的格式转换与format例子。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-List-与-String数组&quot;&gt;&lt;a href=&quot;#1-List-与-String数组&quot; class=&quot;headerlink&quot; title=&quot;1. List 与 String数组&quot;&gt;&lt;/a&gt;1. List&lt;string&gt; 与 String数组&lt;/string&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;List&lt;string&gt;转String数组&lt;/string&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ArrayList list = new ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list.add(&amp;quot;aaa&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list.add(&amp;quot;bbb&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String[] arrString = (String[]) list.toArray(new String[list.size()]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;String数组转List&lt;string&gt;&lt;/string&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String[] s = &amp;#123;&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; listA = Arrays.asList(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;listA.add(3, &amp;quot;4&amp;quot;);     //java.lang.UnsupportedOperationException异常&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ArrayList&amp;lt;String&amp;gt; listB = new ArrayList&amp;lt;&amp;gt;(listA);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;listB.add(3, &amp;quot;4&amp;quot;);       //正确&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Arrays.asList() 返回的是 &lt;code&gt;java.util.Arrays.ArrayList&lt;/code&gt; 而不是 &lt;code&gt;java.util.ArrayList&lt;/code&gt; ,&lt;br&gt;这两个类同名，都继承了AbstractList，&lt;br&gt;但是前者并未实现add,remove等方法，所有要进行增删操作，必须先转换成真正的 &lt;code&gt;java.util.ArrayList&lt;/code&gt;,&lt;br&gt;否则会报&lt;code&gt;java.lang.UnsupportedOperationException异常&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-String-数组-与-String&quot;&gt;&lt;a href=&quot;#2-String-数组-与-String&quot; class=&quot;headerlink&quot; title=&quot;2. String[]数组 与 String&quot;&gt;&lt;/a&gt;2. String[]数组 与 String&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;String[]数组转String&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String[] s = &amp;#123;&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str = Arrays.toString(s);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;String转String[]数组&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String str = &amp;quot;1,2,3,4&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String[] s = str.split(&amp;quot;,&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-List-与-String&quot;&gt;&lt;a href=&quot;#3-List-与-String&quot; class=&quot;headerlink&quot; title=&quot;3. List 与 String&quot;&gt;&lt;/a&gt;3. List&lt;string&gt; 与 String&lt;/string&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;List&lt;string&gt;转String&lt;/string&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String str = listA.toString();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;String转List&lt;string&gt;&lt;/string&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;String先转换成String数组，再转成List&lt;string&gt;。&lt;/string&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-String-与-数值类型互转&quot;&gt;&lt;a href=&quot;#4-String-与-数值类型互转&quot; class=&quot;headerlink&quot; title=&quot;4.String 与 数值类型互转&quot;&gt;&lt;/a&gt;4.String 与 数值类型互转&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;String转int&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int i = Integer.parseInt(&amp;quot;1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int j = Integer.valueOf(&amp;quot;2&amp;quot;).intValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int k = Integer.valueOf(&amp;quot;3&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;字串转成 Double, Float, Long 的方法大同小异。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;int转String&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String a = String.valueOf(1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String b = Integer.toString(2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String c = &amp;quot;&amp;quot; + 3;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Double, Float, Long 转成字串的方法大同小异。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;5-String-format格式化&quot;&gt;&lt;a href=&quot;#5-String-format格式化&quot; class=&quot;headerlink&quot; title=&quot;5. String.format格式化&quot;&gt;&lt;/a&gt;5. String.format格式化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;整数格式format&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int d = Integer.parseInt(&amp;quot;99099&amp;quot;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(d);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//格式化为整形型字符串  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%d&amp;quot;,d));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//整数长度为7，如果不到7位就用0填充  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%07d&amp;quot;,9909));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%07d&amp;quot;,99099999));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//长度不满7就用空格填充  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;% 7d&amp;quot;,9909));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//使用,对数字分组  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%,d&amp;quot;,9909999));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//显示正负数  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%+d&amp;quot;,d));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%+d&amp;quot;,-345));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;小数点格式format&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;double d = Double.parseDouble(&amp;quot;9909999999.9999&amp;quot;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(d);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//格式化为浮点型字符串  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%f&amp;quot;,d));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//整数部分全部显示，小数部分后面保留5位小数  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%.5f&amp;quot;,d));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//使用,对数字分组  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%,f&amp;quot;,d));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//显示正负数  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%+f&amp;quot;,d));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%+f&amp;quot;,-345.98));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//算小数点后面的位数一起时15  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%015f&amp;quot;,345.98));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//小数点后面保留三位小数  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%015.3f&amp;quot;,345.98));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了用&lt;code&gt;String.format&lt;/code&gt;之外还有些其他方法。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//方法一&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java.text.DecimalFormat df = new java.text.DecimalFormat(&amp;quot;#.##&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double d = 3.14159;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(df.format(d));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//方法二&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BigDecimal bd = new BigDecimal(&amp;quot;3.14159265&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bd = bd.setScale(2, BigDecimal.ROUND_HALF_UP);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//方法三&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double value = 1234.5678;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long l1 = Math.round(value * 100);   //四舍五入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double result = l1 / 100.0;          //注意：使用100.0而不是100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//方法四&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double value = 1234.5678;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value = ((int) (value * 100)) / 100.0;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;时间格式format&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Date now = new Date();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;全部日期和时间信息:&amp;quot;+String.format(&amp;quot;%tc&amp;quot;, now));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;年-月-日格式：&amp;quot;+String.format(&amp;quot;%tF&amp;quot;, now));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;月/日/年格式:&amp;quot;+String.format(&amp;quot;%tD&amp;quot;, now));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;HH:MM :&amp;quot;+String.format(&amp;quot;%tR&amp;quot;, now));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;HH:MM:SS PM格式（12时制）：&amp;quot;+String.format(&amp;quot;%tr&amp;quot;, now));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;HH:MM:SS格式（24时制）:&amp;quot;+String.format(&amp;quot;%tT&amp;quot;, now));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://hbiao68.iteye.com/blog/1769053&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;String.format格式化&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://irobot.iteye.com/blog/285537&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java中取小数点后两位(四种方法)&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Java中的String类型与List,数组等格式在日常工作中，经常需要进行相互转换，本文总结了几种常见的格式转换与format例子。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://czhzero.com/categories/Java/"/>
    
    
      <category term="formatter" scheme="http://czhzero.com/tags/formatter/"/>
    
  </entry>
  
  <entry>
    <title>如何在Android7.0系统下通过Intent安装apk</title>
    <link href="http://czhzero.com/2016/12/21/how-to-install-apk-on-Android7-0/"/>
    <id>http://czhzero.com/2016/12/21/how-to-install-apk-on-Android7-0/</id>
    <published>2016-12-21T02:14:49.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt; Android系统升级到7.0之后，安全性提高了不少，过去我们通常是使用这样的代码进行apk的安装操作。&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(Intent.ACTION_VIEW);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.setDataAndType(Uri.fromFile(apkFile), &amp;quot;application/vnd.android.package-archive&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.startActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 但是在Android7.0的系统上，运行这段代码，会报如下错误。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caused by: android.os.FileUriExposedException&lt;/p&gt;
&lt;/blockquote&gt;
 &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;原因是，安卓官方为了提高私有文件的安全性，面向 Android 7.0 或更高版本的应用私有目录被限制访问　(0700)。此设置可防止私有文件的元数据泄漏，如它们的大小或存在性.&lt;/p&gt;
&lt;p&gt;传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 &lt;a href=&quot;https://developer.android.google.cn/reference/android/support/v4/content/FileProvider.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FileProvider&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;1-定义一个FileProvider&quot;&gt;&lt;a href=&quot;#1-定义一个FileProvider&quot; class=&quot;headerlink&quot; title=&quot;1.定义一个FileProvider&quot;&gt;&lt;/a&gt;1.定义一个FileProvider&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;manifest&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;application&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;provider&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:name=&amp;quot;android.support.v4.content.FileProvider&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:authorities=&amp;quot;com.mydomain.fileprovider&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:exported=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:grantUriPermissions=&amp;quot;true&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/provider&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/application&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-添加可用权限的文件目录&quot;&gt;&lt;a href=&quot;#2-添加可用权限的文件目录&quot; class=&quot;headerlink&quot; title=&quot;2.添加可用权限的文件目录&quot;&gt;&lt;/a&gt;2.添加可用权限的文件目录&lt;/h2&gt;&lt;p&gt;在res目录下，增加xml文件夹，并新建一个名为 &lt;code&gt;file_paths.xml&lt;/code&gt; 的文件。文件内容格式如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;paths xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   		&amp;lt;files-path name=&amp;quot;name1&amp;quot; path=&amp;quot;test1&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/paths&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;path&gt;&lt;/path&gt;标签下面必须包含至少包含以下标签中的一个或者多个。&lt;/p&gt;
&lt;h3 id=&quot;files-path&quot;&gt;&lt;a href=&quot;#files-path&quot; class=&quot;headerlink&quot; title=&quot;files-path&quot;&gt;&lt;/a&gt;files-path&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;files-path name=&amp;quot;name1&amp;quot; path=&amp;quot;test1&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示Context.getFilesDir()目录或者其子目录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 : /data/data/com.chen.gradle/files/test1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;cache-path&quot;&gt;&lt;a href=&quot;#cache-path&quot; class=&quot;headerlink&quot; title=&quot;cache-path&quot;&gt;&lt;/a&gt;cache-path&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;cache-path name=&amp;quot;name2&amp;quot; path=&amp;quot;test2&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示Context.getCacheDir()目录或者其子目录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 : /data/data/com.chen.gradle/cache/test2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;external-path&quot;&gt;&lt;a href=&quot;#external-path&quot; class=&quot;headerlink&quot; title=&quot;external-path&quot;&gt;&lt;/a&gt;external-path&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;external-path name=&amp;quot;name3&amp;quot; path=&amp;quot;test3&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示Environment.getExternalStorageDirectory()目录或者其子目录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 : /storage/emulated/0/test3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;external-files-path&quot;&gt;&lt;a href=&quot;#external-files-path&quot; class=&quot;headerlink&quot; title=&quot;external-files-path&quot;&gt;&lt;/a&gt;external-files-path&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;external-files-path name=&amp;quot;name4&amp;quot; path=&amp;quot;test4&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示Context.getExternalFilesDir(null)目录或者其子目录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 : /storage/emulated/0/Android/data/com.chen.gradle/files/test4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;external-cache-path&quot;&gt;&lt;a href=&quot;#external-cache-path&quot; class=&quot;headerlink&quot; title=&quot;external-cache-path&quot;&gt;&lt;/a&gt;external-cache-path&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;external-cache-path name=&amp;quot;name5&amp;quot; path=&amp;quot;test5&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示Context.getExternalCacheDir()目录或者其子目录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 : /storage/emulated/0/Android/data/com.chen.gradle/cache/test5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;3-增加到provider&quot;&gt;&lt;a href=&quot;#3-增加到provider&quot; class=&quot;headerlink&quot; title=&quot;3.增加到provider&quot;&gt;&lt;/a&gt;3.增加&lt;path&gt;&lt;/path&gt;到provider&lt;/h2&gt;&lt;p&gt;通过&lt;code&gt;&amp;lt;meta-data&amp;gt;&lt;/code&gt;标签将上面的filepath添加到provider当中。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;provider&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:name=&amp;quot;android.support.v4.content.FileProvider&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:authorities=&amp;quot;com.mydomain.fileprovider&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:exported=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:grantUriPermissions=&amp;quot;true&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;meta-data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:name=&amp;quot;android.support.FILE_PROVIDER_PATHS&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:resource=&amp;quot;@xml/file_paths&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/provider&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-通过provider生成Uri&quot;&gt;&lt;a href=&quot;#4-通过provider生成Uri&quot; class=&quot;headerlink&quot; title=&quot;4.通过provider生成Uri&quot;&gt;&lt;/a&gt;4.通过provider生成Uri&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File imagePath = new File(Context.getFilesDir(), &amp;quot;test1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File newFile = new File(imagePath, &amp;quot;default_image.jpg&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri contentUri = FileProvider.getUriForFile(getContext(), &amp;quot;com.mydomain.fileprovider&amp;quot;, newFile);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-赋予临时权限给Uri&quot;&gt;&lt;a href=&quot;#5-赋予临时权限给Uri&quot; class=&quot;headerlink&quot; title=&quot;5.赋予临时权限给Uri&quot;&gt;&lt;/a&gt;5.赋予临时权限给Uri&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终安装apk的代码变成这样:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static void installApk(Context context, String apkPath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (context == null || TextUtils.isEmpty(apkPath)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    File file = new File(apkPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Intent intent = new Intent(Intent.ACTION_VIEW);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //判读版本是否在7.0以上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (Build.VERSION.SDK_INT &amp;gt;= 24) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //provider authorities&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Uri apkUri = FileProvider.getUriForFile(context, &amp;quot;com.mydomain.fileprovider&amp;quot;, file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //Granting Temporary Permissions to a URI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        intent.setDataAndType(apkUri, &amp;quot;application/vnd.android.package-archive&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        intent.setDataAndType(Uri.fromFile(file), &amp;quot;application/vnd.android.package-archive&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context.startActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 7.0 行为变更&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; Android系统升级到7.0之后，安全性提高了不少，过去我们通常是使用这样的代码进行apk的安装操作。&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(Intent.ACTION_VIEW);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.setDataAndType(Uri.fromFile(apkFile), &amp;quot;application/vnd.android.package-archive&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.startActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 但是在Android7.0的系统上，运行这段代码，会报如下错误。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caused by: android.os.FileUriExposedException&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="android7.0" scheme="http://czhzero.com/tags/android7-0/"/>
    
  </entry>
  
  <entry>
    <title>RecycleView实现Android树形列表控件</title>
    <link href="http://czhzero.com/2016/12/07/treeview/"/>
    <id>http://czhzero.com/2016/12/07/treeview/</id>
    <published>2016-12-07T12:07:24.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要通过RecycleView实现了任意层次的树形ListView。实现的主要原理是通过保存两份List数据，一份是完整数据，一份是当前展开的数据来实现。再通过点击事件，控制展开数据的内容。同时也可根据需要选择模式，来支持单选和各种多选效果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/czhzero/MultipleTreeView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TreeView项目地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;TreeView-Demo预览&quot;&gt;&lt;a href=&quot;#TreeView-Demo预览&quot; class=&quot;headerlink&quot; title=&quot;TreeView Demo预览&quot;&gt;&lt;/a&gt;TreeView Demo预览&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/015/device-2016-12-07-201436.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;TreeView主要源码解析&quot;&gt;&lt;a href=&quot;#TreeView主要源码解析&quot; class=&quot;headerlink&quot; title=&quot;TreeView主要源码解析&quot;&gt;&lt;/a&gt;TreeView主要源码解析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Node.java&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Node&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public final static int TREE_LEAF = 0;  //树叶节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public final static int TREE_NODE = 1;  //普通节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点Id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private String id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 父节点Id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private String pId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点类型, 0为树叶节点, 1为普通节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private int type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点级别, 根节点level = 0，子节点依次+1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private int level;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 父Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private Node&amp;lt;T&amp;gt; parent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 下一级的子Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private List&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt; children;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 是否展开&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private boolean isExpanded;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 是否被选中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private boolean isChecked;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private String label;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点信息其他内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private T content;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点前面的Icon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private int headDrawableId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点选中的Icon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private int checkDrawableId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public Node(String id, String pid, String name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       this.id = id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       this.pId = pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ... 省略get set 方法&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TreeRecyclerView.java&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TreeRecyclerView extends FrameLayout &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static int MODE_SINGLE_SELECT = 1;        //单选模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static int MODE_MULTI_SELECT = 2;         //无限制，多选模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static int MODE_DEPEND_SELECT = 3;        //父子节点不可同选，多选模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static int MODE_CLICK_SELECT = 4;         //选中跳转模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private RecyclerView mRecyclerView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private TreeRecyclerAdapter mAdapter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public TreeRecyclerView(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        initView(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public TreeRecyclerView(Context context, AttributeSet attrs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context, attrs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        initView(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public TreeRecyclerView(Context context, AttributeSet attrs, int defStyleAttr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context, attrs, defStyleAttr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        initView(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void initView(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRecyclerView = new RecyclerView(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRecyclerView.setLayoutManager(new LinearLayoutManager(context));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addView(mRecyclerView, lp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAdapter = new TreeRecyclerAdapter&amp;lt;&amp;gt;(mRecyclerView.getContext());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 初始化树形折叠控件数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * T 类型 示例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * public static class TestModel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @NodeId public String id;                    //必填字段&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @NodeName public String name;                  //必填字段&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @NodeLabel public String label;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @NodePid public String parentId;              //父节点id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @NodeChild public List&amp;lt;TestModel&amp;gt; child;        //child用来表示层级关系, child为空，则表示叶子节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * others&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public &amp;lt;T&amp;gt; void setData(List&amp;lt;T&amp;gt; list, int mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ArrayList&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt; nodeList = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            nodeList = NodeDataConverter.convertToNodeList(list);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (IllegalAccessException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setMode(mode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAdapter.addAllData(nodeList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRecyclerView.setAdapter(mAdapter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 设置点击事件, MODE_CLICK_SELECT模式下需要使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setOnItemClickListener(OnNodeItemClickListener listener) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAdapter.setOnItemClickListener(listener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 获取选中的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param &amp;lt;T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public &amp;lt;T&amp;gt; void getSelectedItems(List&amp;lt;T&amp;gt; list) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAdapter.getSelectedItems(list);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 设置折叠控件的选择模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param mode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void setMode(int mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mode != MODE_SINGLE_SELECT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; mode != MODE_MULTI_SELECT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; mode != MODE_DEPEND_SELECT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; mode != MODE_CLICK_SELECT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAdapter.setMode(mode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;TreeRecyclerAdapter.java&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class TreeRecyclerAdapter&amp;lt;T&amp;gt; extends RecyclerView.Adapter&amp;lt;TreeBaseViewHolder&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private Context mContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private List&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt; mVisibleNodes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private List&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt; mRootNodes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private OnNodeItemClickListener mOnNodeItemClickListener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private int mSelectMode = TreeRecyclerView.MODE_SINGLE_SELECT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private OnNodeSwitchListener mOnNodeSwitchListener = new OnNodeSwitchListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public void onExpand(Node node, int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            NodeDataConverter.expandNode(NodeDataConverter.filterNodeById(node.getId(), mRootNodes));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rearrangeVisibleNodes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public void onShrink(Node node, int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            NodeDataConverter.shrinkNode(NodeDataConverter.filterNodeById(node.getId(), mRootNodes));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rearrangeVisibleNodes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private OnNodeCheckListener mOnNodeCheckListener = new OnNodeCheckListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public void onCheck(boolean isChecked, int position, Node node) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mOnNodeItemClickListener != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mOnNodeItemClickListener.onItemClick(node.getContent());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            NodeDataConverter.checkNode(node.getId(), isChecked, mSelectMode, mVisibleNodes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public TreeRecyclerAdapter(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mContext = context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mVisibleNodes = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRootNodes = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 填充数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param nodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void addAllData(List&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt; nodes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (nodes != null &amp;amp;&amp;amp; !nodes.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mRootNodes.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mRootNodes.addAll(nodes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (Node&amp;lt;T&amp;gt; item : nodes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            filterVisibleNodes(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 设置模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param mode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setMode(int mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mSelectMode = mode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 设置点击事件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setOnItemClickListener(OnNodeItemClickListener listener) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mOnNodeItemClickListener = listener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 返回当前选择数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public &amp;lt;T&amp;gt; void getSelectedItems(List&amp;lt;T&amp;gt; list) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt; resultNodeList = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (Node item : mRootNodes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resultNodeList.addAll(NodeDataConverter.filterCheckedNodeList(item));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (Node&amp;lt;T&amp;gt; item : resultNodeList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            list.add(item.getContent());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public TreeBaseViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        View view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        switch (viewType) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case Node.TREE_NODE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                view = LayoutInflater.from(mContext).inflate(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        R.layout.listitem_tree_node, parent, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return new TreeNodeViewHolder&amp;lt;T&amp;gt;(view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case Node.TREE_LEAF:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                view = LayoutInflater.from(mContext).inflate(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        R.layout.listitem_tree_leaf, parent, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return new TreeLeafViewHolder&amp;lt;T&amp;gt;(view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onBindViewHolder(TreeBaseViewHolder holder, int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        switch (getItemViewType(position)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case Node.TREE_NODE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                TreeNodeViewHolder&amp;lt;T&amp;gt; nodeViewHolder = (TreeNodeViewHolder&amp;lt;T&amp;gt;) holder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                nodeViewHolder.bindView(mVisibleNodes.get(position),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        position, mOnNodeSwitchListener, mOnNodeCheckListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case Node.TREE_LEAF:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                TreeLeafViewHolder&amp;lt;T&amp;gt; leafViewHolder = (TreeLeafViewHolder&amp;lt;T&amp;gt;) holder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                leafViewHolder.bindView(mVisibleNodes.get(position),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        position, mOnNodeCheckListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public int getItemCount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return mVisibleNodes.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public int getItemViewType(int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return mVisibleNodes.get(position).getType();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 根据visible属性，重新刷新，可视节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void rearrangeVisibleNodes() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mRootNodes == null || mRootNodes.size() &amp;lt;= 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mVisibleNodes.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (Node&amp;lt;T&amp;gt; node : mRootNodes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            filterVisibleNodes(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 将展开节点归结到可视节点中, 递归总是从根节点开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void filterVisibleNodes(Node&amp;lt;T&amp;gt; node) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mVisibleNodes.add(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (node.isExpanded()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (node.getChildren() != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                for (Node&amp;lt;T&amp;gt; item : node.getChildren()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    filterVisibleNodes(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Viewholder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TreeBaseViewHolder.java&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TreeBaseViewHolder extends RecyclerView.ViewHolder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   protected int mLevelMargin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   protected TreeBaseViewHolder(View itemView) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       super(itemView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       mLevelMargin = 30;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   protected void setChecked(View view, boolean isChecked) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       if (isChecked) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           view.setVisibility(View.VISIBLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           view.setVisibility(View.GONE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;- TreeLeafViewHolder.java

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TreeLeafViewHolder&amp;lt;T&amp;gt; extends TreeBaseViewHolder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private RelativeLayout rl_content;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private TextView tv_name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private TextView tv_label;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private ImageView iv_checkbox;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public TreeLeafViewHolder(View itemView) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       super(itemView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       rl_content = (RelativeLayout) itemView.findViewById(R.id.rl_content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_name = (TextView) itemView.findViewById(R.id.tv_name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_label = (TextView) itemView.findViewById(R.id.tv_label);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       iv_checkbox = (ImageView) itemView.findViewById(R.id.iv_checkbox);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public void bindView(final Node&amp;lt;T&amp;gt; node,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        final int position,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        final OnNodeCheckListener onNodeCheckListener) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //根据节点层级，进行缩进处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       RecyclerView.LayoutParams params = (RecyclerView.LayoutParams)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               rl_content.getLayoutParams();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       params.leftMargin = mLevelMargin * node.getLevel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       rl_content.setLayoutParams(params);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //设置节点名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_name.setText(node.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //设置节点描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_label.setText(node.getLabel());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //设置节点选中状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       setChecked(iv_checkbox, node.isChecked());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       rl_content.setOnClickListener(new View.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           public void onClick(View v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               if (onNodeCheckListener != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   onNodeCheckListener.onCheck(!node.isChecked(), position, node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


- TreeNodeViewHolder.java

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TreeNodeViewHolder&amp;lt;T&amp;gt; extends TreeBaseViewHolder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private RelativeLayout rl_content;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private ImageView iv_icon;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private TextView tv_name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private TextView tv_label;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private ImageView iv_checkbox;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public TreeNodeViewHolder(View itemView) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       super(itemView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       rl_content = (RelativeLayout) itemView.findViewById(R.id.rl_content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_name = (TextView) itemView.findViewById(R.id.tv_name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       iv_icon = (ImageView) itemView.findViewById(R.id.iv_icon);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_label = (TextView) itemView.findViewById(R.id.tv_label);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       iv_checkbox = (ImageView) itemView.findViewById(R.id.iv_checkbox);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public void bindView(final Node&amp;lt;T&amp;gt; node,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        final int position,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        final OnNodeSwitchListener onNodeSwitchListener,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        final OnNodeCheckListener onNodeCheckListener) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //根据节点层级，进行缩进处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       RecyclerView.LayoutParams params = (RecyclerView.LayoutParams)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               rl_content.getLayoutParams();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       params.leftMargin = mLevelMargin * node.getLevel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       rl_content.setLayoutParams(params);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //设置节点名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_name.setText(node.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //设置节点描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_label.setText(node.getLabel());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //设置节点选中状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       setChecked(iv_checkbox, node.isChecked());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //设置节点展开状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       setExpanded(iv_icon, node.isExpanded());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       iv_icon.setOnClickListener(new View.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           public void onClick(View v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               if (node.isExpanded()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   onNodeSwitchListener.onShrink(node, position);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   rotationExpandIcon(iv_icon, 0, -90);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   onNodeSwitchListener.onExpand(node, position);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   rotationExpandIcon(iv_icon, -90, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       rl_content.setOnClickListener(new View.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           public void onClick(View v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               if (onNodeCheckListener != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   onNodeCheckListener.onCheck(!node.isChecked(), position, node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 设置展开图标效果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * @param view&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * @param isExpanded&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private void setExpanded(View view, boolean isExpanded) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       if (isExpanded) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           view.setRotation(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           view.setRotation(-90);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 根据角度选择图标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * @param view&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * @param from&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * @param to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private void rotationExpandIcon(final View view, final float from, final float to) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       if (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.HONEYCOMB) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           ValueAnimator valueAnimator = ValueAnimator.ofFloat(from, to);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           valueAnimator.setDuration(150);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           valueAnimator.setInterpolator(new DecelerateInterpolator());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               public void onAnimationUpdate(ValueAnimator valueAnimator) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   view.setRotation((Float) valueAnimator.getAnimatedValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           valueAnimator.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要通过RecycleView实现了任意层次的树形ListView。实现的主要原理是通过保存两份List数据，一份是完整数据，一份是当前展开的数据来实现。再通过点击事件，控制展开数据的内容。同时也可根据需要选择模式，来支持单选和各种多选效果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/czhzero/MultipleTreeView&quot;&gt;TreeView项目地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="treeview" scheme="http://czhzero.com/tags/treeview/"/>
    
  </entry>
  
</feed>
