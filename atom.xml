<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alvin-一座小楼</title>
  <subtitle>Test</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://czhzero.com/"/>
  <updated>2017-01-17T15:08:43.000Z</updated>
  <id>http://czhzero.com/</id>
  
  <author>
    <name>Alvin-一座小楼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vim常用快捷键总结</title>
    <link href="http://czhzero.com/2017/01/17/vim-key-shortcut/"/>
    <id>http://czhzero.com/2017/01/17/vim-key-shortcut/</id>
    <published>2017-01-17T14:53:58.000Z</published>
    <updated>2017-01-17T15:08:43.000Z</updated>
    
    <content type="html">&lt;p&gt;vi命令是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;工作模式&quot;&gt;&lt;a href=&quot;#工作模式&quot; class=&quot;headerlink&quot; title=&quot;工作模式&quot;&gt;&lt;/a&gt;工作模式&lt;/h2&gt;&lt;p&gt;Vim编辑器共有两种工作模式，一个是插入模式，一个是命令模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用来编写文本内容。在命令模式下, 按&lt;code&gt;字母i键&lt;/code&gt;即可进入到插入模式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/020/insertmodel.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令模式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;是用来编辑文本，如上下翻页等，复制粘贴，跳转到指定行等操作。在插入模式下，按&lt;code&gt;Esc键&lt;/code&gt;，再按&lt;code&gt;冒号:键&lt;/code&gt;即可进入命令模式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/020/commandmodel.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当前编辑的顶部或者底部会显示vim处于何种模式下。如：mode：COMMAND!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所有命令都必须在英文输入法下面输入&lt;br&gt;命令对大小写敏感&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;打开-保存-退出&quot;&gt;&lt;a href=&quot;#打开-保存-退出&quot; class=&quot;headerlink&quot; title=&quot;打开/保存/退出&quot;&gt;&lt;/a&gt;打开/保存/退出&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进入&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//filename，若已经存在则打开已存在的文件，不存在则新建一个文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//默认开始进入的模式是命令模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vi filename&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;保存/退出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入命令模式，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:wq              保存修改并退出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ZZ               快捷键，保存修改并退出(前面没有冒号)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:q!              不保存退出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:wq!             强行保存退出，(文件所属者科忽略文件的制度属性)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:w               保存不退出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:wqa             保存所有文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:w new_filename  另存为指定文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;编辑&quot;&gt;&lt;a href=&quot;#编辑&quot; class=&quot;headerlink&quot; title=&quot;编辑&quot;&gt;&lt;/a&gt;编辑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;插入&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a                     在光标后附加文本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A                     在本行行末附加文本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i                     在光标前插入文本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I                     在本行开始插入文本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;o (字母)               在光标下插入新行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;O (字母)               在光标上插入新行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;剪切复制粘贴&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yy、Y                         复制当前行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nyy，nY                       复制当前行一下n行(包括当前行)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p、P                          粘贴在当前光标所在行下或行上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ddp                          交换当前行和其下一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dd                           剪切当前行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ndd                          剪切当前行一下n行(包括当前行)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:1,10d                       将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:1, 10 m 20                  将第1-10行移动到第20行之后。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;删除&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x                     删除后面的字符 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X                     删除前一个字符  删除3个字符就是3x  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dd                    删除一行   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D                     删除到行尾 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dw                    删除一个单词（光标后部分）  　　　　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d4w                   删除4个单词　　　　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d$                    删除当前光标到行尾　　　　&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d^                    删除当前光标至行首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;J                     删除换行符，使下一行并上来。     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nJ                    连接后面的n行&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;撤销&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;u                         取消上一步操作(最多连续取消500次)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl+r                    恢复上一步被撤销的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;U                         撤销当前一行的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:e!                       返回上次保存后的状态&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;定位&quot;&gt;&lt;a href=&quot;#定位&quot; class=&quot;headerlink&quot; title=&quot;定位&quot;&gt;&lt;/a&gt;定位&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;h、方向左键              左移一个字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;j、 方向下键             下移一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k、方向上键              上移一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l、 方向右键             右移一个字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$                       移至行尾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0                       移至行首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;^(尖角号)                移至行首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;H                       移至屏幕上端&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M                       移至屏幕中央&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L                       移至屏幕下端&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(                        (左小括号)移动到上一个句子首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)                        (右小括号)移动到下一个句子首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;                        (左大括号)移动到上一个段落首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;                        (右大括号)移动到下一个段落首&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;&amp;apos;                       (连续输入法两个单引号)光标跳转到上次停靠处&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;W                        移动到下一个单词的首位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;w                        将光标右移一个单词的首位置。光标停留在下一个单词的首位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e                        移动到单词末尾。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E                        和小写用法一样，只是以空格字符作为字的分隔符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b                        移动到单词的头部&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B                        和小写用法一样，只是以空格字符作为字的分隔符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//w W e E b B 都可以与n结合使用, n为数量单位， 如nw nW ne nE nb nB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set nu                      设置行号为显示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set nonu                    设置行号为隐藏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set nu!                     设置行号为显示/隐藏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gg                           光标移动到第一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;G                            光标移动到最后一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nG                           光标跳转到指定行    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:n                           光标跳转到指定行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + e                 向下滚动一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + y                 向上滚动一行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + d                 向下滚动半屏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + u                 向上滚动半屏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + f                 向下滚动一屏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Ctrl + b                 向上滚动一屏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zz:将当前行滚动于屏幕中间，方便查看上下文  zt置顶，zb置尾&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;查找&quot;&gt;&lt;a href=&quot;#查找&quot; class=&quot;headerlink&quot; title=&quot;查找&quot;&gt;&lt;/a&gt;查找&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//在command模式下，通过按  f 或者 F   快速定位内容。(不需要输入冒号)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f                            向后查找&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F                            向前查找&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//可以结合数字来进行多次查找，如按下  3fq   ,就会放下查找第三个q&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//如果不加数字，如fq,就会向后查找第一个q&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*                            向后查找, 查找与光标下的词组相同的词组。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#                            向前查找, 查找与光标下的词组相同的词组。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//举例：假设光标停留在第一个if处&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//if  we are god   if you are human&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//我们在command模式下，输入  *  ，光标就会跳到“if you are human”的那个if上去&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//查找string，回车后，按n键可以跳到下一个，N上一个，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//?另外按/键后，按上下键可以找到以前查找的记录，同样的 ：也有记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/string  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//同上，默认向上查找&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;?string  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set ignorecase          大小写无关&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set noignorecase        大小写敏感&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set hlsearch            高亮显示查找结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:set nohlsearch          取消高亮&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:nohlsearch              去掉当前显示的高亮（一次性）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;替换&quot;&gt;&lt;a href=&quot;#替换&quot; class=&quot;headerlink&quot; title=&quot;替换&quot;&gt;&lt;/a&gt;替换&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;r                         (小写)替换光标所在处一个字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;R                         (大写)开始替换,直到按ESC键退出替换,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cc                        (小写)取代光标所在整行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;S                         (大写)与ss(小写)效果相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C                         (大写)取代到行尾,包括光标处字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c0                        (小写,数字0)取代到行首,不包括光标处字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c^                        (小写)与c0(小写,数字0)效果相同&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.dabu.info/vim-shortcut-key-operation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我个人精心收集的必须熟悉的vim快捷键操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/tianyajuanke/archive/2012/04/25/2470002.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vim 常用快捷键&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;vi命令是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://czhzero.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="vim" scheme="http://czhzero.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Java虚拟机学习笔记(一) - 运行时数据区域</title>
    <link href="http://czhzero.com/2017/01/15/jvm-learning-1/"/>
    <id>http://czhzero.com/2017/01/15/jvm-learning-1/</id>
    <published>2017-01-15T07:09:36.000Z</published>
    <updated>2017-01-15T16:30:31.000Z</updated>
    
    <content type="html">&lt;p&gt;Java运行时数据区域(JVM RuntimeArea)其实就是指Java虚拟机在运行期间，其对Java虚拟机内存空间的划分和分配。Java虚拟机管理的内存包括几个运行时数据内存：方法区、虚拟机栈、本地方法栈、堆、程序计数器，其中方法区和堆是由线程共享的数据区，其他几个是线程隔离的数据区。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;程序计数器&quot;&gt;&lt;a href=&quot;#程序计数器&quot; class=&quot;headerlink&quot; title=&quot;程序计数器&quot;&gt;&lt;/a&gt;程序计数器&lt;/h2&gt;&lt;p&gt;程序计数器是一块较小的内存，他可以看做是当前线程所执行的行号指示器。字节码解释器工作的时候就是通过改变这个计数器的值来选取下一条需要执行的字节码的指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器则为空。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每条线程都需要一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，生命周期与线程相同，我们称这类内存区域为&lt;strong&gt;线程私有&lt;/strong&gt;的内存&lt;/li&gt;
&lt;li&gt;唯一一个在Java虚拟机规范中没有规定任何OutOfMemotyError情况的区域&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Java虚拟机栈&quot;&gt;&lt;a href=&quot;#Java虚拟机栈&quot; class=&quot;headerlink&quot; title=&quot;Java虚拟机栈&quot;&gt;&lt;/a&gt;Java虚拟机栈&lt;/h2&gt;&lt;p&gt;虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于储存局部变量表、操作数栈、动态链接、方法出口等信息。每个方法从调用直至完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。&lt;/p&gt;
&lt;p&gt;栈内存就是虚拟机栈，或者说是虚拟机栈中局部变量表的部分&lt;/p&gt;
&lt;p&gt;局部变量表存放了编辑期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（refrence）类型和returnAddress类型（指向了一条字节码指令的地址）&lt;/p&gt;
&lt;p&gt;其中64位长度的long和double类型的数据会占用两个局部变量空间，其余的数据类型只占用1个。&lt;/p&gt;
&lt;p&gt;Java虚拟机规范对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。如果虚拟机扩展时无法申请到足够的内存，就会跑出OutOfMemoryError异常&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个线程创建的同时都会创建Java虚拟机栈，生命周期与线程相同，&lt;strong&gt;线程私有&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;内存分配高效，并且当线程运行完毕后，这些内存将被自动回收。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;本地方法栈&quot;&gt;&lt;a href=&quot;#本地方法栈&quot; class=&quot;headerlink&quot; title=&quot;本地方法栈&quot;&gt;&lt;/a&gt;本地方法栈&lt;/h2&gt;&lt;p&gt;本地方法栈和虚拟机栈发挥的作用是非常类似的，他们的区别是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务&lt;/p&gt;
&lt;p&gt;本地方法栈区域也会抛出StackOverflowError和OutOfMemoryErroy异常&lt;/p&gt;
&lt;h2 id=&quot;Java堆&quot;&gt;&lt;a href=&quot;#Java堆&quot; class=&quot;headerlink&quot; title=&quot;Java堆&quot;&gt;&lt;/a&gt;Java堆&lt;/h2&gt;&lt;p&gt;堆是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动的时候创建，此内存区域的唯一目的是存放对象实例，几乎所有的对象实例都在这里分配内存。所有的对象实例和数组都在堆上分配&lt;/p&gt;
&lt;p&gt;Java堆是垃圾收集器管理的主要区域。Java堆细分为新生代和老年代&lt;/p&gt;
&lt;p&gt;不管怎样，划分的目的都是为了更好的回收内存，或者更快地分配内存&lt;/p&gt;
&lt;p&gt;Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。如果在堆中没有完成实例分配，并且堆也无法在扩展时将会抛出OutOfMemoryError异常&lt;/p&gt;
&lt;h2 id=&quot;方法区&quot;&gt;&lt;a href=&quot;#方法区&quot; class=&quot;headerlink&quot; title=&quot;方法区&quot;&gt;&lt;/a&gt;方法区&lt;/h2&gt;&lt;p&gt;方法区它用于储存已被虚拟机加载的类信息（包括类的名称、方法信息、字段信息）、常量、静态变量、即时编译器编译后的代码等数据&lt;/p&gt;
&lt;p&gt;除了Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载&lt;/p&gt;
&lt;p&gt;当方法区无法满足内存分配需求时，将抛出OutOfMemoryErroy异常。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法区域全局共享&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由于使用反射机制的原因，虚拟机很难推测哪个类信息不再使用，因此这块区域的回收很难！另外，对这块区域主要是针对常量池回收，值得注意的是JDK1.7已经把常量池转移到堆里面了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;运行时常量池&quot;&gt;&lt;a href=&quot;#运行时常量池&quot; class=&quot;headerlink&quot; title=&quot;运行时常量池&quot;&gt;&lt;/a&gt;运行时常量池&lt;/h2&gt;&lt;p&gt;它是方法区的一部分。Class文件中除了有关的版本、字段、方法、接口等描述信息外、还有一项信息是常量池，用于存放编辑期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。&lt;/p&gt;
&lt;p&gt;Java语言并不要求常量一定只有编辑期才能产生，也就是可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是&lt;a href=&quot;http://blog.csdn.net/seu_calvin/article/details/52291082&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;String类的intern()方法&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;当常量池无法再申请到内存时会抛出OutOfMemoryError异常。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Java运行时数据区域(JVM RuntimeArea)其实就是指Java虚拟机在运行期间，其对Java虚拟机内存空间的划分和分配。Java虚拟机管理的内存包括几个运行时数据内存：方法区、虚拟机栈、本地方法栈、堆、程序计数器，其中方法区和堆是由线程共享的数据区，其他几个是线程隔离的数据区。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://czhzero.com/categories/Java/"/>
    
    
      <category term="Java虚拟机" scheme="http://czhzero.com/tags/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程(一) - 多线程的入门和使用</title>
    <link href="http://czhzero.com/2017/01/15/java-multi-thread-1/"/>
    <id>http://czhzero.com/2017/01/15/java-multi-thread-1/</id>
    <published>2017-01-15T05:34:50.000Z</published>
    <updated>2017-01-15T06:11:11.000Z</updated>
    
    <content type="html">&lt;p&gt;多线程可以减轻系统性能方面的瓶颈，提高CPU的处理器的效率，在多线程中，通过优先级管理，可以使重要的程序优先操作，提高了任务管理的灵活性；另一方面，在多CPU系统中，可以把不同的线程在不同的CPU中执行，真正做到同时处理多任务。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;先明确几个基本的概念:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行中的应用程序称为进程，拥有系统资源（cpu、内存）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进程中的一段代码，一个进程中可以有多段代码。本身不拥有资源（共享所在进程的资源）。&lt;/p&gt;
&lt;p&gt;线程主要特点是，&lt;/p&gt;
&lt;p&gt;①、不能以一个文件名的方式独立存在在磁盘中。&lt;/p&gt;
&lt;p&gt;②、不能单独执行，只有在进程启动后才可启动。&lt;/p&gt;
&lt;p&gt;③、线程可以共享进程相同的内存（代码与数据）。&lt;/p&gt;
&lt;p&gt;线程的主要用途是，&lt;/p&gt;
&lt;p&gt;①、利用它可以完成重复性的工作（如实现动画、声音等的播放）。&lt;/p&gt;
&lt;p&gt;②、从事一次性较费时的初始化工作（如网络连接、声音数据文件的加载）。&lt;/p&gt;
&lt;p&gt;③、并发执行的运行效果（一个进程多个线程）以实现更复杂的功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多进程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在操作系统中能同时运行多个任务(程序)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多线程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;指的是这个程序（一个进程）运行时产生了不止一个线程，有多个功能流同时执行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多个cpu实例或者多台机器同时执行一段处理逻辑，是真正的同时。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并发&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过cpu调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时。并发往往在场景中有公用的资源，那么针对这个公用的资源往往产生瓶颈，我们会用TPS或者QPS来反应这个系统的处理能力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程安全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;经常用来描绘一段代码。指在并发的情况之下，该代码经过多线程使用，线程的调度顺序不影响任何结果。这个时候使用多线程，我们只需要关注系统的内存，cpu是不是够用即可。反过来，线程不安全就意味着线程的调度顺序会影响最终结果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Java中的同步指的是通过人为的控制和调度，保证共享资源的多线程访问成为线程安全，来保证结果的准确。如上面的代码简单加入@synchronized关键字。在保证结果准确的同时，提高性能，才是优秀的程序。线程安全的优先级高于性能。&lt;/p&gt;
&lt;h2 id=&quot;线程的状态&quot;&gt;&lt;a href=&quot;#线程的状态&quot; class=&quot;headerlink&quot; title=&quot;线程的状态&quot;&gt;&lt;/a&gt;线程的状态&lt;/h2&gt;&lt;p&gt;关于Java中线程的生命周期，首先看一下下面这张较为经典的图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/019/232002051747387.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;状态（New）&quot;&gt;&lt;a href=&quot;#状态（New）&quot; class=&quot;headerlink&quot; title=&quot;状态（New）&quot;&gt;&lt;/a&gt;状态（New）&lt;/h3&gt;&lt;p&gt;当线程对象对创建后，即进入了新建状态，如：Thread t = new MyThread()。&lt;/p&gt;
&lt;h3 id=&quot;就绪状态（Runnable）&quot;&gt;&lt;a href=&quot;#就绪状态（Runnable）&quot; class=&quot;headerlink&quot; title=&quot;就绪状态（Runnable）&quot;&gt;&lt;/a&gt;就绪状态（Runnable）&lt;/h3&gt;&lt;p&gt;当调用线程对象的start()方法（t.start();），线程即进入就绪状态。处于就绪状态的线程，只是说明此线程已经做好了准备，随时等待CPU调度执行，并不是说执行了t.start()此线程立即就会执行。&lt;/p&gt;
&lt;h3 id=&quot;运行状态（Running）&quot;&gt;&lt;a href=&quot;#运行状态（Running）&quot; class=&quot;headerlink&quot; title=&quot;运行状态（Running）&quot;&gt;&lt;/a&gt;运行状态（Running）&lt;/h3&gt;&lt;p&gt;当CPU开始调度处于就绪状态的线程时，此时线程才得以真正执行，即进入到运行状态。注：就绪状态是进入到运行状态的唯一入口，也就是说，线程要想进入运行状态执行，首先必须处于就绪状态中。&lt;/p&gt;
&lt;h3 id=&quot;阻塞状态（Blocked）&quot;&gt;&lt;a href=&quot;#阻塞状态（Blocked）&quot; class=&quot;headerlink&quot; title=&quot;阻塞状态（Blocked）&quot;&gt;&lt;/a&gt;阻塞状态（Blocked）&lt;/h3&gt;&lt;p&gt;处于运行状态中的线程由于某种原因，暂时放弃对CPU的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才 有机会再次被CPU调用以进入到运行状态。根据阻塞产生的原因不同，阻塞状态又可以分为三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等待阻塞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行状态中的线程执行wait()方法，使本线程进入到等待阻塞状态；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步阻塞 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他阻塞 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。&lt;/p&gt;
&lt;h3 id=&quot;死亡状态（Dead）&quot;&gt;&lt;a href=&quot;#死亡状态（Dead）&quot; class=&quot;headerlink&quot; title=&quot;死亡状态（Dead）&quot;&gt;&lt;/a&gt;死亡状态（Dead）&lt;/h3&gt;&lt;p&gt;线程执行完了或者因异常退出了run()方法，该线程结束生命周期。&lt;/p&gt;
&lt;h3 id=&quot;线程状态转换&quot;&gt;&lt;a href=&quot;#线程状态转换&quot; class=&quot;headerlink&quot; title=&quot;线程状态转换&quot;&gt;&lt;/a&gt;线程状态转换&lt;/h3&gt;&lt;p&gt;就绪状态转换为运行状态：当此线程得到处理器资源；&lt;/p&gt;
&lt;p&gt;运行状态转换为就绪状态：当此线程主动调用yield()方法或在运行过程中失去处理器资源。&lt;/p&gt;
&lt;p&gt;运行状态转换为死亡状态：当此线程线程执行体执行完毕或发生了异常。&lt;/p&gt;
&lt;p&gt;此处需要特别注意的是：当调用线程的yield()方法时，线程从运行状态转换为就绪状态，但接下来CPU调度就绪状态中的哪个线程具有一定的随机性，因此，可能会出现A线程调用了yield()方法后，接下来CPU仍然调度了A线程的情况。&lt;/p&gt;
&lt;p&gt;由于实际的业务需要，常常会遇到需要在特定时机终止某一线程的运行，使其进入到死亡状态。目前最通用的做法是设置一boolean型的变量，当条件满足时，使线程执行体快速执行完毕。&lt;/p&gt;
&lt;h2 id=&quot;基本线程类&quot;&gt;&lt;a href=&quot;#基本线程类&quot; class=&quot;headerlink&quot; title=&quot;基本线程类&quot;&gt;&lt;/a&gt;基本线程类&lt;/h2&gt;&lt;p&gt;基本线程类指的是Thread类，Runnable接口，Callable接口，其中Thread类实现了Runnable接口。&lt;/p&gt;
&lt;h3 id=&quot;Thread&quot;&gt;&lt;a href=&quot;#Thread&quot; class=&quot;headerlink&quot; title=&quot;Thread&quot;&gt;&lt;/a&gt;Thread&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class MyThread extends Thread &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     	//线程执行体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ThreadTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Thread myThread1 = new MyThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//调用start()方法使得线程进入就绪状态,并不一定立即执行                                                                		myThread1.start();                             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;关于中断&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它并不像stop方法那样会中断一个正在运行的线程。线程会不时地检测中断标识位，以判断线程是否应该被中断（中断标识值是否为true）。终端只会影响到wait状态、sleep状态和join状态。被打断的线程会抛出InterruptedException。&lt;br&gt;Thread.interrupted()检查当前线程是否发生中断，返回boolean&lt;br&gt;synchronized在获锁的过程中是不能被中断的。&lt;/p&gt;
&lt;p&gt;中断是一个状态！interrupt()方法只是将这个状态置为true而已。所以说正常运行的程序不去检测状态，就不会终止，而wait等阻塞方法会去检查并抛出异常。如果在正常运行的程序中添加while(!Thread.interrupted()) ，则同样可以在中断后离开代码体&lt;/p&gt;
&lt;h3 id=&quot;Runnable&quot;&gt;&lt;a href=&quot;#Runnable&quot; class=&quot;headerlink&quot; title=&quot;Runnable&quot;&gt;&lt;/a&gt;Runnable&lt;/h3&gt;&lt;p&gt;实现Runnable接口，并重写该接口的run()方法，该run()方法同样是线程执行体，创建Runnable实现类的实例，并以此实例作为Thread类的target来创建Thread对象，该Thread对象才是真正的线程对象。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class MyRunnable implements Runnable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//线程执行体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ThreadTest &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	// 创建一个Runnable实现类的对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		Runnable myRunnable = new MyRunnable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		// 将myRunnable作为Thread target创建新的线程                 		Thread thread1 = new Thread(myRunnable); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 		// 调用start()方法使得线程进入就绪状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       thread1.start(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Thread类本身也是实现了Runnable接口。若Thread类和Runnable类均实现了run方法，start之后，会优先执行Runnable里面的run方法，而不会走Thread里面的run方法。&lt;/p&gt;
&lt;p&gt;我们看一下Thread类中对Runnable接口中run()方法的实现：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (target != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        target.run(); //target即是传入Thread的Runnable对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在程序开发中只要是多线程肯定永远以实现Runnable接口为主，因为实现Runnable接口相比继承Thread类有如下好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免点继承的局限，一个类可以继承多个接口。&lt;/li&gt;
&lt;li&gt;适合于资源的共享&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以卖票程序为例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static class MyThread extends Thread &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        private int ticket = 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            while (true) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (ticket &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    System.out.println(&amp;quot;卖票：ticket&amp;quot; + this.ticket--);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    System.out.println(&amp;quot;票卖完了&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static class MyRunnable implements Runnable &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        private int ticket = 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            while (true) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (ticket &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    System.out.println(&amp;quot;卖票：ticket&amp;quot; + this.ticket--);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    System.out.println(&amp;quot;票卖完了&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String args[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyThread mt1=new MyThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyThread mt2=new MyThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyThread mt3=new MyThread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mt1.start();//每个线程都各卖了10张，共卖了30张票&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mt2.start();//但实际只有10张票，每个线程都卖自己的票&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mt3.start();//没有达到资源共享&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyRunnable mr=new MyRunnable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new Thread(mr).start(); //三个线程共享了10张票&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new Thread(mr).start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new Thread(mr).start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Callable&quot;&gt;&lt;a href=&quot;#Callable&quot; class=&quot;headerlink&quot; title=&quot;Callable&quot;&gt;&lt;/a&gt;Callable&lt;/h3&gt;&lt;p&gt;使用Callable和Future接口创建线程。具体是创建Callable接口的实现类，并实现clall()方法。并使用FutureTask类来包装Callable实现类的对象，且以此FutureTask对象作为Thread对象的target来创建线程。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public static class MyCallable implements Callable&amp;lt;Integer&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        private int i = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 与run()方法不同的是，call()方法具有返回值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public Integer call() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int sum = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for (; i &amp;lt; 100; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.println(Thread.currentThread().getName() + &amp;quot; &amp;quot; + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sum += i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 创建MyCallable对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Callable&amp;lt;Integer&amp;gt; myCallable = new MyCallable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //使用FutureTask来包装MyCallable对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FutureTask&amp;lt;Integer&amp;gt; ft = new FutureTask&amp;lt;&amp;gt;(myCallable);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i = 0; i &amp;lt; 100; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(Thread.currentThread().getName() + &amp;quot; &amp;quot; + i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (i == 30) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Thread thread = new Thread(ft);   //FutureTask对象作为Thread对象的target创建新的线程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                thread.start();                   //线程进入到就绪状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&amp;quot;主线程for循环执行完毕..&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int sum = ft.get();            //取得新创建的新线程中的call()方法返回的结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&amp;quot;sum = &amp;quot; + sum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (InterruptedException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (ExecutionException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先，我们发现，在实现Callable接口中，此时不再是run()方法了，而是call()方法，此call()方法作为线程执行体，同时还具有返回值！在创建新的线程时，是通过FutureTask来包装MyCallable对象，同时作为了Thread对象的target。那么看下FutureTask类的定义：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class FutureTask&amp;lt;V&amp;gt; implements RunnableFuture&amp;lt;V&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     //....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public interface RunnableFuture&amp;lt;V&amp;gt; extends Runnable, Future&amp;lt;V&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     void run();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;于是，我们发现FutureTask类实际上是同时实现了Runnable和Future接口，由此才使得其具有Future和Runnable双重特性。通过Runnable特性，可以作为Thread对象的target，而Future特性，使得其可以取得新创建线程中的call()方法的返回值。&lt;/p&gt;
&lt;p&gt;执行下此程序，我们发现sum = 4950永远都是最后输出的。而“主线程for循环执行完毕..”则很可能是在子线程循环中间输出。由CPU的线程调度机制，我们知道，“主线程for循环执行完毕..”的输出时机是没有任何问题的，那么为什么sum =4950会永远最后输出呢？&lt;/p&gt;
&lt;p&gt;原因在于通过ft.get()方法获取子线程call()方法的返回值时，当子线程此方法还未执行完毕，ft.get()方法会一直阻塞，直到call()方法执行完毕才能取到返回值。&lt;/p&gt;
&lt;p&gt;future模式：并发模式的一种，可以有两种形式，即无阻塞和阻塞，分别是isDone和get。其中Future对象用来存放该线程的返回值以及状态&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ExecutorService e = Executors.newFixedThreadPool(3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; //submit方法有多重参数版本，及支持callable也能够支持runnable接口类型.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Future future = e.submit(new myCallable());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;future.isDone() //return true,false 无阻塞&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;future.get() // return 返回值，阻塞直到该线程运行结束&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述主要讲解了三种常见的线程创建方式，对于线程的启动而言，都是调用线程对象的start()方法，需要特别注意的是：&lt;strong&gt;不能对同一线程对象两次调用start()方法&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;高级线程控制类简介&quot;&gt;&lt;a href=&quot;#高级线程控制类简介&quot; class=&quot;headerlink&quot; title=&quot;高级线程控制类简介&quot;&gt;&lt;/a&gt;高级线程控制类简介&lt;/h2&gt;&lt;p&gt;Java1.5提供了一个非常高效实用的多线程包:java.util.concurrent, 提供了大量高级工具,可以帮助开发者编写高效、易维护、结构清晰的Java多线程程序。&lt;/p&gt;
&lt;h3 id=&quot;ThreadLocal类&quot;&gt;&lt;a href=&quot;#ThreadLocal类&quot; class=&quot;headerlink&quot; title=&quot;ThreadLocal类&quot;&gt;&lt;/a&gt;ThreadLocal类&lt;/h3&gt;&lt;p&gt;用处：保存线程的独立变量。对一个线程类（继承自Thread)&lt;br&gt;当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。常用于用户登录控制，如记录session信息。&lt;/p&gt;
&lt;p&gt;实现：每个Thread都持有一个TreadLocalMap类型的变量（该类是一个轻量级的Map，功能与map一样，区别是桶里放的是entry而不是entry的链表。功能还是一个map。）以本身为key，以目标为value。&lt;br&gt;主要方法是get()和set(T a)，set之后在map里维护一个threadLocal -&amp;gt; a，get时将a返回。ThreadLocal是一个特殊的容器。&lt;/p&gt;
&lt;h3 id=&quot;原子类&quot;&gt;&lt;a href=&quot;#原子类&quot; class=&quot;headerlink&quot; title=&quot;原子类&quot;&gt;&lt;/a&gt;原子类&lt;/h3&gt;&lt;p&gt;如果使用atomic wrapper class如atomicInteger，或者使用自己保证原子的操作，则等同于synchronized&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//返回值为boolean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AtomicInteger.compareAndSet(int expect,int update)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该方法可用于实现乐观锁，考虑文中最初提到的如下场景：a给b付款10元，a扣了10元，b要加10元。此时c给b2元，但是b的加十元代码约为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if(b.value.compareAndSet(old, value))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   return ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //try again&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   // if that fails, rollback and log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;AtomicReference&lt;/p&gt;
&lt;p&gt;对于AtomicReference 来讲，也许对象会出现，属性丢失的情况，即oldObject == current，但是oldObject.getPropertyA != current.getPropertyA。&lt;br&gt;这时候，AtomicStampedReference就派上用场了。这也是一个很常用的思路，即加上版本号&lt;/p&gt;
&lt;h3 id=&quot;Lock类&quot;&gt;&lt;a href=&quot;#Lock类&quot; class=&quot;headerlink&quot; title=&quot;Lock类&quot;&gt;&lt;/a&gt;Lock类&lt;/h3&gt;&lt;p&gt;lock: 在java.util.concurrent包内。共有三个实现：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ReentrantLock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReentrantReadWriteLock.ReadLock&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReentrantReadWriteLock.WriteLock&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;主要目的是和synchronized一样， 两者都是为了解决同步问题，处理资源争端而产生的技术。功能类似但有一些区别。&lt;/p&gt;
&lt;p&gt;lock更灵活，可以自由定义多把锁的枷锁解锁顺序（synchronized要按照先加的后解顺序）&lt;br&gt;提供多种加锁方案，lock 阻塞式, trylock 无阻塞式, lockInterruptily 可打断式， 还有trylock的带超时时间版本。&lt;br&gt;本质上和监视器锁（即synchronized是一样的）&lt;br&gt;能力越大，责任越大，必须控制好加锁和解锁，否则会导致灾难。&lt;br&gt;和Condition类的结合。&lt;/p&gt;
&lt;h3 id=&quot;容器类&quot;&gt;&lt;a href=&quot;#容器类&quot; class=&quot;headerlink&quot; title=&quot;容器类&quot;&gt;&lt;/a&gt;容器类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;BlockingQueue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;阻塞队列。该类是java.util.concurrent包下的重要类，通过对Queue的学习可以得知，这个queue是单向队列，可以在队列头添加元素和在队尾删除或取出元素。类似于一个管　　道，特别适用于先进先出策略的一些应用场景。普通的queue接口主要实现有PriorityQueue（优先队列），有兴趣可以研究&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ConcurrentHashMap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;高效的线程安全哈希map。请对比hashTable , concurrentHashMap, HashMap&lt;/p&gt;
&lt;h3 id=&quot;管理类&quot;&gt;&lt;a href=&quot;#管理类&quot; class=&quot;headerlink&quot; title=&quot;管理类&quot;&gt;&lt;/a&gt;管理类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ThreadPoolExecutor&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/wxd0108/p/5479442.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java中的多线程你只要看这一篇就够了&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/lwbqqyumidi/p/3804883.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java总结篇系列：Java多线程（一）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/column/details/concurrency.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java并发编程系列&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;多线程可以减轻系统性能方面的瓶颈，提高CPU的处理器的效率，在多线程中，通过优先级管理，可以使重要的程序优先操作，提高了任务管理的灵活性；另一方面，在多CPU系统中，可以把不同的线程在不同的CPU中执行，真正做到同时处理多任务。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://czhzero.com/categories/Java/"/>
    
    
      <category term="多线程" scheme="http://czhzero.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>新年开篇 | 总结一个技术总监的教训和经验</title>
    <link href="http://czhzero.com/2017/01/09/technical-director-experience/"/>
    <id>http://czhzero.com/2017/01/09/technical-director-experience/</id>
    <published>2017-01-09T03:09:03.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;本文系腾讯Bugly独家内容，转载请在文章开头显眼处注明作者和出处“腾讯Bugly(&lt;a href=&quot;http://bugly.qq.com)”&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bugly.qq.com)”&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;2017年来了，新年开篇，就不跟大家聊技术啦，给大家分享一篇鹅厂技术总监在多年工作中总结出的教训和经验。&lt;/p&gt;
&lt;p&gt;这篇文章自从在腾讯内部论坛发表后，精神哥每年都会拿出来重新研读一番，每次都有新的感悟和收获，所以强烈推荐给大家。&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h2&gt;&lt;p&gt;资深程序员是团队中最强大的生产力，但往往被不合理的工作安排浪费掉。因此作为一个团队的技术的“头”，必须要有明确清晰的认识，把主要的事务性工作剥离出来，并且放弃大量的管理“权力”，以提高团队开发质量和效率为最主要的目标去安排自己的工作。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般来说技术总监其实会被要求做事实上是2个职位的工作：主程、项目经理（技术化）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此必须明确此两个职位的工作任务分割，然后把项目经理的工作，安排给另外一个人做。当然其职称可能同样也得叫“技术总监”或“主程”，总之听起来越牛X越好。而真正的主程（技术总监）则应该投身于尽量多的技术工作中，其中最重要的工作则是开发———生产代码和文档。&lt;/p&gt;
&lt;h2 id=&quot;主程的工作&quot;&gt;&lt;a href=&quot;#主程的工作&quot; class=&quot;headerlink&quot; title=&quot;主程的工作&quot;&gt;&lt;/a&gt;主程的工作&lt;/h2&gt;&lt;h3 id=&quot;一、开发&quot;&gt;&lt;a href=&quot;#一、开发&quot; class=&quot;headerlink&quot; title=&quot;一、开发&quot;&gt;&lt;/a&gt;一、开发&lt;/h3&gt;&lt;p&gt;从来没有一个资深的外科医生会放下手术刀，而转到手术室外面指手画脚。一个资深的程序员也不应该离开代码和文档的编写，而只是做做架构图。作为对一个复杂系统的负责人，必须亲手领导和参与建造，才能有足够的能力去负担起这个责任。因此需要至少使用60%的时间来参与开发的工作，并且建议从一开始上班就开始，虽然早上的效率很低，但是跟任何艰巨工作都一样：万事开头难。&lt;/p&gt;
&lt;p&gt;在你好不容易等待电脑慢吞吞的打开了所有的IDE、需求文档、参考资料、工作计划这堆要命的东西之后，你就迈出了最重要的一步，你会发现你不在需要在网上看微博和聊QQ来提振开始工作的激情，而会被某一个优化代码的灵感而激励，或者被一个复杂而有趣的问题所吸引，从而更快的能投入到开发中。坚持打开电脑做的第一件事是打开IDE软件，是这一切最重要的一步。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%281%29&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;开发的工作内容包括：&lt;/p&gt;
&lt;h4 id=&quot;1-提出非功能性需求&quot;&gt;&lt;a href=&quot;#1-提出非功能性需求&quot; class=&quot;headerlink&quot; title=&quot;1.提出非功能性需求&quot;&gt;&lt;/a&gt;1.提出非功能性需求&lt;/h4&gt;&lt;p&gt;一般来说功能需求总是让开发人员焦头烂额的主要原因。但实际上，很多项目死在发布之后，却是因为性能、产品质量、扩展性、二次开发效率等非功能性需求没认真去解决而导致的。&lt;/p&gt;
&lt;p&gt;主程作为经验最丰富的成员，必须要利用自己曾经的经验和教训（在这里教训往往比经验重要），提出那些自己折腾自己的“非功能性需求”，来保障整个项目在发布后不会轰然倒塌。&lt;/p&gt;
&lt;p&gt;这是个吃力不讨好的工作，因为老板和客户往往只会抱怨技术人员在玩弄把戏，骗取更多的资源或者杞人忧天。如何说服这些家伙也许不是主程的工作，但是主程必须要以高度的责任心把问题放到台面上来。沟通的工作也许让项目经理去做会更好，他们有一整套如何威逼利诱老板和客户的戏法。&lt;/p&gt;
&lt;p&gt;非功能性需求中，其中有三类：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;性能需求&lt;/p&gt;
&lt;p&gt;运维需求&lt;/p&gt;
&lt;p&gt;开发效率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;性能需求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最好的性能需求实际上所有没有需求，因为性能优化往往错的。特别是有一定经验的开发人员，更容易产生“执念”。经验不是特别丰富，而又热爱学习的开发者，往往对很多网上的所谓文章、经验没有太多的识别能力，又缺乏动手实际测试的机会，所以道听途说先入为主的观念也是非常多的。这些观念里面最多的就是关于性能的，先不论所谓优化性能的各种说法，就是推荐各种高性能框架、库的文章也很多。这个时候，拨开纷繁的信息迷雾的人，就只能靠主程了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运维需求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运维需求的目标是尽量自动化，这里除了最基本的批量启动、停止、重载静态数据（配置）外，还应该包括自动读取本地IP地址，以及自动下载配置文件来启动；等待所有用户退出后才停止的“安全退出”；自动检查进程停止后重启等等功能。&lt;/p&gt;
&lt;p&gt;但是运维的工具也要避免过度设计。很多人往往一想到搞运维工具，就想搞一个功能非常大而全，具备漂亮的WEB界面的大平台。实际上真正救命的往往是一些自动化的小型工具，只有这些小工具和小功能都齐备了，耐心额漂亮界面的平台系统真正有意义。所以这主要依赖于经验，但也需要有想象力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发效率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发效率的需求一般都在代码结构上，而这是最容易产生争吵的地方。实际上所谓的代码结构，是对业务领域抽象的一种表现形式，所以对业务领域的理解能力和经验是第一位的。如何抽象好业务领域的模型，不能照搬别人的经验，但也不能完全靠自己想象。需要自己对业务领域做深入思考，同时也多学习了解其他项目的模型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%282%29&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一般来说，比较底层的技术模型，作为开发人员，都是非常熟悉的。比如UNIX系统把所有东西都抽象成文件。而大量的开源项目，作为通用的技术产品，对于比较技术层面的抽象，也都非常优秀。但是，作为业务逻辑开发人员，是绝对不应该被这些模型所困住的，因为我们要解决的问题，并不是去写一个操作系统，或者某个开源框架，而是具体的某一个领域的问题。只有真正深入的去了解业务领域，才能很好的抽象业务领域的模型。&lt;/p&gt;
&lt;p&gt;也就是说，如果你是开发游戏的，就要深入的理解游戏产品的概念；如果你是开发电商产品的，就要对商业贸易有深入理解，否则是不配作这些产品的开发领导人的。我们有一些技术人员，并不愿意去深入业务领域做理解，而是希望把所有的业务问题，都抽象成他自己最拿手的某一种技术模型，这样反而是会严重影响开发效率的。&lt;/p&gt;
&lt;p&gt;比如说有的人，喜欢把所有的业务逻辑，都看成是一种“输入数据结构”和“输出数据结构”的处理管道，不管写什么程序，都是同样一套类似的代码结构，就是“读输入-解包-处理-写输出”。尽管这样一定可以完成所有的需求，但是其代码结构并不能应对真正的需求变化，开发效率也一定是低的。真正的主程，就是应该在这个时候，挺身而出提出自己的抽象模型，从而带动整个团队，提高开发效率，同时也做好应对需求变化的准备。&lt;/p&gt;
&lt;h4 id=&quot;2-设计和修正软件架构&quot;&gt;&lt;a href=&quot;#2-设计和修正软件架构&quot; class=&quot;headerlink&quot; title=&quot;2. 设计和修正软件架构&quot;&gt;&lt;/a&gt;2. 设计和修正软件架构&lt;/h4&gt;&lt;p&gt;软件架构设计至关重要，而且工作繁重。不画图纸就敢开工的技术人员要么是天才要么是笨蛋。对于团队来说，架构在分工合作、避免风险、提高质量等多个方面有无可替代的作用。&lt;/p&gt;
&lt;p&gt;架构要避免成为空洞的文档，最重要的一步是有人来掌控和实施。而主程主持设计和修正的架构，并且亲手实施，让团队中的腹诽之徒完全无法避开，否则代码将无法运行！所谓设计和修正架构，并不意味所有的文档应该一个人写，而是指这个架构的每个环节，都是经过主程决策同意的。当然最好这些文档能尽量由他撰写，对于“菜鸟”团队来说，输出这种文档本身就意味着“权势”，有助于主程建立个人威信——这种看起来有点肮脏的“政治”东西，在避免团队内无止境的扯皮，以及稳定那些随时准备跳槽的成员来说，都是相当实用的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%283%29&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;很多软件架构只有运行时架构，没有代码架构，这是非常可惜的。&lt;/strong&gt; 诚然，我们要关注系统的运行效率，运行时架构（进程结构图）是必不可少的。然而，代码架构是更加稳定的设计方案，因为在必定会发生的需求变更下，进程结构往往也会因此变化。代码的结构是对需求的抽象和描述，这种描述是对业务需求的理解，业务需求小的变化非常多，而大的方向却往往不会变化很频繁，因此如果能基于这些大的方向来组织代码，划分模块，那些繁复的小需求，仅仅是对系统局部的修改，而不会影响过多的其他部分；反之，如果我们没有整体的视野去组织代码和模块，仅仅从一开始的细节需求去组织进程代码，一定会因为需求变化而把整个系统改的乱七八糟。&lt;/p&gt;
&lt;p&gt;所以，作为主程或技术总监，把控代码结构，往往比把控进程结构更为重要。同样的代码可以组织到不同的进程内来启动，如果进程结构不适应性能需求，还是可以优化的。但反过来就行不通了，一个混乱的代码结构，不管你怎么去用进程结构调整，还是会问题百出。&lt;/p&gt;
&lt;h4 id=&quot;3-难点代码（关键需求）的开发&quot;&gt;&lt;a href=&quot;#3-难点代码（关键需求）的开发&quot; class=&quot;headerlink&quot; title=&quot;3.难点代码（关键需求）的开发&quot;&gt;&lt;/a&gt;3.难点代码（关键需求）的开发&lt;/h4&gt;&lt;p&gt;主程必须写代码，写那些大家都认为风险大的代码。&lt;/p&gt;
&lt;p&gt;有的系统对于性能要求很高，他就必须去完成容易出性能问题的部分。比如IO操作或者设计数据库索引。有些系统的需求非常飘忽，他就要去想办法完成框架代码或者脚本引擎，以便众多小弟可以跟着产品人员疲于奔命。这种工作内容会让主程不必完全的读过所有代码，而能牢牢的“掌握”代码，以免团队成员甩耙子的时候能充当备胎。因为融入团队的代码开发，也是一个让架构设计从日常工作中真正控制系统的工作。而且主程代码通常会被别人接触，能直接教育其他团队成员，同时也能建立——威信。&lt;/p&gt;
&lt;p&gt;在大公司中，由于团队成员普遍素质比较高，所以都这部分的需求会比较少。但是还是有一些部分的代码，应该亲自操刀。如果不能对最核心的实现模块下手，起码也应该对客户使用界面有一定的编码经验。&lt;/p&gt;
&lt;p&gt;比如游戏开发中，某个比较复杂的业务逻辑脚本；在发行的产品或库中，编写针对用户演示用的DEMO等等……。究其原因，是因为客户是最重要的，而领导者起码应该直接参与面对客户的部分。店长不迎宾，厂长不进车间，事情是绝对做不好的。&lt;/p&gt;
&lt;p&gt;而中小型公司里面，如果编码工作还是放给别人做，到头来还是给自己找麻烦。因为小型公司人力本来就紧张，而质量低下的代码，造成的故障和BUG，会更加消耗不多的时间成本。自己做的越多，项目成功的几率就会越大。&lt;/p&gt;
&lt;h4 id=&quot;4-救火和杀虫&quot;&gt;&lt;a href=&quot;#4-救火和杀虫&quot; class=&quot;headerlink&quot; title=&quot;4.救火和杀虫&quot;&gt;&lt;/a&gt;4.救火和杀虫&lt;/h4&gt;&lt;p&gt;这个工作其实和代码开发是一致的，如果没有平日的开发，通常紧急问题的解决也是比较难处理的。但是这个也有一个调试技巧的要求，比如要求会使用各种诊断工具。这些工具一般的开发人员可能会比较少使用。找问题的过程本身也可以提高团队其他人的技术水平。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%284%29&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;二、培训&quot;&gt;&lt;a href=&quot;#二、培训&quot; class=&quot;headerlink&quot; title=&quot;二、培训&quot;&gt;&lt;/a&gt;二、培训&lt;/h3&gt;&lt;p&gt;培训的工作应该占用30%左右的工作时间。培训是稳定团队人员最重要的手段。也是提高团队开发效率最有效的手段。工具、过程、制度、奖惩，这些都代替不了程序员一行行的去写代码，最直接的方法是让他们做的更快更好，这些需要经验和知识的积累。&lt;/p&gt;
&lt;h4 id=&quot;1-代码审查&quot;&gt;&lt;a href=&quot;#1-代码审查&quot; class=&quot;headerlink&quot; title=&quot;1.代码审查&quot;&gt;&lt;/a&gt;1.代码审查&lt;/h4&gt;&lt;p&gt;关于代码审查，有太多的论述。但是代码审查还是一种“强迫”推行某种风格或者技巧的手段，这是最真实的“控制”系统的手段。也是推广知识和经验最直接的手段。一个人写的代码通常应对的问题不会特别“广泛”，因此只要审查其中一部分代码，就能给大部分别的代码带来好处。&lt;/p&gt;
&lt;p&gt;代码审查的实施，应该有一定的基础。需要代码作者进行问题描述、代码结构的讲解。而且也需要作者自己来挑选重点代码段。主程序员应该指出自己关心的重点代码应该符合什么特征。&lt;/p&gt;
&lt;h4 id=&quot;2-技术方案评审&quot;&gt;&lt;a href=&quot;#2-技术方案评审&quot; class=&quot;headerlink&quot; title=&quot;2.技术方案评审&quot;&gt;&lt;/a&gt;2.技术方案评审&lt;/h4&gt;&lt;p&gt;什么事情应该写一个技术方案，然后进行评审，这是一个关键的问题。一般认为开发时间在2周以上的单项工作应该先做个方案。往往技术方案是系统架构的完善和补充，或者是挑战。所以主程的参与是非常必要的。但是要注意不需要去做的太琐碎，而是要提炼出“关键”的需求和“关键”的解决方案进行评审，而这些“关键”往往不是功能，而是质量上的需求，如这个系统的扩展性，是否能方便后续开发等等。也有可能在这些会议上会发生争吵，但是决策人是主程的地位是不容动摇的。君子和而不同，每个程序员都可以拥有自己的看法，但是代码必须能按方案运行起来，主程必须经常申明这点。&lt;/p&gt;
&lt;p&gt;技术方案在差距较大的团队中评审，一般来说可以视为一种培训；而在水平相当的团队中评审，可能会变成各自想法的争执。不同的项目经历，绝对会造成意见的大分歧。其实这就是所谓“非功能需求”没有被明确出来造成的。这个时候主程就应该履行自己的义务，去提炼争论中的“非功能需求”，然后做出决断。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%285%29&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-学习与讲座&quot;&gt;&lt;a href=&quot;#3-学习与讲座&quot; class=&quot;headerlink&quot; title=&quot;3.学习与讲座&quot;&gt;&lt;/a&gt;3.学习与讲座&lt;/h4&gt;&lt;p&gt;如果团队碰到问题，没有新的方法和技术去解决，是不会提高开发效率的。就好像你用牛来耕地，不管用什么管理方法，都不会赶上机械化的速度。而主程承担着不断突破自己的技术上限，介绍和推动团队使用更新的技术来解决问题的责任。抱残守缺，思想僵化，最后会被团队成员所抛弃，而且也会让团队的效能落后于业界，最后直接影响产品的生死。每年学一门新语言，这个说法可能有点激进，但是这也是作为程序员应该有的激情。&lt;/p&gt;
&lt;h3 id=&quot;三、管理&quot;&gt;&lt;a href=&quot;#三、管理&quot; class=&quot;headerlink&quot; title=&quot;三、管理&quot;&gt;&lt;/a&gt;三、管理&lt;/h3&gt;&lt;p&gt;管理等于权势？管理等于沟通？管理等于文山会海？多年专业训练出来的技术人员如何去做管理？&lt;/p&gt;
&lt;p&gt;管理的目标是提高绩效，如果和这个目标无关，而只是和“管理者”这个头衔有关的事情，最好丢给别人去做，包括那个头衔。管理主要手段是创新：想出新的方法去解决问题，而不是繁杂的事务性工作！——一个专业秘书能比主程做的好一百倍。技术工作的创新，最主要还是在技术工作里面，而不是跳出来说：做这个，做那个。&lt;/p&gt;
&lt;p&gt;管理的事情如果超过10%的工作时间，等于说你更像一个项目经理而非主程。&lt;/p&gt;
&lt;h4 id=&quot;1-绩效评定&quot;&gt;&lt;a href=&quot;#1-绩效评定&quot; class=&quot;headerlink&quot; title=&quot;1.绩效评定&quot;&gt;&lt;/a&gt;1.绩效评定&lt;/h4&gt;&lt;p&gt;以专业的意见来衡量别人的工作，这个负担是无人能够承担的。这个工作往往是利益分配的一种手段。类似奖惩手段。这种管理方法已经不是新事物了。但是实际上技术人员对于绩效往往持一定保留和暧昧的态度，因为这种事情难以很清晰的界定出来。需要判断而非量度，才是绩效的真正手段。如果一定要打分，一共两项足够了：进度、质量，5分制即可。更重要的事情是，告诉每个人主程的看法，告诉别人，怎样做才是更好。或者告诉团队，怎样做才更有利于我们成功（发财、上市、赢得老板和客户……）——把目标清晰告诉团队，发挥他们的主动性，是绩效评定最重要的目标。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%286%29&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;KPI是一个争论非常多的话题，技术人员的KPI的争议更多。&lt;/p&gt;
&lt;p&gt;关于KPI，有几个观点是必须明确的：&lt;/p&gt;
&lt;p&gt;难以量化的东西，就不要强行量化；&lt;br&gt;KPI应该以任务是否有去做完为标志，而不是做到的效果为标志；&lt;br&gt;分解和设计KPI是一个非常需要承担风险的工作，基本上等于提出实际的工作方案。&lt;br&gt;以上三点，是互为结合的。技术工作的质量很难量化，或者指导性不强，还不如以工作的数量为标准，指导性反而更强。&lt;/p&gt;
&lt;p&gt;那么要怎么设置这些工作任务的数量呢？&lt;/p&gt;
&lt;p&gt;应该去设计一些能“保证质量”的工作任务，作为必须要完成的工作数量。那么，问题就更进一步了，要设置些什么样的工作，才能作为指标？这就需要技术总监根据自己的经验和智慧，提出切实可行的方案去要求下属完成，而不是把需求简单的分切后丢给下属去自行了断。&lt;/p&gt;
&lt;p&gt;举个例子，有一个部门的业务逻辑开发任务很重，由于需求多变化快，代码质量难以监督，所以各种性能和逻辑故障都层出不穷。如果你只是设置了BUG的数量和需求完成数量作为指标，靠这种KPI是难以推动真正的改进的。反过来，如果你对需求实现模块，设置了必须要完成的单元测试任务指标，设置了运行质量监控系统的开发指标。如果部门完成了这些事情，项目的质量和进度自然就会有提高。——但是这些措施是否真的能奏效，这就是作为技术总监必须自己承担的决策风险。&lt;/p&gt;
&lt;h4 id=&quot;2-需求评定&quot;&gt;&lt;a href=&quot;#2-需求评定&quot; class=&quot;headerlink&quot; title=&quot;2.需求评定&quot;&gt;&lt;/a&gt;2.需求评定&lt;/h4&gt;&lt;p&gt;最让技术人员头疼的可能就是和客户谈判。这个事情实际上不应该让技术人员来伤心，有项目经理就可以了。而需求评定更多的是可行性的讨论。主程如果参加每个需求评定，他要三头六臂也搞不定，正确的做法应该是具体开发的团队人员参加，而主程在开会前给与自己的意见，或者会后听取参与者的总结。——这是了解别人做什么事的一个重要手段，但无需陷入太深，因为还有代码评审和项目经理的帮忙。&lt;/p&gt;
&lt;h4 id=&quot;3-跨部门沟通&quot;&gt;&lt;a href=&quot;#3-跨部门沟通&quot; class=&quot;headerlink&quot; title=&quot;3.跨部门沟通&quot;&gt;&lt;/a&gt;3.跨部门沟通&lt;/h4&gt;&lt;p&gt;实在没必要参加，能躲就躲，这是扯皮的天堂。让项目经理去吧，他们的专业技巧能让这些事情更加有效。只要回来后让项目经理告诉你发生了什么事情就可以了。&lt;/p&gt;
&lt;h4 id=&quot;4-进度审核和任务分派&quot;&gt;&lt;a href=&quot;#4-进度审核和任务分派&quot; class=&quot;headerlink&quot; title=&quot;4.进度审核和任务分派&quot;&gt;&lt;/a&gt;4.进度审核和任务分派&lt;/h4&gt;&lt;p&gt;又是一个很有“权势”的工作，实际上团队成员的情况大家都知道，决定谁应该做什么事情并非需要很多时间去想的事情。所以大可以把方向性的意见告诉项目经理，让他去做。很多优秀的开发者玩EXCELPROJECT之类的水平还不如只有一年工作经验的秘书，别折腾自己了。&lt;/p&gt;
&lt;h4 id=&quot;5-面试&quot;&gt;&lt;a href=&quot;#5-面试&quot; class=&quot;headerlink&quot; title=&quot;5.面试&quot;&gt;&lt;/a&gt;5.面试&lt;/h4&gt;&lt;p&gt;如果真想帮忙，准备一份有区分度的笔试题目吧。不靠谱的人太多，老板可不是花钱请你和他们聊天的。让项目经理去聊，不用担心他们技术不强，再不够，也会比大多数面试者要牛X。他们搞不定的人，就是应该雇佣的家伙。毕业生招聘怎么办？只要看看他们课外活动是不是有搞些专业的事情就可以了，上进心比别的东西都重要，HR会比主程看的更准，相信我。&lt;/p&gt;
&lt;h4 id=&quot;6-各种会议&quot;&gt;&lt;a href=&quot;#6-各种会议&quot; class=&quot;headerlink&quot; title=&quot;6.各种会议&quot;&gt;&lt;/a&gt;6.各种会议&lt;/h4&gt;&lt;p&gt;饭无好饭，会无好会，超过6个人的会议应该坚决抵制。如果你有一个程序等着你去写，你一定无比痛恨这些会议，顺应你的内心吧！上帝保佑你。&lt;/p&gt;
&lt;h2 id=&quot;最后说说项目经理的工作&quot;&gt;&lt;a href=&quot;#最后说说项目经理的工作&quot; class=&quot;headerlink&quot; title=&quot;最后说说项目经理的工作&quot;&gt;&lt;/a&gt;最后说说项目经理的工作&lt;/h2&gt;&lt;p&gt;项目经理就像下水道的清洁工，所有那些主程不愿意去做的事情，他们都弯下腰去认真的把玩，实在是太伟大了。既然如此，为何不让他们拥有更好一点的头衔呢？如果没有他们去处理这些工作，任何一个主程都会被逼疯掉，或者他们自己变成了项目经理，让团队损失了最强力的一台代码发动机。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%287%29&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在一些公司，有专门的项目经理的岗位，这无疑是幸福的，但也是不幸的。因为项目经理本身是一种既需要专业性，也需要通用技能的岗位。项目经理由于专业定义不清晰，导致了大量的误解，这就是不幸的原因。有的团队会说我们不需要项目经理，又有的团队会认为项目经理无比重要，这两种观点的争论一直没有平息过。因此比较实际的做法是，不要轻易的去评价“是否需要项目经理”，而是努力把工作细分，专业化，然后再看应该安排谁去做。不同的项目和不同的团队，也许项目经理的工作都是不同的。&lt;/p&gt;
&lt;p&gt;根据经验，项目经理大概的工作内容方向包含以下这些：&lt;/p&gt;
&lt;h3 id=&quot;一、进度&quot;&gt;&lt;a href=&quot;#一、进度&quot; class=&quot;headerlink&quot; title=&quot;一、进度&quot;&gt;&lt;/a&gt;一、进度&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;指定工作计划&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进度检查和进度延迟的预警&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;工作总结和统计&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;二、资源&quot;&gt;&lt;a href=&quot;#二、资源&quot; class=&quot;headerlink&quot; title=&quot;二、资源&quot;&gt;&lt;/a&gt;二、资源&lt;/h3&gt;&lt;p&gt;整合提供各种资源，如找DBA，IT，运维人员，硬件，SVN权限，测试环境，福利，周末的活动……&lt;br&gt;面试：人员是最重要的资源，不是吗？&lt;br&gt;资源谈判：往往是和老板谈判，让别人明白现在的真实情况。又一个吃力不讨好的差事，但是总需要人做。&lt;/p&gt;
&lt;h3 id=&quot;三、沟通&quot;&gt;&lt;a href=&quot;#三、沟通&quot; class=&quot;headerlink&quot; title=&quot;三、沟通&quot;&gt;&lt;/a&gt;三、沟通&lt;/h3&gt;&lt;p&gt;需求评审：和需求方讨价还价，项目经理真是命苦啊……&lt;br&gt;组织会议或者用其他方式通知信息给所有人：小喇叭、大喇叭、全服广播、世界频道……&lt;br&gt;总结&lt;/p&gt;
&lt;p&gt;对于一个小型公司，职权，头衔，收益，往往会更加敏感。但是这些都不是让项目失败的理由。一颗叫程序员的种子说：长大了我就是叫管理者的树。这个错误的观念只会让这个种子永远无法发芽。软件开发是类似外科医生的行业，而不是血汗工厂，所以不需要手持皮鞭的经理，而需要仁心仁术的神医。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/018/640&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="深度文摘" scheme="http://czhzero.com/categories/%E6%B7%B1%E5%BA%A6%E6%96%87%E6%91%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Git 基础命令操作指引</title>
    <link href="http://czhzero.com/2016/12/26/git-basic-kill/"/>
    <id>http://czhzero.com/2016/12/26/git-basic-kill/</id>
    <published>2016-12-26T12:05:34.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;Git是一个分布式版本管理系统，是为了更好地管理Linux内核开发而创立的。Git与Svn相比，不光有远程代码库，也有本地代码库，方便多人协作。&lt;/p&gt;
&lt;p&gt;另外，Git中分支的活用，也极大的方便了开发人员开发过程中的多版本同时开发。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/016/Git-start3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Git-初始化项目&quot;&gt;&lt;a href=&quot;#Git-初始化项目&quot; class=&quot;headerlink&quot; title=&quot;Git 初始化项目&quot;&gt;&lt;/a&gt;Git 初始化项目&lt;/h1&gt;&lt;h2 id=&quot;Create-a-new-repository&quot;&gt;&lt;a href=&quot;#Create-a-new-repository&quot; class=&quot;headerlink&quot; title=&quot;Create a new repository&quot;&gt;&lt;/a&gt;Create a new repository&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone git@*******/test.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;quot;add README&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push -u origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Existing-folder-or-Git-repository&quot;&gt;&lt;a href=&quot;#Existing-folder-or-Git-repository&quot; class=&quot;headerlink&quot; title=&quot;Existing folder or Git repository&quot;&gt;&lt;/a&gt;Existing folder or Git repository&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd existing_folder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin git@@*******/test.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Git-参数配置&quot;&gt;&lt;a href=&quot;#Git-参数配置&quot; class=&quot;headerlink&quot; title=&quot;Git 参数配置&quot;&gt;&lt;/a&gt;Git 参数配置&lt;/h1&gt;&lt;h2 id=&quot;config-配置文件位置&quot;&gt;&lt;a href=&quot;#config-配置文件位置&quot; class=&quot;headerlink&quot; title=&quot;config 配置文件位置&quot;&gt;&lt;/a&gt;config 配置文件位置&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;All User : /etc/gitconfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Current User : ~/.gitconfig&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;config-查看所有配置信息&quot;&gt;&lt;a href=&quot;#config-查看所有配置信息&quot; class=&quot;headerlink&quot; title=&quot;config 查看所有配置信息&quot;&gt;&lt;/a&gt;config 查看所有配置信息&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;config-设置基本用户信息&quot;&gt;&lt;a href=&quot;#config-设置基本用户信息&quot; class=&quot;headerlink&quot; title=&quot;config 设置基本用户信息&quot;&gt;&lt;/a&gt;config 设置基本用户信息&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.name &amp;quot;xxx&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git config --global user.email &amp;quot;xxxx@163.com&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;增加 &lt;code&gt;--global&lt;/code&gt; 表示该设置对当前系统登录用户生效，配置完成后，可以在&lt;code&gt;~/.gitconfig&lt;/code&gt;中查看结果。否则，表示只对当前git项目生效，在项目的&lt;code&gt;.git/config&lt;/code&gt;中查看结果。&lt;/p&gt;
&lt;h2 id=&quot;config-设置命令别名&quot;&gt;&lt;a href=&quot;#config-设置命令别名&quot; class=&quot;headerlink&quot; title=&quot;config 设置命令别名&quot;&gt;&lt;/a&gt;config 设置命令别名&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global alias.co checkout      //git co 代替 git checkout 命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global alias.ci commit	     //git ci 代替 git commit 命令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global alias.br branch        //git br 代替 git branch 命令&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;别名设置除了可以设置单个命令的缩写外，还可以结合options进行设置。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//git unstage 代替 git reset HEAD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global alias.unstage &amp;apos;reset HEAD&amp;apos;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//git last 代替 git log -l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global alias.last &amp;apos;log -1&amp;apos; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//git lg 代替 复杂的git log效果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global alias.lg &amp;quot;log --color --graph --pretty=format:&amp;apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;apos; --abbrev-commit&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;别名配置好了之后，如果通过&lt;code&gt;vi ~/.gitconfig&lt;/code&gt; 查看结果如下，修改配置文件，则可以修改别名设置效果。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[user]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = 你的姓名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        email = 你的邮箱&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[alias]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      st = status&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ci = commit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      br = branch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      co = checkout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      df = diff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      cp = cherry-pick&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      rb = &amp;quot;rebase -i HEAD~10&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      lg = &amp;quot;log --color --graph --pretty=format:&amp;apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;apos; --abbrev-commit&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Git-基础命令&quot;&gt;&lt;a href=&quot;#Git-基础命令&quot; class=&quot;headerlink&quot; title=&quot;Git 基础命令&quot;&gt;&lt;/a&gt;Git 基础命令&lt;/h1&gt;&lt;h2 id=&quot;git-status&quot;&gt;&lt;a href=&quot;#git-status&quot; class=&quot;headerlink&quot; title=&quot;git status&quot;&gt;&lt;/a&gt;git status&lt;/h2&gt;&lt;p&gt;查看git仓库文件状态, git文件状态如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/016/Git-start6.png&quot; alt=&quot;git文件状态&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;unstaged - git仓库中没有此文件的相关记录 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;modified - git仓库中有这个文件的记录，且此文件当前有改动 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;staged - 变更的文件被暂存,没有提交到仓库 (git add命令之后)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commited - 文件被提交到本地git仓库 (git commit之后)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-log&quot;&gt;&lt;a href=&quot;#git-log&quot; class=&quot;headerlink&quot; title=&quot;git log&quot;&gt;&lt;/a&gt;git log&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git log             #查看历史commit记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git log -1          #查看最近一个commit记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-add&quot;&gt;&lt;a href=&quot;#git-add&quot; class=&quot;headerlink&quot; title=&quot;git add&quot;&gt;&lt;/a&gt;git add&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add file/fileDir         #modified或unstaged的文件转换为staged状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add -A/--all             #modified或unstaged的所有文件转换为staged状态&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-rm&quot;&gt;&lt;a href=&quot;#git-rm&quot; class=&quot;headerlink&quot; title=&quot;git rm&quot;&gt;&lt;/a&gt;git rm&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git rm test.java             #从git仓库删除test.java文件，同时删除本地文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git rm  --cache test.java    #从git仓库删除test.java文件，不删除本地文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-commit&quot;&gt;&lt;a href=&quot;#git-commit&quot; class=&quot;headerlink&quot; title=&quot;git commit&quot;&gt;&lt;/a&gt;git commit&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;quot;xxx comment&amp;quot;    #staged状态转换为commited状态&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-diff&quot;&gt;&lt;a href=&quot;#git-diff&quot; class=&quot;headerlink&quot; title=&quot;git diff&quot;&gt;&lt;/a&gt;git diff&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git diff                     #查看本次修改的所有文件的改动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git diff file-path           #查看本次修改的指定文件有哪些改动&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-pull&quot;&gt;&lt;a href=&quot;#git-pull&quot; class=&quot;headerlink&quot; title=&quot;git pull&quot;&gt;&lt;/a&gt;git pull&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git pull [remote-name branch-name]  #获取远程服务器数据,并同时与本地数据合并(可能会出现冲突)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-fetch&quot;&gt;&lt;a href=&quot;#git-fetch&quot; class=&quot;headerlink&quot; title=&quot;git fetch&quot;&gt;&lt;/a&gt;git fetch&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git fetch [remote-name]     #(获取仓库的所有更新，但是不自动合并当前分支)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git fetch -p                #(获取仓库的所有更新，且自动删除不需要的分支，更新最新的分支下来)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-push&quot;&gt;&lt;a href=&quot;#git-push&quot; class=&quot;headerlink&quot; title=&quot;git push&quot;&gt;&lt;/a&gt;git push&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push [remote-name branch-name]         #上传数据到远程分支，若出现冲突，则上传失败。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push --force [remote-name branch-name] #强制上传数据到远程分支**，(覆盖远程数据，慎用)**&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-stash&quot;&gt;&lt;a href=&quot;#git-stash&quot; class=&quot;headerlink&quot; title=&quot;git stash&quot;&gt;&lt;/a&gt;git stash&lt;/h2&gt;&lt;p&gt;可用来暂存当前正在进行的工作，比commit简单，而且可以跨分支合并&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git stash                    #暂存更改的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash save &amp;quot;comment&amp;quot;     #暂存更改的内容,带注释&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash list               #显示所有暂存的内容 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git show stash@&amp;#123;0&amp;#125;           #显示指定stash的更改内容，类似于git diff &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash apply stash@&amp;#123;1&amp;#125;    #应用指定编号的stash, 但不从stash-list中清除&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash pop                #应用栈顶的stash,并从stash-list清除该记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash clear              #清除stash-list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git stash --help             #获取更多的信息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-tag&quot;&gt;&lt;a href=&quot;#git-tag&quot; class=&quot;headerlink&quot; title=&quot;git tag&quot;&gt;&lt;/a&gt;git tag&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git tag v1.01								        #增加新的tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git tag -a v1.01 -m &amp;quot;Relase version 1.01&amp;quot;    #增加新的tag -a 表示标签名称 -m 表示标签注释                      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git tag [-l]                                 # 查看所有标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin -tags                        # 推送tag到远程分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git tag -d v1.01	                            # 删除本地标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin :refs/tags/v1.01             # 删除远程标签&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;tag建立好了后，可以当做 commit-id使用，git reset的时候直接调到tag。&lt;/p&gt;
&lt;h1 id=&quot;Git-分支&quot;&gt;&lt;a href=&quot;#Git-分支&quot; class=&quot;headerlink&quot; title=&quot;Git 分支&quot;&gt;&lt;/a&gt;Git 分支&lt;/h1&gt;&lt;h2 id=&quot;git-branch&quot;&gt;&lt;a href=&quot;#git-branch&quot; class=&quot;headerlink&quot; title=&quot;git branch&quot;&gt;&lt;/a&gt;git branch&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git branch                  #查看本地分支列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch branch-name      #创建新分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -r               #查看远程分支列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -a               #查看所有分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -d branch-name   #删除指定分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git branch -D branch-name   #强制删除指定分支&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-checkout&quot;&gt;&lt;a href=&quot;#git-checkout&quot; class=&quot;headerlink&quot; title=&quot;git checkout&quot;&gt;&lt;/a&gt;git checkout&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout branch-name                         #切换到指定分支 (切换前记得先commit或者stash)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b new-branch-name                  #基于当前分支创建一个新分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -b branch-name origin/branch-name   #获取远程分支到本地 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout file-name                           #获取远程最新文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git checkout -- .                                #放弃本地所有的modify文件改动&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;add-remote-branch&quot;&gt;&lt;a href=&quot;#add-remote-branch&quot; class=&quot;headerlink&quot; title=&quot;add remote branch&quot;&gt;&lt;/a&gt;add remote branch&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1.git checkout branch-name              #切换到要上传的分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.git remote add origin branch-name     #添加远程分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3.git push origin branch-name            #推送数据到远程分支 (自动创建分支，step2可省去)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;delete-remote-branch&quot;&gt;&lt;a href=&quot;#delete-remote-branch&quot; class=&quot;headerlink&quot; title=&quot;delete remote branch&quot;&gt;&lt;/a&gt;delete remote branch&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git push origin :remote-branch         #删除指定远程分支&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Git-分支合并&quot;&gt;&lt;a href=&quot;#Git-分支合并&quot; class=&quot;headerlink&quot; title=&quot;Git 分支合并&quot;&gt;&lt;/a&gt;Git 分支合并&lt;/h1&gt;&lt;h2 id=&quot;git-merge&quot;&gt;&lt;a href=&quot;#git-merge&quot; class=&quot;headerlink&quot; title=&quot;git merge&quot;&gt;&lt;/a&gt;git merge&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. git merge branch-name                 #合并指定分支内容到当前分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. git add -A                            #手动解决冲突后,重新暂存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. git commit -m &amp;quot;xxx 解决冲突&amp;quot;           #再次提交&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有些情况下我们需要优先选择使用 &lt;code&gt;git merge --squash branch-name&lt;/code&gt;&lt;br&gt;–squash选项的含义是：本地文件内容与不使用该选项的合并结果相同，&lt;br&gt;但是不提交、不移动HEAD，因此需要一条额外的commit命令。&lt;br&gt;其效果相当于将another分支上的多个commit合并成一个，放在当前分支上，原来的commit历史则没有拿过来。&lt;br&gt;判断是否使用–squash选项最根本的标准是，待合并分支上的历史是否有意义。&lt;br&gt;如果在开发分支上提交非常随意，甚至写成微博体，那么一定要使用–squash选项。&lt;/p&gt;
&lt;h2 id=&quot;git-rebase&quot;&gt;&lt;a href=&quot;#git-rebase&quot; class=&quot;headerlink&quot; title=&quot;git rebase&quot;&gt;&lt;/a&gt;git rebase&lt;/h2&gt;&lt;p&gt;使用rebase合并代码可以使提交的历史记录显得更简洁&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. git rebase target-branch-name         #合并目标分支内容到当前所在分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. git add -A                            #手动解决冲突后, 重新暂存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. git rebase -- abort                   #放弃rebase操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. git rebase -- continue                #解决冲突后，继续rebase操作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;暂时取消刚才的合并 (只能回退一个合并的commit)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard HEAD~&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-cherry-pick&quot;&gt;&lt;a href=&quot;#git-cherry-pick&quot; class=&quot;headerlink&quot; title=&quot;git cherry-pick&quot;&gt;&lt;/a&gt;git cherry-pick&lt;/h2&gt;&lt;p&gt;挑选指定的commit-id,一个一个合并，合并速度慢了点，但是合并效果最好。 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1. git cherry-pick commit-id         #合并指定commit到当前分支&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. git add -A                        #手动解决冲突后, 重新暂存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. git cherry-pick -- continue       #继续刚才的pick操作，这一步容易忘记&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. git cherry-pick -- abort          #放弃cherry-pick操作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;解决自动合并失败的冲突&quot;&gt;&lt;a href=&quot;#解决自动合并失败的冲突&quot; class=&quot;headerlink&quot; title=&quot;解决自动合并失败的冲突&quot;&gt;&lt;/a&gt;解决自动合并失败的冲突&lt;/h2&gt;&lt;p&gt;由于在同一行进行了修改，合并时候，产生了冲突。内容格式如下显示，然后根据实际需要解决冲突。&lt;/p&gt;
&lt;p&gt;冲突解决完成后，先使用 &lt;code&gt;git add -A&lt;/code&gt; ，然后根据合并命令，执行&lt;code&gt;git cherry-pick --continue&lt;/code&gt;&lt;br&gt;或者 &lt;code&gt;git rebase --continue&lt;/code&gt;命令。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;冲突内容一&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=======&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;冲突内容二&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; commit-id&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Git-修改与撤销&quot;&gt;&lt;a href=&quot;#Git-修改与撤销&quot; class=&quot;headerlink&quot; title=&quot;Git 修改与撤销&quot;&gt;&lt;/a&gt;Git 修改与撤销&lt;/h1&gt;&lt;h2 id=&quot;git-commit-–amend&quot;&gt;&lt;a href=&quot;#git-commit-–amend&quot; class=&quot;headerlink&quot; title=&quot;git commit –amend&quot;&gt;&lt;/a&gt;git commit –amend&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git commit --amend   #编辑工具会显示最近一次提交的提交消息，用来修改消息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-reset&quot;&gt;&lt;a href=&quot;#git-reset&quot; class=&quot;headerlink&quot; title=&quot;git reset&quot;&gt;&lt;/a&gt;git reset&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset HEAD file          #将文件从staged转换为unstaged&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset HEAD .             #将所有文件从staged转换为unstaged&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --mixed commit-id  #默认方式，回退到指定个版本，只保留源码，回退commit和index信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --soft commit-id   #回退到某个版本，只回退了commit的信息，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             #不会恢复到index file级。如果还要提交，直接commit即可   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git reset --hard commit-id   #彻底回退到某个版本，本地的源码也会变为上一个版本的内容&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-revert&quot;&gt;&lt;a href=&quot;#git-revert&quot; class=&quot;headerlink&quot; title=&quot;git revert&quot;&gt;&lt;/a&gt;git revert&lt;/h2&gt;&lt;p&gt;git revert 是生成一个新的提交来撤销某次提交，此次提交之前的commit都会被保留&lt;br&gt;git reset 是回到某次提交，提交及之前的commit都会被保留，但是此次之后的修改都会被退回到暂存区&lt;/p&gt;
&lt;p&gt;具体一个例子，假设有三个commit， &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;commit3: add test3.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit2: add test2.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit1: add test1.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当执行&lt;code&gt;git revert HEAD~1&lt;/code&gt;时， commit2被撤销了, 运行&lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;revert &amp;quot;commit2&amp;quot;:this reverts commit 5fe21s2...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit3: add test3.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit2: add test2.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit1: add test1.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行&lt;code&gt;git status&lt;/code&gt;， 没有任何暂存。&lt;/p&gt;
&lt;p&gt;如果换做执行&lt;code&gt;git reset --soft(默认) HEAD~1&lt;/code&gt;后，运行&lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;commit2: add test2.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit1: add test1.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行&lt;code&gt;git status&lt;/code&gt;， 其中 &lt;code&gt;test3.md&lt;/code&gt; 处于暂存区，准备提交。&lt;/p&gt;
&lt;p&gt;再如果换做执行&lt;code&gt;git reset --hard HEAD~1&lt;/code&gt;后,&lt;/p&gt;
&lt;p&gt;显示：&lt;code&gt;HEAD is now at commit2&lt;/code&gt;，运行&lt;code&gt;git log&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;commit2: add test2.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;commit1: add test1.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行&lt;code&gt;git status&lt;/code&gt;， 没有任何暂存。&lt;/p&gt;
&lt;p&gt;另外：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git revert &amp;lt;commit-id&amp;gt;&lt;/code&gt; 是撤消该commit，作为一个新的commit。&lt;/p&gt;
&lt;h2 id=&quot;git-rebase-1&quot;&gt;&lt;a href=&quot;#git-rebase-1&quot; class=&quot;headerlink&quot; title=&quot;git rebase&quot;&gt;&lt;/a&gt;git rebase&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(1) git rebase -i commit-id   #在vi编辑器中，显示commit-id到最新的所有commit记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2) git rebase -i HEAD~10     #在vi编辑器中，显示最新10条commit记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(3) 在vi编辑器中, 修改commit内容, wq保存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(4) git add -A                #解决冲突后，暂存文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(5) git rebase --continue     #完成未完成rebase操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(6) git rebase --abort        #完成未完成rebase操作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假定vim编辑器的初始内容如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pick 8e5da5f test-comment-1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-3 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick dcc8310 test-comment-4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;git常见的几种操作方式，都是通过vim编辑器来实现的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scene1 ： 修改commit的message内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改vim内容结果如下，然后保存。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 修改commit内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 8e5da5f test-comment-1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r 627a433 修改后的内容 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick dcc8310 test-comment-4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Scene2 ：删除指定commit的提交内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改vim内容结果如下，然后保存。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# commit-id删除 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 8e5da5f test-comment-1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick dcc8310 test-comment-4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Scene3 ：调换指定commit的提交顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改vim内容结果如下，然后保存。若有冲突，先解决冲突，&lt;br&gt;然后使用&lt;code&gt;git add -A&lt;/code&gt;添加，再使用&lt;code&gt;git rebase --continue&lt;/code&gt;继续。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 调换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 8e5da5f test-comment-1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-3 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick dcc8310 test-comment-4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Scene4 ：合并指定的两个commit的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改vim内容结果如下，然后保存, 若有冲突，先解决冲突，&lt;br&gt;然后使用&lt;code&gt;git add -A&lt;/code&gt;添加，再使用&lt;code&gt;git rebase --continue&lt;/code&gt;继续。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# commit-id 3 与 4合并&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 8e5da5f test-comment-1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pick 627a433 test-comment-3 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s dcc8310 test-comment-4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;git-reflog&quot;&gt;&lt;a href=&quot;#git-reflog&quot; class=&quot;headerlink&quot; title=&quot;git reflog&quot;&gt;&lt;/a&gt;git reflog&lt;/h2&gt;&lt;p&gt;  显示所有过去commit历史，可使用&lt;code&gt;git reset --hard&lt;/code&gt;命令跳转到指定commit-id位置，&lt;br&gt;  用来恢复某些的误操作。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Git是一个分布式版本管理系统，是为了更好地管理Linux内核开发而创立的。Git与Svn相比，不光有远程代码库，也有本地代码库，方便多人协作。&lt;/p&gt;
&lt;p&gt;另外，Git中分支的活用，也极大的方便了开发人员开发过程中的多版本同时开发。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/016/Git-start3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://czhzero.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://czhzero.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Java中String数据类型转换与format总结</title>
    <link href="http://czhzero.com/2016/12/23/java-value-format-and-converter/"/>
    <id>http://czhzero.com/2016/12/23/java-value-format-and-converter/</id>
    <published>2016-12-23T02:10:48.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;Java中的String类型与List,数组等格式在日常工作中，经常需要进行相互转换，本文总结了几种常见的格式转换与format例子。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-List-与-String数组&quot;&gt;&lt;a href=&quot;#1-List-与-String数组&quot; class=&quot;headerlink&quot; title=&quot;1. List 与 String数组&quot;&gt;&lt;/a&gt;1. List&lt;string&gt; 与 String数组&lt;/string&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;List&lt;string&gt;转String数组&lt;/string&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ArrayList list = new ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list.add(&amp;quot;aaa&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list.add(&amp;quot;bbb&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String[] arrString = (String[]) list.toArray(new String[list.size()]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;String数组转List&lt;string&gt;&lt;/string&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String[] s = &amp;#123;&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;5&amp;quot;, &amp;quot;6&amp;quot;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; listA = Arrays.asList(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;listA.add(3, &amp;quot;4&amp;quot;);     //java.lang.UnsupportedOperationException异常&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ArrayList&amp;lt;String&amp;gt; listB = new ArrayList&amp;lt;&amp;gt;(listA);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;listB.add(3, &amp;quot;4&amp;quot;);       //正确&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Arrays.asList() 返回的是 &lt;code&gt;java.util.Arrays.ArrayList&lt;/code&gt; 而不是 &lt;code&gt;java.util.ArrayList&lt;/code&gt; ,&lt;br&gt;这两个类同名，都继承了AbstractList，&lt;br&gt;但是前者并未实现add,remove等方法，所有要进行增删操作，必须先转换成真正的 &lt;code&gt;java.util.ArrayList&lt;/code&gt;,&lt;br&gt;否则会报&lt;code&gt;java.lang.UnsupportedOperationException异常&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-String-数组-与-String&quot;&gt;&lt;a href=&quot;#2-String-数组-与-String&quot; class=&quot;headerlink&quot; title=&quot;2. String[]数组 与 String&quot;&gt;&lt;/a&gt;2. String[]数组 与 String&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;String[]数组转String&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String[] s = &amp;#123;&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String str = Arrays.toString(s);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;String转String[]数组&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String str = &amp;quot;1,2,3,4&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String[] s = str.split(&amp;quot;,&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-List-与-String&quot;&gt;&lt;a href=&quot;#3-List-与-String&quot; class=&quot;headerlink&quot; title=&quot;3. List 与 String&quot;&gt;&lt;/a&gt;3. List&lt;string&gt; 与 String&lt;/string&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;List&lt;string&gt;转String&lt;/string&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String str = listA.toString();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;String转List&lt;string&gt;&lt;/string&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;String先转换成String数组，再转成List&lt;string&gt;。&lt;/string&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-String-与-数值类型互转&quot;&gt;&lt;a href=&quot;#4-String-与-数值类型互转&quot; class=&quot;headerlink&quot; title=&quot;4.String 与 数值类型互转&quot;&gt;&lt;/a&gt;4.String 与 数值类型互转&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;String转int&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int i = Integer.parseInt(&amp;quot;1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int j = Integer.valueOf(&amp;quot;2&amp;quot;).intValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int k = Integer.valueOf(&amp;quot;3&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;字串转成 Double, Float, Long 的方法大同小异。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;int转String&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String a = String.valueOf(1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String b = Integer.toString(2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String c = &amp;quot;&amp;quot; + 3;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Double, Float, Long 转成字串的方法大同小异。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;5-String-format格式化&quot;&gt;&lt;a href=&quot;#5-String-format格式化&quot; class=&quot;headerlink&quot; title=&quot;5. String.format格式化&quot;&gt;&lt;/a&gt;5. String.format格式化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;整数格式format&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int d = Integer.parseInt(&amp;quot;99099&amp;quot;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(d);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//格式化为整形型字符串  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%d&amp;quot;,d));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//整数长度为7，如果不到7位就用0填充  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%07d&amp;quot;,9909));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%07d&amp;quot;,99099999));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//长度不满7就用空格填充  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;% 7d&amp;quot;,9909));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//使用,对数字分组  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%,d&amp;quot;,9909999));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//显示正负数  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%+d&amp;quot;,d));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%+d&amp;quot;,-345));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;小数点格式format&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;double d = Double.parseDouble(&amp;quot;9909999999.9999&amp;quot;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(d);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//格式化为浮点型字符串  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%f&amp;quot;,d));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//整数部分全部显示，小数部分后面保留5位小数  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%.5f&amp;quot;,d));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//使用,对数字分组  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%,f&amp;quot;,d));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//显示正负数  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%+f&amp;quot;,d));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%+f&amp;quot;,-345.98));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//算小数点后面的位数一起时15  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%015f&amp;quot;,345.98));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//小数点后面保留三位小数  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(String.format(&amp;quot;%015.3f&amp;quot;,345.98));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了用&lt;code&gt;String.format&lt;/code&gt;之外还有些其他方法。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//方法一&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java.text.DecimalFormat df = new java.text.DecimalFormat(&amp;quot;#.##&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double d = 3.14159;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(df.format(d));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//方法二&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BigDecimal bd = new BigDecimal(&amp;quot;3.14159265&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bd = bd.setScale(2, BigDecimal.ROUND_HALF_UP);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//方法三&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double value = 1234.5678;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long l1 = Math.round(value * 100);   //四舍五入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double result = l1 / 100.0;          //注意：使用100.0而不是100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//方法四&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double value = 1234.5678;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value = ((int) (value * 100)) / 100.0;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;时间格式format&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Date now = new Date();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;全部日期和时间信息:&amp;quot;+String.format(&amp;quot;%tc&amp;quot;, now));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;年-月-日格式：&amp;quot;+String.format(&amp;quot;%tF&amp;quot;, now));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;月/日/年格式:&amp;quot;+String.format(&amp;quot;%tD&amp;quot;, now));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;HH:MM :&amp;quot;+String.format(&amp;quot;%tR&amp;quot;, now));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;HH:MM:SS PM格式（12时制）：&amp;quot;+String.format(&amp;quot;%tr&amp;quot;, now));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;HH:MM:SS格式（24时制）:&amp;quot;+String.format(&amp;quot;%tT&amp;quot;, now));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://hbiao68.iteye.com/blog/1769053&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;String.format格式化&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://irobot.iteye.com/blog/285537&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java中取小数点后两位(四种方法)&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Java中的String类型与List,数组等格式在日常工作中，经常需要进行相互转换，本文总结了几种常见的格式转换与format例子。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://czhzero.com/categories/Java/"/>
    
    
      <category term="formatter" scheme="http://czhzero.com/tags/formatter/"/>
    
  </entry>
  
  <entry>
    <title>如何在Android7.0系统下通过Intent安装apk</title>
    <link href="http://czhzero.com/2016/12/21/how-to-install-apk-on-Android7-0/"/>
    <id>http://czhzero.com/2016/12/21/how-to-install-apk-on-Android7-0/</id>
    <published>2016-12-21T02:14:49.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt; Android系统升级到7.0之后，安全性提高了不少，过去我们通常是使用这样的代码进行apk的安装操作。&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(Intent.ACTION_VIEW);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.setDataAndType(Uri.fromFile(apkFile), &amp;quot;application/vnd.android.package-archive&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.startActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 但是在Android7.0的系统上，运行这段代码，会报如下错误。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caused by: android.os.FileUriExposedException&lt;/p&gt;
&lt;/blockquote&gt;
 &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;原因是，安卓官方为了提高私有文件的安全性，面向 Android 7.0 或更高版本的应用私有目录被限制访问　(0700)。此设置可防止私有文件的元数据泄漏，如它们的大小或存在性.&lt;/p&gt;
&lt;p&gt;传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 &lt;a href=&quot;https://developer.android.google.cn/reference/android/support/v4/content/FileProvider.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FileProvider&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;1-定义一个FileProvider&quot;&gt;&lt;a href=&quot;#1-定义一个FileProvider&quot; class=&quot;headerlink&quot; title=&quot;1.定义一个FileProvider&quot;&gt;&lt;/a&gt;1.定义一个FileProvider&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;manifest&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;application&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;provider&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:name=&amp;quot;android.support.v4.content.FileProvider&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:authorities=&amp;quot;com.mydomain.fileprovider&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:exported=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            android:grantUriPermissions=&amp;quot;true&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;/provider&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/application&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-添加可用权限的文件目录&quot;&gt;&lt;a href=&quot;#2-添加可用权限的文件目录&quot; class=&quot;headerlink&quot; title=&quot;2.添加可用权限的文件目录&quot;&gt;&lt;/a&gt;2.添加可用权限的文件目录&lt;/h2&gt;&lt;p&gt;在res目录下，增加xml文件夹，并新建一个名为 &lt;code&gt;file_paths.xml&lt;/code&gt; 的文件。文件内容格式如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;paths xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   		&amp;lt;files-path name=&amp;quot;name1&amp;quot; path=&amp;quot;test1&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/paths&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;path&gt;&lt;/path&gt;标签下面必须包含至少包含以下标签中的一个或者多个。&lt;/p&gt;
&lt;h3 id=&quot;files-path&quot;&gt;&lt;a href=&quot;#files-path&quot; class=&quot;headerlink&quot; title=&quot;files-path&quot;&gt;&lt;/a&gt;files-path&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;files-path name=&amp;quot;name1&amp;quot; path=&amp;quot;test1&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示Context.getFilesDir()目录或者其子目录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 : /data/data/com.chen.gradle/files/test1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;cache-path&quot;&gt;&lt;a href=&quot;#cache-path&quot; class=&quot;headerlink&quot; title=&quot;cache-path&quot;&gt;&lt;/a&gt;cache-path&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;cache-path name=&amp;quot;name2&amp;quot; path=&amp;quot;test2&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示Context.getCacheDir()目录或者其子目录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 : /data/data/com.chen.gradle/cache/test2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;external-path&quot;&gt;&lt;a href=&quot;#external-path&quot; class=&quot;headerlink&quot; title=&quot;external-path&quot;&gt;&lt;/a&gt;external-path&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;external-path name=&amp;quot;name3&amp;quot; path=&amp;quot;test3&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示Environment.getExternalStorageDirectory()目录或者其子目录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 : /storage/emulated/0/test3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;external-files-path&quot;&gt;&lt;a href=&quot;#external-files-path&quot; class=&quot;headerlink&quot; title=&quot;external-files-path&quot;&gt;&lt;/a&gt;external-files-path&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;external-files-path name=&amp;quot;name4&amp;quot; path=&amp;quot;test4&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示Context.getExternalFilesDir(null)目录或者其子目录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 : /storage/emulated/0/Android/data/com.chen.gradle/files/test4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;external-cache-path&quot;&gt;&lt;a href=&quot;#external-cache-path&quot; class=&quot;headerlink&quot; title=&quot;external-cache-path&quot;&gt;&lt;/a&gt;external-cache-path&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;external-cache-path name=&amp;quot;name5&amp;quot; path=&amp;quot;test5&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示Context.getExternalCacheDir()目录或者其子目录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 : /storage/emulated/0/Android/data/com.chen.gradle/cache/test5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;3-增加到provider&quot;&gt;&lt;a href=&quot;#3-增加到provider&quot; class=&quot;headerlink&quot; title=&quot;3.增加到provider&quot;&gt;&lt;/a&gt;3.增加&lt;path&gt;&lt;/path&gt;到provider&lt;/h2&gt;&lt;p&gt;通过&lt;code&gt;&amp;lt;meta-data&amp;gt;&lt;/code&gt;标签将上面的filepath添加到provider当中。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;provider&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:name=&amp;quot;android.support.v4.content.FileProvider&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:authorities=&amp;quot;com.mydomain.fileprovider&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:exported=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android:grantUriPermissions=&amp;quot;true&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;meta-data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:name=&amp;quot;android.support.FILE_PROVIDER_PATHS&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android:resource=&amp;quot;@xml/file_paths&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/provider&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-通过provider生成Uri&quot;&gt;&lt;a href=&quot;#4-通过provider生成Uri&quot; class=&quot;headerlink&quot; title=&quot;4.通过provider生成Uri&quot;&gt;&lt;/a&gt;4.通过provider生成Uri&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File imagePath = new File(Context.getFilesDir(), &amp;quot;test1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File newFile = new File(imagePath, &amp;quot;default_image.jpg&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Uri contentUri = FileProvider.getUriForFile(getContext(), &amp;quot;com.mydomain.fileprovider&amp;quot;, newFile);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;5-赋予临时权限给Uri&quot;&gt;&lt;a href=&quot;#5-赋予临时权限给Uri&quot; class=&quot;headerlink&quot; title=&quot;5.赋予临时权限给Uri&quot;&gt;&lt;/a&gt;5.赋予临时权限给Uri&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终安装apk的代码变成这样:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static void installApk(Context context, String apkPath) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (context == null || TextUtils.isEmpty(apkPath)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    File file = new File(apkPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Intent intent = new Intent(Intent.ACTION_VIEW);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //判读版本是否在7.0以上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (Build.VERSION.SDK_INT &amp;gt;= 24) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //provider authorities&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Uri apkUri = FileProvider.getUriForFile(context, &amp;quot;com.mydomain.fileprovider&amp;quot;, file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //Granting Temporary Permissions to a URI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        intent.setDataAndType(apkUri, &amp;quot;application/vnd.android.package-archive&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        intent.setDataAndType(Uri.fromFile(file), &amp;quot;application/vnd.android.package-archive&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context.startActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 7.0 行为变更&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt; Android系统升级到7.0之后，安全性提高了不少，过去我们通常是使用这样的代码进行apk的安装操作。&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = new Intent(Intent.ACTION_VIEW);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.setDataAndType(Uri.fromFile(apkFile), &amp;quot;application/vnd.android.package-archive&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.startActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 但是在Android7.0的系统上，运行这段代码，会报如下错误。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Caused by: android.os.FileUriExposedException&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="android7.0" scheme="http://czhzero.com/tags/android7-0/"/>
    
  </entry>
  
  <entry>
    <title>RecycleView实现Android树形列表控件</title>
    <link href="http://czhzero.com/2016/12/07/treeview/"/>
    <id>http://czhzero.com/2016/12/07/treeview/</id>
    <published>2016-12-07T12:07:24.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要通过RecycleView实现了任意层次的树形ListView。实现的主要原理是通过保存两份List数据，一份是完整数据，一份是当前展开的数据来实现。再通过点击事件，控制展开数据的内容。同时也可根据需要选择模式，来支持单选和各种多选效果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/czhzero/MultipleTreeView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TreeView项目地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;TreeView-Demo预览&quot;&gt;&lt;a href=&quot;#TreeView-Demo预览&quot; class=&quot;headerlink&quot; title=&quot;TreeView Demo预览&quot;&gt;&lt;/a&gt;TreeView Demo预览&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/015/device-2016-12-07-201436.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;TreeView主要源码解析&quot;&gt;&lt;a href=&quot;#TreeView主要源码解析&quot; class=&quot;headerlink&quot; title=&quot;TreeView主要源码解析&quot;&gt;&lt;/a&gt;TreeView主要源码解析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Node.java&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Node&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public final static int TREE_LEAF = 0;  //树叶节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public final static int TREE_NODE = 1;  //普通节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点Id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private String id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 父节点Id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private String pId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点类型, 0为树叶节点, 1为普通节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private int type;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点级别, 根节点level = 0，子节点依次+1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private int level;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 父Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private Node&amp;lt;T&amp;gt; parent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 下一级的子Node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private List&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt; children;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 是否展开&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private boolean isExpanded;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 是否被选中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private boolean isChecked;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private String label;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点信息其他内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private T content;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点前面的Icon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private int headDrawableId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 节点选中的Icon&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private int checkDrawableId;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public Node(String id, String pid, String name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       this.id = id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       this.pId = pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ... 省略get set 方法&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TreeRecyclerView.java&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TreeRecyclerView extends FrameLayout &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static int MODE_SINGLE_SELECT = 1;        //单选模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static int MODE_MULTI_SELECT = 2;         //无限制，多选模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static int MODE_DEPEND_SELECT = 3;        //父子节点不可同选，多选模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static int MODE_CLICK_SELECT = 4;         //选中跳转模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private RecyclerView mRecyclerView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private TreeRecyclerAdapter mAdapter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public TreeRecyclerView(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        initView(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public TreeRecyclerView(Context context, AttributeSet attrs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context, attrs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        initView(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public TreeRecyclerView(Context context, AttributeSet attrs, int defStyleAttr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(context, attrs, defStyleAttr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        initView(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void initView(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRecyclerView = new RecyclerView(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRecyclerView.setLayoutManager(new LinearLayoutManager(context));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addView(mRecyclerView, lp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAdapter = new TreeRecyclerAdapter&amp;lt;&amp;gt;(mRecyclerView.getContext());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 初始化树形折叠控件数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * T 类型 示例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * public static class TestModel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @NodeId public String id;                    //必填字段&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @NodeName public String name;                  //必填字段&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @NodeLabel public String label;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @NodePid public String parentId;              //父节点id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @NodeChild public List&amp;lt;TestModel&amp;gt; child;        //child用来表示层级关系, child为空，则表示叶子节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * others&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public &amp;lt;T&amp;gt; void setData(List&amp;lt;T&amp;gt; list, int mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ArrayList&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt; nodeList = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            nodeList = NodeDataConverter.convertToNodeList(list);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (IllegalAccessException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setMode(mode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAdapter.addAllData(nodeList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRecyclerView.setAdapter(mAdapter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 设置点击事件, MODE_CLICK_SELECT模式下需要使用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setOnItemClickListener(OnNodeItemClickListener listener) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAdapter.setOnItemClickListener(listener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 获取选中的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param &amp;lt;T&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public &amp;lt;T&amp;gt; void getSelectedItems(List&amp;lt;T&amp;gt; list) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAdapter.getSelectedItems(list);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 设置折叠控件的选择模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param mode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void setMode(int mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mode != MODE_SINGLE_SELECT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; mode != MODE_MULTI_SELECT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; mode != MODE_DEPEND_SELECT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; mode != MODE_CLICK_SELECT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mAdapter.setMode(mode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;TreeRecyclerAdapter.java&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class TreeRecyclerAdapter&amp;lt;T&amp;gt; extends RecyclerView.Adapter&amp;lt;TreeBaseViewHolder&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private Context mContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private List&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt; mVisibleNodes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private List&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt; mRootNodes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private OnNodeItemClickListener mOnNodeItemClickListener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private int mSelectMode = TreeRecyclerView.MODE_SINGLE_SELECT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private OnNodeSwitchListener mOnNodeSwitchListener = new OnNodeSwitchListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public void onExpand(Node node, int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            NodeDataConverter.expandNode(NodeDataConverter.filterNodeById(node.getId(), mRootNodes));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rearrangeVisibleNodes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public void onShrink(Node node, int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            NodeDataConverter.shrinkNode(NodeDataConverter.filterNodeById(node.getId(), mRootNodes));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rearrangeVisibleNodes();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private OnNodeCheckListener mOnNodeCheckListener = new OnNodeCheckListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public void onCheck(boolean isChecked, int position, Node node) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (mOnNodeItemClickListener != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mOnNodeItemClickListener.onItemClick(node.getContent());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            NodeDataConverter.checkNode(node.getId(), isChecked, mSelectMode, mVisibleNodes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public TreeRecyclerAdapter(Context context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mContext = context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mVisibleNodes = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mRootNodes = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 填充数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param nodes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void addAllData(List&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt; nodes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (nodes != null &amp;amp;&amp;amp; !nodes.isEmpty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mRootNodes.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mRootNodes.addAll(nodes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (Node&amp;lt;T&amp;gt; item : nodes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            filterVisibleNodes(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 设置模式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param mode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setMode(int mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mSelectMode = mode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 设置点击事件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setOnItemClickListener(OnNodeItemClickListener listener) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mOnNodeItemClickListener = listener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 返回当前选择数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public &amp;lt;T&amp;gt; void getSelectedItems(List&amp;lt;T&amp;gt; list) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;Node&amp;lt;T&amp;gt;&amp;gt; resultNodeList = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (Node item : mRootNodes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resultNodeList.addAll(NodeDataConverter.filterCheckedNodeList(item));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (Node&amp;lt;T&amp;gt; item : resultNodeList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            list.add(item.getContent());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public TreeBaseViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        View view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        switch (viewType) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case Node.TREE_NODE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                view = LayoutInflater.from(mContext).inflate(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        R.layout.listitem_tree_node, parent, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return new TreeNodeViewHolder&amp;lt;T&amp;gt;(view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case Node.TREE_LEAF:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                view = LayoutInflater.from(mContext).inflate(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        R.layout.listitem_tree_leaf, parent, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return new TreeLeafViewHolder&amp;lt;T&amp;gt;(view);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onBindViewHolder(TreeBaseViewHolder holder, int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        switch (getItemViewType(position)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case Node.TREE_NODE:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                TreeNodeViewHolder&amp;lt;T&amp;gt; nodeViewHolder = (TreeNodeViewHolder&amp;lt;T&amp;gt;) holder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                nodeViewHolder.bindView(mVisibleNodes.get(position),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        position, mOnNodeSwitchListener, mOnNodeCheckListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            case Node.TREE_LEAF:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                TreeLeafViewHolder&amp;lt;T&amp;gt; leafViewHolder = (TreeLeafViewHolder&amp;lt;T&amp;gt;) holder;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                leafViewHolder.bindView(mVisibleNodes.get(position),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        position, mOnNodeCheckListener);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public int getItemCount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return mVisibleNodes.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public int getItemViewType(int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return mVisibleNodes.get(position).getType();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 根据visible属性，重新刷新，可视节点&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void rearrangeVisibleNodes() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (mRootNodes == null || mRootNodes.size() &amp;lt;= 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mVisibleNodes.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (Node&amp;lt;T&amp;gt; node : mRootNodes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            filterVisibleNodes(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        notifyDataSetChanged();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 将展开节点归结到可视节点中, 递归总是从根节点开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private void filterVisibleNodes(Node&amp;lt;T&amp;gt; node) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mVisibleNodes.add(node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (node.isExpanded()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (node.getChildren() != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                for (Node&amp;lt;T&amp;gt; item : node.getChildren()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    filterVisibleNodes(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Viewholder&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;TreeBaseViewHolder.java&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TreeBaseViewHolder extends RecyclerView.ViewHolder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   protected int mLevelMargin;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   protected TreeBaseViewHolder(View itemView) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       super(itemView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       mLevelMargin = 30;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   protected void setChecked(View view, boolean isChecked) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       if (isChecked) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           view.setVisibility(View.VISIBLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           view.setVisibility(View.GONE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;- TreeLeafViewHolder.java

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TreeLeafViewHolder&amp;lt;T&amp;gt; extends TreeBaseViewHolder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private RelativeLayout rl_content;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private TextView tv_name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private TextView tv_label;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private ImageView iv_checkbox;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public TreeLeafViewHolder(View itemView) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       super(itemView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       rl_content = (RelativeLayout) itemView.findViewById(R.id.rl_content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_name = (TextView) itemView.findViewById(R.id.tv_name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_label = (TextView) itemView.findViewById(R.id.tv_label);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       iv_checkbox = (ImageView) itemView.findViewById(R.id.iv_checkbox);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public void bindView(final Node&amp;lt;T&amp;gt; node,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        final int position,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        final OnNodeCheckListener onNodeCheckListener) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //根据节点层级，进行缩进处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       RecyclerView.LayoutParams params = (RecyclerView.LayoutParams)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               rl_content.getLayoutParams();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       params.leftMargin = mLevelMargin * node.getLevel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       rl_content.setLayoutParams(params);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //设置节点名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_name.setText(node.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //设置节点描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_label.setText(node.getLabel());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //设置节点选中状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       setChecked(iv_checkbox, node.isChecked());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       rl_content.setOnClickListener(new View.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           public void onClick(View v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               if (onNodeCheckListener != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   onNodeCheckListener.onCheck(!node.isChecked(), position, node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


- TreeNodeViewHolder.java

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TreeNodeViewHolder&amp;lt;T&amp;gt; extends TreeBaseViewHolder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private RelativeLayout rl_content;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private ImageView iv_icon;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private TextView tv_name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private TextView tv_label;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private ImageView iv_checkbox;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public TreeNodeViewHolder(View itemView) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       super(itemView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       rl_content = (RelativeLayout) itemView.findViewById(R.id.rl_content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_name = (TextView) itemView.findViewById(R.id.tv_name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       iv_icon = (ImageView) itemView.findViewById(R.id.iv_icon);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_label = (TextView) itemView.findViewById(R.id.tv_label);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       iv_checkbox = (ImageView) itemView.findViewById(R.id.iv_checkbox);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public void bindView(final Node&amp;lt;T&amp;gt; node,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        final int position,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        final OnNodeSwitchListener onNodeSwitchListener,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        final OnNodeCheckListener onNodeCheckListener) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //根据节点层级，进行缩进处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       RecyclerView.LayoutParams params = (RecyclerView.LayoutParams)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               rl_content.getLayoutParams();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       params.leftMargin = mLevelMargin * node.getLevel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       rl_content.setLayoutParams(params);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //设置节点名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_name.setText(node.getName());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //设置节点描述&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       tv_label.setText(node.getLabel());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //设置节点选中状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       setChecked(iv_checkbox, node.isChecked());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       //设置节点展开状态&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       setExpanded(iv_icon, node.isExpanded());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       iv_icon.setOnClickListener(new View.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           public void onClick(View v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               if (node.isExpanded()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   onNodeSwitchListener.onShrink(node, position);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   rotationExpandIcon(iv_icon, 0, -90);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   onNodeSwitchListener.onExpand(node, position);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   rotationExpandIcon(iv_icon, -90, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       rl_content.setOnClickListener(new View.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           public void onClick(View v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               if (onNodeCheckListener != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   onNodeCheckListener.onCheck(!node.isChecked(), position, node);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 设置展开图标效果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * @param view&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * @param isExpanded&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private void setExpanded(View view, boolean isExpanded) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       if (isExpanded) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           view.setRotation(0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           view.setRotation(-90);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 根据角度选择图标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * @param view&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * @param from&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * @param to&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private void rotationExpandIcon(final View view, final float from, final float to) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       if (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.HONEYCOMB) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           ValueAnimator valueAnimator = ValueAnimator.ofFloat(from, to);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           valueAnimator.setDuration(150);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           valueAnimator.setInterpolator(new DecelerateInterpolator());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               public void onAnimationUpdate(ValueAnimator valueAnimator) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   view.setRotation((Float) valueAnimator.getAnimatedValue());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           valueAnimator.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要通过RecycleView实现了任意层次的树形ListView。实现的主要原理是通过保存两份List数据，一份是完整数据，一份是当前展开的数据来实现。再通过点击事件，控制展开数据的内容。同时也可根据需要选择模式，来支持单选和各种多选效果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/czhzero/MultipleTreeView&quot;&gt;TreeView项目地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="treeview" scheme="http://czhzero.com/tags/treeview/"/>
    
  </entry>
  
  <entry>
    <title>Android删除文件&quot;Device or resource busy&quot;错误解决方案</title>
    <link href="http://czhzero.com/2016/12/02/android-deletefile/"/>
    <id>http://czhzero.com/2016/12/02/android-deletefile/</id>
    <published>2016-12-02T03:10:36.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;Android开发过程中，进行文件操作时，可以通过Java的File类进行文件删除，也可以通过向Runtime发送shell命令进行删除。&lt;/p&gt;
&lt;p&gt;当删除一个文件，再重新下载这个同名文件，保存到手机内存储时，可能会出现如下错误。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; EBUSY (Device or resource busy)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;检查sdcard存储，会发现下载目录下回出现一个时间为&lt;code&gt;1970-01-01&lt;/code&gt;的文件。在adb shell 下可以通过&lt;code&gt;ls&lt;/code&gt;命令查看到该文件，但是 执行 &lt;code&gt;ls -la&lt;/code&gt; 无法查看到该文件。&lt;/p&gt;
&lt;p&gt;尝试通过以下两种方法删除该文件，都无法删除该文件。通过一些android文件管理软件，也无法删除。 网上查阅资料，无法删除的原因是有进程在操作该文件，无法释放该文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一旦出现这种文件只有强行 &lt;code&gt;kill -9&lt;/code&gt; 或者 重启设备, 才能删除。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;通过File类删除&quot;&gt;&lt;a href=&quot;#通过File类删除&quot; class=&quot;headerlink&quot; title=&quot;通过File类删除&quot;&gt;&lt;/a&gt;通过File类删除&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;private static boolean deleteDir(File dir) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (dir.isDirectory()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String[] children = dir.list();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //递归删除&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i = 0; i &amp;lt; children.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            boolean success = deleteDir(new File(dir, children[i]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (!success) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 目录此时为空，可以删除&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return dir.delete();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;通过Shell命令删除&quot;&gt;&lt;a href=&quot;#通过Shell命令删除&quot; class=&quot;headerlink&quot; title=&quot;通过Shell命令删除&quot;&gt;&lt;/a&gt;通过Shell命令删除&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import android.util.Log;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.io.BufferedReader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.io.DataOutputStream;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.io.IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import java.io.InputStreamReader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Created by chenzhaohua on 16/12/1.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class CommandExecution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static final String TAG = &amp;quot;czh&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static String COMMAND_SU = &amp;quot;su&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static String COMMAND_SH = &amp;quot;sh&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static String COMMAND_EXIT = &amp;quot;exit\n&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public final static String COMMAND_LINE_END = &amp;quot;\n&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static class CommandResult &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public int result = -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public String errorMsg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public String successMsg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * excute single command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param command      &amp;quot;rm -rf /storage/emulated/legacy/Android/data/test&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param isRoot        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static CommandResult execCommand(String command, boolean isRoot) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String[] commands = &amp;#123;command&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return execCommand(commands, isRoot);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * excute multiple command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param commands&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param isRoot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static CommandResult execCommand(String[] commands, boolean isRoot) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CommandResult commandResult = new CommandResult();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (commands == null || commands.length == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return commandResult;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Process process = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DataOutputStream os = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BufferedReader successResult = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BufferedReader errorResult = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        StringBuilder successMsg = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        StringBuilder errorMsg = new StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            process = Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            os = new DataOutputStream(process.getOutputStream());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for (String command : commands) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (command != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    os.write(command.getBytes());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    os.writeBytes(COMMAND_LINE_END);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    os.flush();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            os.writeBytes(COMMAND_EXIT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            os.flush();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            commandResult.result = process.waitFor();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            successResult = new BufferedReader(new InputStreamReader(process.getInputStream()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            errorResult = new BufferedReader(new InputStreamReader(process.getErrorStream()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            while ((s = successResult.readLine()) != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                successMsg.append(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            while ((s = errorResult.readLine()) != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                errorMsg.append(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            commandResult.successMsg = successMsg.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            commandResult.errorMsg = errorMsg.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.i(TAG, commandResult.result + &amp;quot; | &amp;quot; + commandResult.successMsg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    + &amp;quot; | &amp;quot; + commandResult.errorMsg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String msg = e.getMessage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (msg != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Log.e(TAG, msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                //close stream&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (os != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    os.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (successResult != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    successResult.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (errorResult != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    errorResult.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (process != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    process.destroy();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; catch (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                String msg = e.getMessage();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if (msg != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Log.e(TAG, msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return commandResult;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;stackoverflow一种解决方案:先对要删除的文件进行重命名，然后再删除。这样删除过程中的文件锁就加在另一个文件上了，不会影响再次创建的过程。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;final File to = new File(file.getAbsolutePath() + System.currentTimeMillis());  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;file.renameTo(to);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;to.delete();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/11539657/open-failed-ebusy-device-or-resource-busy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;open-failed-ebusy-device-or-resource-busy&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android开发过程中，进行文件操作时，可以通过Java的File类进行文件删除，也可以通过向Runtime发送shell命令进行删除。&lt;/p&gt;
&lt;p&gt;当删除一个文件，再重新下载这个同名文件，保存到手机内存储时，可能会出现如下错误。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; EBUSY (Device or resource busy)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo加载vendor目录下js文件失败导致博客页面加载空白</title>
    <link href="http://czhzero.com/2016/11/16/hexo-js-loadingfailure/"/>
    <id>http://czhzero.com/2016/11/16/hexo-js-loadingfailure/</id>
    <published>2016-11-16T11:14:36.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;今天下午用hexo框架deploy一篇文章，发布完成后，发现网页无法打开了。出现了很多404错误。&lt;/p&gt;
&lt;p&gt;各种vender目录下的js加载都是失败的。本地部署是没有问题的，一旦上传到托管平台github或者coding后，就无法找到这些js文件。折腾了半天，网上搜资料才知道原来我的代码托管平台把vender目录禁止了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/014/jserror.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;网上有两种解决方案:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手动修改&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;首先修改source/vendors为source/lib，然后修改_config.yml，将 _internal: vendors修改为_internal:lib，然后修改next底下所有引用source/vendors路径为source/lib。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;这些地方可以通过文件查找找出来。主要集中在这几个文件中。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1. Hexo\themes\next.bowerrc &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. Hexo\themes\next.gitignore &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. Hexo\themes\next.javascript_ignore &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. Hexo\themes\next\bower.json 。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;更新next主题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;next新主题代码，已经将vender目录改为了lib目录，不过更新之前，要对自己的私人配置进行保存。&lt;/p&gt;
&lt;p&gt;参考文章: &lt;a href=&quot;https://www.zhihu.com/question/52272170/answer/129909383&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo+Github Page搭建的博客无法加载样式表？&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天下午用hexo框架deploy一篇文章，发布完成后，发现网页无法打开了。出现了很多404错误。&lt;/p&gt;
&lt;p&gt;各种vender目录下的js加载都是失败的。本地部署是没有问题的，一旦上传到托管平台github或者coding后，就无法找到这些js文件。折腾了半天，网上搜资料才知道原来我的代码托管平台把vender目录禁止了。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://czhzero.com/categories/Hexo/"/>
    
    
      <category term="javascript" scheme="http://czhzero.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio常用快捷键汇总</title>
    <link href="http://czhzero.com/2016/11/16/AndroidStudio-KeyboardKeymap/"/>
    <id>http://czhzero.com/2016/11/16/AndroidStudio-KeyboardKeymap/</id>
    <published>2016-11-16T06:24:28.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;Android Studio 是基于 IntelliJ IDEA 的官方 Android 应用开发集成开发环境 (IDE)。本篇总结了部分Android Studio常用的快捷键。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;普通补全代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用快捷键 &lt;code&gt;Control+Space&lt;/code&gt; 。显示对变量、类型、方法和表达式等的基本建议。 如果连续两次调用基本自动完成，将显示更多结果，包括私有成员和非导入静态成员。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;智能代码补全&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用快捷键 &lt;code&gt;Control+Shift+空格&lt;/code&gt; 。根据上下文显示相关选项。 智能自动完成可识别预期类型和数据流。 如果连续两次调用智能自动完成，将显示更多结果，包括链。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语句自动完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用快捷键 &lt;code&gt;Shift+Command+Enter&lt;/code&gt; 。 自动完成当前语句，添加缺失的圆括号、大括号、花括号和格式化等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行代码快速修复并显示建议的操作，用来补全代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用快捷键 &lt;code&gt;Alt+Enter&lt;/code&gt; 可以进行快速修复，补全代码。 例如:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//光标移动到OnClickListener处，执行快捷键补全。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;自动代码生成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 &lt;code&gt;Command + N&lt;/code&gt; 自动生成一些代码，如getters, setters, constructors, hashCode/equals, toString, override 等， 同时也包括一些自定义插件，如GsonFormat,Parcelable等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Override methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Control + O&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement methods&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Control + I&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除光标所在行的全部内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + Backspace&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展开或者关闭当前代码块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + minus/plus&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;展开或者关闭所有代码块&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + Shift + minus/plus&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复制选中的行内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + D&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跳转到代码声明处&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + B or Command + Click&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跳转到代码实现处&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + Alt + B&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跳转到超类，或者父方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + U&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;编译运行&quot;&gt;&lt;a href=&quot;#编译运行&quot; class=&quot;headerlink&quot; title=&quot;编译运行&quot;&gt;&lt;/a&gt;编译运行&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Build&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + F9&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build and run&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Control + R&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码重构&quot;&gt;&lt;a href=&quot;#代码重构&quot; class=&quot;headerlink&quot; title=&quot;代码重构&quot;&gt;&lt;/a&gt;代码重构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Extract method    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + Option + M&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract variable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + Option + V&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract field&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + Option + F&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract constant&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + Option + C&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract parameter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + Option + P&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;导航&quot;&gt;&lt;a href=&quot;#导航&quot; class=&quot;headerlink&quot; title=&quot;导航&quot;&gt;&lt;/a&gt;导航&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;查看最近访问文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用最近文件操作在最近访问的文件之间切换。按 Control+E（在 Mac 上，按 Command+E）调出“最近文件”操作。 默认情况下将选择最后一次访问的文件。 在此操作中您还可以通过左侧列访问任何工具窗口。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看当前文件的结构，快速定位具体代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用文件结构操作查看当前文件的结构。 按 Control+F12（在 Mac 上，按 Command+F12）调出“文件结构”操作。您可以使用此操作快速导航至当前文件的任何部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在项目中搜索指定类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用导航至类操作搜索并导航至项目中的特定类。 按 Control+N（在 Mac 上，按 Command+O）调出此操作。 “导航至类”支持复杂的表达式，包括驼峰、路径、直线导航和中间名匹配等。 如果连续两次调用此操作，将显示项目类以外的结果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在项目中搜索指定的文件或者文件夹&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用导航至文件操作导航至文件或文件夹。 按 Control+Shift+N（在 Mac 上，按 Command+Shift+O）调出“导航至文件”操作。要搜索文件夹，但不搜索文件，请在表达式末尾添加“/”。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find Usages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按 Alt+F7 查找引用当前光标位置处的类、方法、字段、参数或语句的所有代码片段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 &lt;code&gt;Command + F&lt;/code&gt; 搜当前文件的文本内容， 使用 &lt;code&gt;Command + Shift + F&lt;/code&gt; 搜索整个项目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目搜索并替换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 &lt;code&gt;Command + R&lt;/code&gt; 搜当前文件并替换， 使用 &lt;code&gt;Command + Shift + R&lt;/code&gt; 搜索并替换整个项目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jump to source    &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 &lt;code&gt;Command + 鼠标按下&lt;/code&gt; 跳转到代码部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Search everything&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;搜索所有东西，连续按两次Shift。搜索全项目所有文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跳转到上次更改的代码位置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + Shift + Backspace&lt;/code&gt; 跳转到上次更改的位置，不用拖动鼠标在找到之前的位置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跳转到指定代码行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + L&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open type hierarchy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Control + H&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open method hierarchy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + Shift + H&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open call hierarchy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Command + Shift + H&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;样式和格式化&quot;&gt;&lt;a href=&quot;#样式和格式化&quot; class=&quot;headerlink&quot; title=&quot;样式和格式化&quot;&gt;&lt;/a&gt;样式和格式化&lt;/h2&gt;&lt;p&gt;在您编辑时，Android Studio 将自动应用代码样式设置中指定的格式设置和样式。您可以通过编程语言自定义代码样式设置，包括指定选项卡和缩进、空格、换行、花括号以及空白行的约定。要自定义代码样式设置，请点击 File &amp;gt; Settings &amp;gt; Editor &amp;gt; Code Style（在 Mac 上，点击 Android Studio &amp;gt; Preferences &amp;gt; Editor &amp;gt; Code Style）。&lt;/p&gt;
&lt;p&gt;虽然 IDE 会在您工作时自动应用格式化，但您也可以通过按 Control+Alt+L（在 Mac 上，按 Opt+Command+L）显式调用重新格式化代码操作，或按 Control+Alt+I（在 Mac 上，按 Alt+Option+I*）自动缩进所有行。&lt;/p&gt;
&lt;h2 id=&quot;版本控制基础知识&quot;&gt;&lt;a href=&quot;#版本控制基础知识&quot; class=&quot;headerlink&quot; title=&quot;版本控制基础知识&quot;&gt;&lt;/a&gt;版本控制基础知识&lt;/h2&gt;&lt;p&gt;Android Studio 支持多个版本控制系统 (VCS)，包括 Git、GitHub、CVS、Mercurial、Subversion 和 Google Cloud Source Repositories。&lt;/p&gt;
&lt;p&gt;在将您的应用导入 Android Studio 后，使用 Android Studio VCS 菜单选项启用对所需版本控制系统的 VCS 支持、创建存储库、导入新文件至版本控制以及执行其他版本控制操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Android Studio VCS 菜单中点击 Enable Version Control Integration。&lt;/li&gt;
&lt;li&gt;从下拉菜单中选择要与项目根目录关联的版本控制系统，然后点击 OK。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此时，VCS 菜单将根据您选择的系统显示多个版本控制选项。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注： 您还可以使用 File &amp;gt; Settings &amp;gt; Version Control 菜单选项设置和修改版本控制设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多快捷键相关的请参考:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.android.com/studio/intro/keyboard-shortcuts.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Keyboard Shortcuts&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android Studio 是基于 IntelliJ IDEA 的官方 Android 应用开发集成开发环境 (IDE)。本篇总结了部分Android Studio常用的快捷键。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="Keymaps" scheme="http://czhzero.com/tags/Keymaps/"/>
    
  </entry>
  
  <entry>
    <title>快速分享Android Library项目到jcenter</title>
    <link href="http://czhzero.com/2016/10/24/how-to-upload-library-to-jcenter/"/>
    <id>http://czhzero.com/2016/10/24/how-to-upload-library-to-jcenter/</id>
    <published>2016-10-24T07:05:33.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;如果你想在Android Studio中引入一个library到你的项目，你只需添加如下的一行代码到模块的build.gradle文件中&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;org.chen.statusbar:statusbar:1.0.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;上面的例子中，引用的library内容，包含了3部分信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GROUP_ID:ARTIFACT_ID:VERSION&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其中，GROUP_ID是 &lt;code&gt;org.chen.statusbar&lt;/code&gt; , ARTIFACT_ID 是 &lt;code&gt;statusbar&lt;/code&gt;, VERSION是&lt;code&gt;1.0.0&lt;/code&gt;。添加这行代码后，点击Android Studio的sync按钮，你就可以在项目的 &lt;code&gt;External Libraries&lt;/code&gt; 目录下看到 &lt;code&gt;statusbar-1.0.0&lt;/code&gt; 这个Library包，并引用其中的代码了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/012/%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%872.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Android Studio是从build.gradle里面定义的Maven 仓库服务器上下载library的。Apache Maven是Apache开发的一个工具，提供了用于贡献library的文件服务器。总的来说，只有两个标准的Android library文件服务器：jcenter 和  Maven Central。随着Android Studio升级换代，目前默认Android Studio默认配置，只有jcenter了。推荐使用jcenter。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;allprojects &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么如何上传到jcenter呢？&lt;/p&gt;
&lt;h2 id=&quot;注册Bintray账号&quot;&gt;&lt;a href=&quot;#注册Bintray账号&quot; class=&quot;headerlink&quot; title=&quot;注册Bintray账号&quot;&gt;&lt;/a&gt;注册Bintray账号&lt;/h2&gt;&lt;p&gt;Bintray是jcenter的托管商, Bintray是jcenter的托管商，因此你必须注册一个Bintray账号，注册完成后，进入账户管理界面，记录下username 和 api_key。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/012/%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%871.png&quot; alt=&quot;账号密码&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在Bintray网站上，创建package&quot;&gt;&lt;a href=&quot;#在Bintray网站上，创建package&quot; class=&quot;headerlink&quot; title=&quot;在Bintray网站上，创建package&quot;&gt;&lt;/a&gt;在Bintray网站上，创建package&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;点击maven&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/012/%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%874.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add new package&lt;br&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/012/%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%875.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create Package&lt;br&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/012/%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%873.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意这里的Version control是必填的，所以在上传类库到bintray之前最好是把项目push到github上，这样就会很方便了。&lt;/p&gt;
&lt;h2 id=&quot;创建Android-Studio项目&quot;&gt;&lt;a href=&quot;#创建Android-Studio项目&quot; class=&quot;headerlink&quot; title=&quot;创建Android Studio项目&quot;&gt;&lt;/a&gt;创建Android Studio项目&lt;/h2&gt;&lt;p&gt;创建一个Android Studio项目， 并新建一个module模块， 如下图所示，我创建了一个名为statusbar的库, 用于上传。&lt;br&gt;这个library会被自动打包成aar文件，上传到jcenter。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/012/%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%876.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置项目根目录的build-gradle文件&quot;&gt;&lt;a href=&quot;#配置项目根目录的build-gradle文件&quot; class=&quot;headerlink&quot; title=&quot;配置项目根目录的build.gradle文件&quot;&gt;&lt;/a&gt;配置项目根目录的build.gradle文件&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Top-level build file where you can add configuration options common to all sub-projects/modules.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &amp;apos;com.android.tools.build:gradle:2.0.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // NOTE: Do not place your application dependencies here; they belong&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // in the individual module build.gradle files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 //增加两个插件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 //android-maven-gradle-plugin插件是用来打包Maven所需文件的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 //gradle-bintray-plugin插件是用来将生成的Maven所需文件上传到Bintray的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &amp;apos;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &amp;apos;com.github.dcendents:android-maven-gradle-plugin:1.3&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allprojects &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task clean(type: Delete) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    delete rootProject.buildDir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置待上传的Android-Library的gradle文件&quot;&gt;&lt;a href=&quot;#配置待上传的Android-Library的gradle文件&quot; class=&quot;headerlink&quot; title=&quot;配置待上传的Android Library的gradle文件&quot;&gt;&lt;/a&gt;配置待上传的Android Library的gradle文件&lt;/h2&gt;&lt;p&gt;在Android Library目录下需要增改如下几个文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;install.gradle&lt;br&gt;bintray.gradle&lt;br&gt;dependencies.gradle&lt;br&gt;build.gradle&lt;br&gt;local.properties&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;install-gradle&quot;&gt;&lt;a href=&quot;#install-gradle&quot; class=&quot;headerlink&quot; title=&quot;install.gradle&quot;&gt;&lt;/a&gt;install.gradle&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;com.github.dcendents.android-maven&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply from: &amp;apos;dependencies.gradle&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;group = publishedGroupId   // Maven Group ID for the artifact&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;install &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories.mavenInstaller &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // This generates POM.xml with proper parameters&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pom &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            project &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                packaging &amp;apos;aar&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                groupId publishedGroupId&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                artifactId artifact&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Add your description here&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                name libraryName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                description libraryDescription&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                url siteUrl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // Set your license&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                licenses &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    license &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        name licenseName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        url licenseUrl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                developers &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    developer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        id developerId&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        name developerName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        email developerEmail&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                scm &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    connection gitUrl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    developerConnection gitUrl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    url siteUrl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;bintray-gradle&quot;&gt;&lt;a href=&quot;#bintray-gradle&quot; class=&quot;headerlink&quot; title=&quot;bintray.gradle&quot;&gt;&lt;/a&gt;bintray.gradle&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;com.jfrog.bintray&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply from: &amp;apos;dependencies.gradle&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;version = libraryVersion&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (project.hasProperty(&amp;quot;android&amp;quot;)) &amp;#123; // Android libraries&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    task sourcesJar(type: Jar) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classifier = &amp;apos;sources&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        from android.sourceSets.main.java.srcDirs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    task javadoc(type: Javadoc) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        source = android.sourceSets.main.java.srcDirs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123; // Java libraries&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    task sourcesJar(type: Jar, dependsOn: classes) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classifier = &amp;apos;sources&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        from sourceSets.main.allSource&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task javadocJar(type: Jar, dependsOn: javadoc) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    classifier = &amp;apos;javadoc&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    from javadoc.destinationDir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;artifacts &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    archives javadocJar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    archives sourcesJar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Bintray&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Properties properties = new Properties()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;properties.load(project.rootProject.file(&amp;apos;local.properties&amp;apos;).newDataInputStream())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bintray &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    user = properties.getProperty(&amp;quot;bintray.user&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    key = properties.getProperty(&amp;quot;bintray.apikey&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    configurations = [&amp;apos;archives&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pkg &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        repo = bintrayRepo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = bintrayName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        desc = libraryDescription&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        websiteUrl = siteUrl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vcsUrl = gitUrl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        licenses = allLicenses&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        publish = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        publicDownloadNumbers = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        version &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            desc = libraryDescription&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            gpg &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            		//Optional. The passphrase for GPG signing&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sign = false //Determines whether to GPG sign the files. The default is false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                passphrase = properties.getProperty(&amp;quot;bintray.gpg.password&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;dependencies-gradle&quot;&gt;&lt;a href=&quot;#dependencies-gradle&quot; class=&quot;headerlink&quot; title=&quot;dependencies.gradle&quot;&gt;&lt;/a&gt;dependencies.gradle&lt;/h3&gt;&lt;p&gt;这个文件主要用来保存一些项目信息。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;project.ext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bintrayRepo = &amp;apos;maven&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bintrayName = &amp;apos;statusbar&amp;apos;			//与bintray中新建的项目名称相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    publishedGroupId = &amp;apos;org.chen.statusbar&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    libraryName = &amp;apos;statusbar&amp;apos;       	//确保与android studio里面library名称相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    artifact = &amp;apos;statusbar&amp;apos;				//确保与android studio里面library名称相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    libraryDescription = &amp;apos;Android System Status Bar&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    siteUrl = &amp;apos;https://github.com/czhzero/AndroidSystemStatusBar&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gitUrl = &amp;apos;https://github.com/czhzero/AndroidSystemStatusBar.git&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    libraryVersion = &amp;apos;1.0.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    developerId = &amp;apos;czhzero&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    developerName = &amp;apos;chen&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    developerEmail = &amp;apos;czhpxl007@163.com&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    licenseName = &amp;apos;The Apache Software License, Version 2.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    licenseUrl = &amp;apos;http://www.apache.org/licenses/LICENSE-2.0.txt&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    allLicenses = [&amp;quot;Apache-2.0&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;build-gradle&quot;&gt;&lt;a href=&quot;#build-gradle&quot; class=&quot;headerlink&quot; title=&quot;build.gradle&quot;&gt;&lt;/a&gt;build.gradle&lt;/h3&gt;&lt;p&gt;在library中的build.gradle文件下，增加下面两句引用。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply from: &amp;apos;install.gradle&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply from: &amp;apos;bintray.gradle&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;local-properties&quot;&gt;&lt;a href=&quot;#local-properties&quot; class=&quot;headerlink&quot; title=&quot;local.properties&quot;&gt;&lt;/a&gt;local.properties&lt;/h3&gt;&lt;p&gt;在local.properties文件中，增加如下字段。因为这两个字段是敏感信息，所以建议将这些信息放到项目本地文件中。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bintray.user=你的用户名,不是邮箱&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bintray.apikey=你的bintray账号的apikey&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;执行命令打包并上传到Bintray&quot;&gt;&lt;a href=&quot;#执行命令打包并上传到Bintray&quot; class=&quot;headerlink&quot; title=&quot;执行命令打包并上传到Bintray&quot;&gt;&lt;/a&gt;执行命令打包并上传到Bintray&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//进入项目根目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./gradlew :模块名:install  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./gradlew :模块名:bintrayUpload  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; gradlew :模块名:install  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; gradlew :模块名:bintrayUpload&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;命令执行成功后，会返回 &lt;code&gt;build successful&lt;/code&gt; 字样。&lt;/p&gt;
&lt;h2 id=&quot;同步library文件到jcenter&quot;&gt;&lt;a href=&quot;#同步library文件到jcenter&quot; class=&quot;headerlink&quot; title=&quot;同步library文件到jcenter&quot;&gt;&lt;/a&gt;同步library文件到jcenter&lt;/h2&gt;&lt;p&gt;前面所有步骤走完之后实际上只是上传了你的项目到Bintray而已，并没有被包含在jcenter中，要想提交到jcenter中还需要Bintray的审核。&lt;/p&gt;
&lt;p&gt;登入Bintray网站，进入个人中心，在右侧的Owned Repositories区域点击Maven的图标，进入你的Maven项目列表。&lt;/p&gt;
&lt;p&gt;如果已经上传成功了，在这里就能看到你的项目，进入项目详情，在右下角的Linked To区域点击Add to JCenter，然后在Comments输入框里随便填写下信息，最后点Send提交请求即可&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/012/%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%877.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一般情况下审核需要4到5个小时，耐心等待就行了，审核通过后会给你发邮件通知你，并且以后更新项目就不需要再审核了。&lt;/p&gt;
&lt;h2 id=&quot;修改library库代码-升级库版本&quot;&gt;&lt;a href=&quot;#修改library库代码-升级库版本&quot; class=&quot;headerlink&quot; title=&quot;修改library库代码, 升级库版本&quot;&gt;&lt;/a&gt;修改library库代码, 升级库版本&lt;/h2&gt;&lt;p&gt;升级库版本代码，只需要修改代码后，然后修改&lt;code&gt;dependencies.gradle&lt;/code&gt;里面版本号。&lt;/p&gt;
&lt;p&gt;重新执行如下命令即可。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//进入项目根目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./gradlew :模块名:install  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./gradlew :模块名:bintrayUpload  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; gradlew :模块名:install  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; gradlew :模块名:bintrayUpload&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;常见问题&quot;&gt;&lt;a href=&quot;#常见问题&quot; class=&quot;headerlink&quot; title=&quot;常见问题&quot;&gt;&lt;/a&gt;常见问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;message:Unable to upload files: Maven group, artifact or version defined in the pom file do not match the file path&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个问题一般都是你的module的名字和你配置的artifactId不一致导致的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Error : cause android.compileSdkVersion is missing&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply from: &amp;apos;install.gradle&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply from: &amp;apos;bintray.gradle&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在module模块的build.gradle添加上述两句话时，这两句话要写到末尾，不然会提示找不到&lt;code&gt;compileSdkVersion&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; class=&quot;headerlink&quot; title=&quot;参考文章&quot;&gt;&lt;/a&gt;参考文章&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0623/3097.html#commettop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何使用Android Studio把自己的Android library分享到jCenter和Maven Central&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jianshu.com/p/0e7b8e14f0cd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【Android】5分钟发布Android Library项目到JCenter&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如果你想在Android Studio中引入一个library到你的项目，你只需添加如下的一行代码到模块的build.gradle文件中&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;org.chen.statusbar:statusbar:1.0.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="jcenter" scheme="http://czhzero.com/tags/jcenter/"/>
    
  </entry>
  
  <entry>
    <title>MAC安装oh my zsh</title>
    <link href="http://czhzero.com/2016/10/18/mac-install-ohmyzsh/"/>
    <id>http://czhzero.com/2016/10/18/mac-install-ohmyzsh/</id>
    <published>2016-10-18T02:56:47.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;本文链接地址为: &lt;a href=&quot;http://www.php230.com/mac-install-zsh.html，转载请注明出处！&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.php230.com/mac-install-zsh.html，转载请注明出处！&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;克隆这个项目到本地-前提是你得有装git&quot;&gt;&lt;a href=&quot;#克隆这个项目到本地-前提是你得有装git&quot; class=&quot;headerlink&quot; title=&quot;克隆这个项目到本地(前提是你得有装git)&quot;&gt;&lt;/a&gt;克隆这个项目到本地(前提是你得有装git)&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;创建一个zsh的配置文件&quot;&gt;&lt;a href=&quot;#创建一个zsh的配置文件&quot; class=&quot;headerlink&quot; title=&quot;创建一个zsh的配置文件&quot;&gt;&lt;/a&gt;创建一个zsh的配置文件&lt;/h2&gt;&lt;p&gt;注意:如果你已经有一个~/.zshrc文件的话，建议你先做备份。使用以下命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cp ~/.zshrc ~/.zshrc.orig&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后开始创建zsh的配置文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;设置zsh为你的默认的shell&quot;&gt;&lt;a href=&quot;#设置zsh为你的默认的shell&quot; class=&quot;headerlink&quot; title=&quot;设置zsh为你的默认的shell&quot;&gt;&lt;/a&gt;设置zsh为你的默认的shell&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;chsh -s /bin/zsh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;重启并开始使用你的zsh&quot;&gt;&lt;a href=&quot;#重启并开始使用你的zsh&quot; class=&quot;headerlink&quot; title=&quot;重启并开始使用你的zsh&quot;&gt;&lt;/a&gt;重启并开始使用你的zsh&lt;/h2&gt;&lt;p&gt;打开一个新的终端窗口,至此，大功告成。&lt;/p&gt;
&lt;h2 id=&quot;更改zsh主题&quot;&gt;&lt;a href=&quot;#更改zsh主题&quot; class=&quot;headerlink&quot; title=&quot;更改zsh主题&quot;&gt;&lt;/a&gt;更改zsh主题&lt;/h2&gt;&lt;p&gt;1、编辑 ~/.zshrc&lt;/p&gt;
&lt;p&gt;2、修改 ZSH_THEME=”ys”&lt;/p&gt;
&lt;p&gt;主题文件在 ~/.oh-my-zsh/themes 目录&lt;br&gt;这里有一份详细的&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/themes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zsh主题&lt;/a&gt;介绍，可以根据喜好自行修改。&lt;/p&gt;
&lt;p&gt;完了しました。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文链接地址为: &lt;a href=&quot;http://www.php230.com/mac-install-zsh.html，转载请注明出处！&quot;&gt;http://www.php230.com/mac-install-zsh.html，转载请注明出处！&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;克隆这个项目到本地-前提是你得有装git&quot;&gt;&lt;a href=&quot;#克隆这个项目到本地-前提是你得有装git&quot; class=&quot;headerlink&quot; title=&quot;克隆这个项目到本地(前提是你得有装git)&quot;&gt;&lt;/a&gt;克隆这个项目到本地(前提是你得有装git)&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://czhzero.com/categories/Mac/"/>
    
    
      <category term="oh-my-zsh" scheme="http://czhzero.com/tags/oh-my-zsh/"/>
    
  </entry>
  
  <entry>
    <title>WindowManager悬浮窗如何监听Home键和返回键</title>
    <link href="http://czhzero.com/2016/08/26/windowmanager-keyevent/"/>
    <id>http://czhzero.com/2016/08/26/windowmanager-keyevent/</id>
    <published>2016-08-26T09:06:21.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;使用WindowManager可以在其他应用最上层，甚至手机桌面最上层显示窗口。&lt;br&gt;调用的是WindowManager继承自基类的addView方法和removeView方法来显示和隐藏窗口。但是WindowManager中的View并不能直接地监听到Home和Back的KeyEvent。&lt;/p&gt;
&lt;p&gt;通常我们会通过&lt;code&gt;setOnKeyListener&lt;/code&gt;方法进行监听，不过，很不幸这种方式监听不到事件。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;View view = LayoutInflater.from(context).inflate(R.layout.popupwindow,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                null);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;view.setOnKeyListener(new OnKeyListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public boolean onKey(View v, int keyCode, KeyEvent event) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                switch (keyCode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                case KeyEvent.KEYCODE_BACK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    //dosomething&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                case KeyEvent.KEYCODE_HOME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    //dosomething&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以我们要通过其他方式进行监听，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;监听Home键事件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * 自定义广播&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   private final static BroadcastReceiver homeListenerReceiver = new BroadcastReceiver() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       final String SYSTEM_DIALOG_REASON_KEY = &amp;quot;reason&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       final String SYSTEM_DIALOG_REASON_HOME_KEY = &amp;quot;homekey&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       public void onReceive(Context context, Intent intent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           String action = intent.getAction();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           if (action.equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               String reason = intent.getStringExtra(SYSTEM_DIALOG_REASON_KEY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               if (reason != null &amp;amp;&amp;amp; reason.equals(SYSTEM_DIALOG_REASON_HOME_KEY)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   // 处理自己的逻辑&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   //在创建View时注册Receiver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   IntentFilter homeFilter = new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context.registerReceiver(homeListenerReceiver, homeFilter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//在View消失时反注册Receiver&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (homeListenerReceiver != null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  context.unregisterReceiver(homeListenerReceiver);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;监听Back键事件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//重写dispatchKeyEvent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public boolean dispatchKeyEvent(KeyEvent event) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       switch (event.getKeyCode()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           case KeyEvent.KEYCODE_BACK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           case KeyEvent.KEYCODE_MENU:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               // 处理自己的逻辑break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           default:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       return super.dispatchKeyEvent(event);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;使用WindowManager可以在其他应用最上层，甚至手机桌面最上层显示窗口。&lt;br&gt;调用的是WindowManager继承自基类的addView方法和removeView方法来显示和隐藏窗口。但是WindowManager中的View并不能直接地监听到Home和Back的KeyEvent。&lt;/p&gt;
&lt;p&gt;通常我们会通过&lt;code&gt;setOnKeyListener&lt;/code&gt;方法进行监听，不过，很不幸这种方式监听不到事件。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="WindowManager" scheme="http://czhzero.com/tags/WindowManager/"/>
    
  </entry>
  
  <entry>
    <title>Gradle for Andoid 学习笔记(二):Groovy入门</title>
    <link href="http://czhzero.com/2016/08/24/gradle-study-2/"/>
    <id>http://czhzero.com/2016/08/24/gradle-study-2/</id>
    <published>2016-08-24T03:45:24.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Groovy是什么&quot;&gt;&lt;a href=&quot;#Groovy是什么&quot; class=&quot;headerlink&quot; title=&quot;Groovy是什么&quot;&gt;&lt;/a&gt;Groovy是什么&lt;/h2&gt;&lt;p&gt;Groovy是一种基于JVM（Java虚拟机）的敏捷开发语言，它结合了Python、Ruby和Smalltalk的许多强大的特性，Groovy 代码能够与 Java 代码很好地结合，也能用于扩展现有代码。由于其运行在 JVM 上的特性，Groovy 可以使用其他 Java 语言编写的库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/011/20151021205159588.png&quot; alt=&quot;Gradle for Andoid&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;下面四种方式都会输出“hello world”，&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(&amp;quot;hello world&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println &amp;quot;hello world&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(&amp;quot;hello world&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println &amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Groovy 语法与Java 语言的语法很相似，语法也比较灵活，例如上面一段代码，括号与分号，可有可无。&lt;/p&gt;
&lt;p&gt;Groovy编写的文件扩展名是.groovy，学习Groovy官网是 &lt;a href=&quot;http://groovy-lang.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://groovy-lang.org&lt;/a&gt;，&lt;br&gt;当然了做Android开发的人员可以直接用Gradle构建工具来运行Groovy，这时候扩展名是.gradle。&lt;/p&gt;
&lt;h2 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h2&gt;&lt;h3 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h3&gt;&lt;p&gt;与Java的注释语法相同，如：//注释 /&lt;em&gt; 注释 &lt;/em&gt;/ /&lt;em&gt;* 注释 &lt;/em&gt;/ 都支持,唯一不同的是，Groovy支持像Shell脚本那样的首行附加注释&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#!/usr/bin/env groovy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//注释1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 注释2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* 注释3 */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def x=1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;“#!”注释只允许在脚本文件的第一行出现，通过这种方式 Unix shell能定位groovy 的启动脚本并且运行这些脚本。&lt;/p&gt;
&lt;h3 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;headerlink&quot; title=&quot;关键字&quot;&gt;&lt;/a&gt;关键字&lt;/h3&gt;&lt;p&gt;下面列表表示了Groovy语言所有的关键字, 代表意思与其他语言一致&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;as              assert           break               case&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;catch           class            const               continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def             default          do                  else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;enum            extends          false               finally&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for             goto             if                  implements&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import          in               instanceof          interface&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;new             null             package             return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;super           switch           this                throw&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;throws          trait            true                try&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;标识符&quot;&gt;&lt;a href=&quot;#标识符&quot; class=&quot;headerlink&quot; title=&quot;标识符&quot;&gt;&lt;/a&gt;标识符&lt;/h3&gt;&lt;h4 id=&quot;正常标识符&quot;&gt;&lt;a href=&quot;#正常标识符&quot; class=&quot;headerlink&quot; title=&quot;正常标识符&quot;&gt;&lt;/a&gt;正常标识符&lt;/h4&gt;&lt;p&gt;标识符以字母，美元符号或下划线开始。不能以一个数字开始。&lt;br&gt;一个字母可以在以下范围：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;‘a’ 至 ‘z’ (小写ascii字母)&lt;/li&gt;
&lt;li&gt;‘A’ 至 ‘Z’ (大写ascii字母)&lt;/li&gt;
&lt;li&gt;‘\u00C0′ 至 ‘\u00D6′&lt;/li&gt;
&lt;li&gt;‘\u00D8′ 至 ‘\u00F6′&lt;/li&gt;
&lt;li&gt;‘\u00F8′ 至 ‘\u00FF’&lt;/li&gt;
&lt;li&gt;‘\u0100′ 至 ‘\uFFFE’&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后面的字符可以包括字母和数字。&lt;br&gt;这里是一些合法标识符的示例（这里是变量名称）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def item3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def with_underscore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def $dollarStart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是以下面展示了一些非法的标识符：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def 3tier&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def a+b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def a#b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当在一个点后，所有的关键字也是合法的标识符：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;foo.as&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.assert&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.break&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.case&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.catch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;引用标识符&quot;&gt;&lt;a href=&quot;#引用标识符&quot; class=&quot;headerlink&quot; title=&quot;引用标识符&quot;&gt;&lt;/a&gt;引用标识符&lt;/h4&gt;&lt;p&gt;引用标识符出现在一个点式表达式的点后面。例如，person.name表达式中的name，能通过person.”name”,person.’name’被引用。当某些标识符包含有Java语言规范禁止的非法字符，这是相当有趣的，但被Groovy引用所允许。例如，像一个破折号，一个空格，一个感叹号等。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def map = [:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map.&amp;quot;an identifier with a space and double quotes&amp;quot; = &amp;quot;ALLOWED&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map.&amp;apos;with-dash-signs-and-single-quotes&amp;apos; = &amp;quot;ALLOWED&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert map.&amp;quot;an identifier with a space and double quotes&amp;quot; == &amp;quot;ALLOWED&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert map.&amp;apos;with-dash-signs-and-single-quotes&amp;apos; == &amp;quot;ALLOWED&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;正如我们将在字符串章节看到的，Groovy提供了不同的字符串字面量。所有不同类型的字符串都被允许出现在点后面：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map.&amp;apos;single quote&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map.&amp;quot;double quote&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map.&amp;apos;&amp;apos;&amp;apos;triple single quote&amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map.&amp;quot;&amp;quot;&amp;quot;triple double quote&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map./slashy string/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map.$/dollar slashy string/$&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;普通字符串和Groovy的GStrings有一些不同（有插值的字符串），正如在后者的情况下，插入的值被插入到最后的字符串中，以计算整个标识符：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def firstname = &amp;quot;Homer&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map.&amp;quot;Simson-$&amp;#123;firstname&amp;#125;&amp;quot; = &amp;quot;Homer Simson&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert map.&amp;apos;Simson-Homer&amp;apos; == &amp;quot;Homer Simson&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h3&gt;&lt;p&gt;文本文字以字符链的形式表示被称作字符串。Groovy可以让你实例化java.lang.String对象，也可以实例化GString(groovy.lang.GString)，在其他编程语言中被称为插值字符串。&lt;/p&gt;
&lt;h4 id=&quot;单引号字符串&quot;&gt;&lt;a href=&quot;#单引号字符串&quot; class=&quot;headerlink&quot; title=&quot;单引号字符串&quot;&gt;&lt;/a&gt;单引号字符串&lt;/h4&gt;&lt;p&gt;单引号字符串是一系列被单引号包围的字符。&lt;/p&gt;
&lt;p&gt;单引号字符串是普通的java.lang.String，不支持插值。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;a single quoted string&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;字符串连接&quot;&gt;&lt;a href=&quot;#字符串连接&quot; class=&quot;headerlink&quot; title=&quot;字符串连接&quot;&gt;&lt;/a&gt;字符串连接&lt;/h4&gt;&lt;p&gt;所有Groovy字符串能使用+操作符连接：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assert &amp;apos;ab&amp;apos; == &amp;apos;a&amp;apos; + &amp;apos;b&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;三单引号字符串&quot;&gt;&lt;a href=&quot;#三单引号字符串&quot; class=&quot;headerlink&quot; title=&quot;三单引号字符串&quot;&gt;&lt;/a&gt;三单引号字符串&lt;/h4&gt;&lt;p&gt;三单引号字符串是一列被三个单引号包围的字符：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;&amp;apos;&amp;apos;a triple single quoted string&amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;三单引号字符串是普通的java.lang.String，不支持插值。&lt;/p&gt;
&lt;p&gt;三单引号字符串是多行的。你可以使字符串内容跨越行边界，不需要将字符串分割为一些片段，不需要连接，或换行转义符：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def aMultilineString = &amp;apos;&amp;apos;&amp;apos;line one&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;line two&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;line three&amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你的代码是缩进的，如类中的方法体，字符串将包括缩进的空格。Groovy开发工具包含一些剥离缩进的方法，使用String#stripIndent()方法，并使用String#stripMargin()方法，需要一个分隔符来识别文本从一个字符串的开始删除。&lt;br&gt;当创建一个如下字符串：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def startingAndEndingWithANewline = &amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;line one&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;line two&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;line three&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;&amp;apos;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;转义特殊字符&quot;&gt;&lt;a href=&quot;#转义特殊字符&quot; class=&quot;headerlink&quot; title=&quot;转义特殊字符&quot;&gt;&lt;/a&gt;转义特殊字符&lt;/h5&gt;&lt;p&gt;你可以使用反斜杠字符转义单引号，避免终止字符串：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;an escaped single quote: \&amp;apos; needs a backslash&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你能使用双反斜杠来转义转义字符自身：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;an escaped escape character: \\ needs a double backslash&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一些特殊字符使用反斜杠作为转义字符：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;转义序列    字符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;\t&amp;apos;        tabulation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;\b&amp;apos;        backspace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;\n&amp;apos;        newline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;\r&amp;apos;        carriage return&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;\f&amp;apos;        formfeed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;\\&amp;apos;        backslash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;\&amp;apos;&amp;apos;        single quote (for single quoted and triple single quoted strings)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;\&amp;quot;&amp;apos;        double quote (for double quoted and triple double quoted strings)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Unicode转义序列&quot;&gt;&lt;a href=&quot;#Unicode转义序列&quot; class=&quot;headerlink&quot; title=&quot;Unicode转义序列&quot;&gt;&lt;/a&gt;Unicode转义序列&lt;/h5&gt;&lt;p&gt;对于那些键盘不能表示的字符，你能使用Unicode转义序列：一个反斜杠，后面跟着‘u’,然后是4个十六进制的数字。&lt;br&gt;例如，欧元货币标志可以使用这个表示：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;The Euro currency symbol: \u20AC&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;双引号字符串&quot;&gt;&lt;a href=&quot;#双引号字符串&quot; class=&quot;headerlink&quot; title=&quot;双引号字符串&quot;&gt;&lt;/a&gt;双引号字符串&lt;/h4&gt;&lt;p&gt;双引号字符串是一些列被双引号包围的字符：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;a double quoted string&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果没有插值表达式，双引号字符串是普通的java.lang.String，如果插值存在则是groocy.lang.GString实例。&lt;br&gt;为了转义一个双引号，你能使用反斜杠字符：”A double quote: \””。&lt;/p&gt;
&lt;h5 id=&quot;字符串插值&quot;&gt;&lt;a href=&quot;#字符串插值&quot; class=&quot;headerlink&quot; title=&quot;字符串插值&quot;&gt;&lt;/a&gt;字符串插值&lt;/h5&gt;&lt;p&gt;任何Groovy表达式可以在所有字符文本进行插值，除了单引号和三单引号字符串。插值是使用占位符上的字符串计算值替换占位符的操作。占位符表达式是被${}包围，或前缀为$的表达式。当GString被传递给一个带有一个String参数的方法时，占位符的表达式被计算值，并通过调用表达式的toString()方法以字符串形式表示。&lt;br&gt;这里是一个占位符引用局部变量的字符串：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def name = &amp;apos;Guillaume&amp;apos; // a plain string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def greeting = &amp;quot;Hello $&amp;#123;name&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert greeting.toString() == &amp;apos;Hello Guillaume&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而且任何Groovy表达式是合法的，正如我们在示例中使用算数表达式所见一样:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def sum = &amp;quot;The sum of 2 and 3 equals $&amp;#123;2 + 3&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert sum.toString() == &amp;apos;The sum of 2 and 3 equals 5&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不仅任何表达式，实际上也允许${}占位符。语句也是被允许的，但一个语句等效于null。如果有多个语句插入占位符，那么最后一个语句应该返回一个有意义的值被插入占位符。例如，”The sum of 1 and 2 is equal to ${def a = 1; def b = 2; a + b}”字符串是被支持的，也能如预期一样工作，但一个好的实践是在GString占位符插入一个简单的表达式。&lt;/p&gt;
&lt;p&gt;除了${}占位符以外，也可以使用$作为表达式前缀：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def person = [name: &amp;apos;Guillaume&amp;apos;, age: 36]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert &amp;quot;$person.name is $person.age years old&amp;quot; == &amp;apos;Guillaume is 36 years old&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但只有a.b，a.b.c等形式的前缀表达式是合法的，而包含如方法调用的圆括号，闭包的花括号，算术操作符是非法的。给出如下数值变量定义：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def number = 3.14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如下语句将会抛出groovy.lang.MissingPropertyException，因为Groovy相信你在尝试访问一个不存在数字的toString属性：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;shouldFail(MissingPropertyException) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  println &amp;quot;$number.toString()&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以把”$number.toString()”用解释器解释为”${number.toString}()”。&lt;br&gt;如果在GString中你需要转义$或${}占位符，使它们不出现插值，那么你只需要使用反斜杠字符转义美元符号：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assert &amp;apos;$&amp;#123;name&amp;#125;&amp;apos; == &amp;quot;\$&amp;#123;name&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;插入闭包表达式的特殊情况&quot;&gt;&lt;a href=&quot;#插入闭包表达式的特殊情况&quot; class=&quot;headerlink&quot; title=&quot;插入闭包表达式的特殊情况&quot;&gt;&lt;/a&gt;插入闭包表达式的特殊情况&lt;/h4&gt;&lt;p&gt;到目前为止，我们仅仅看到在${}占位符中插入任意表达式，但一个闭包表达式标记的特殊情况。当占位符包括一个箭头，${-&amp;gt;}，这表达式实际是一个闭包表达式，你可以把它看做一个前面紧靠美元符号的闭包：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def sParameterLessClosure = &amp;quot;1 + 2 == $&amp;#123;-&amp;gt; 3&amp;#125;&amp;quot; （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert sParameterLessClosure == &amp;apos;1 + 2 == 3&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def sOneParamClosure = &amp;quot;1 + 2 == $&amp;#123; w -&amp;gt; w &amp;lt;&amp;lt; 3&amp;#125;&amp;quot; （2）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert sOneParamClosure == &amp;apos;1 + 2 == 3&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（1）这是一个不携带参数的无参闭包&lt;br&gt;（2）这里的闭包携带一个java.io.StringWrite参数，你能使用&amp;lt;&amp;lt;追加内容。在这两处，占位符被嵌入闭包。&lt;/p&gt;
&lt;p&gt;在外观上，定义一个表达式被插入看着有一些冗长，但闭包相比表达式有一个有趣的优势：延迟计算。&lt;br&gt;让我们思考如下示例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def number = 1 （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def eagerGString = &amp;quot;value == $&amp;#123;number&amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def lazyGString = &amp;quot;value == $&amp;#123; -&amp;gt; number &amp;#125;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert eagerGString == &amp;quot;value == 1&amp;quot; （2）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert lazyGString == &amp;quot;value == 1&amp;quot; （3）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;number = 2 （4）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert eagerGString == &amp;quot;value == 1&amp;quot; （5）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert lazyGString == &amp;quot;value == 2&amp;quot; （6）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（1）我们定义一个包含1的number变量，然后插入两个GString之中，在eagerGString中作为表达式，在lazyGString中作为闭包。&lt;br&gt;（2）我们期望对于eagerGString得到的结果字符串是包含1的相同字符串&lt;br&gt;（3）lazyGString相似&lt;br&gt;（4）然后给变量赋一个新值&lt;br&gt;（5）使用纯插值表达式，这值在GString创建时结合&lt;br&gt;（6）但使用闭包表达式，GString被强转为Sring时，闭包被调用，并产生包含新数值的更新字符串。&lt;br&gt;一个嵌入的闭包表达式，携带超过一个参数，那么在运行时将会产生一个异常。闭包仅仅允许携带0个或1个参数。&lt;/p&gt;
&lt;h4 id=&quot;与Java的互操作性&quot;&gt;&lt;a href=&quot;#与Java的互操作性&quot; class=&quot;headerlink&quot; title=&quot;与Java的互操作性&quot;&gt;&lt;/a&gt;与Java的互操作性&lt;/h4&gt;&lt;p&gt;当一个方法（无论是在Java或是Groovy中实现）预期需要一个java.lang.String，而我们传递了一个groovy.lang.GString实例，GString的toString()方法将会被自动透明的调用。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String takeString(String message) &amp;#123; （4）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  assert message instanceof String （5）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return message&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def message = &amp;quot;The message is $&amp;#123;&amp;apos;hello&amp;apos;&amp;#125;&amp;quot; （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert message instanceof GString （2）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def result = takeString(message) （3）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert result instanceof String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert result == &amp;apos;The message is hello&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（1）我们创建一个GSring变量&lt;br&gt;（2）我们仔细检查GString实例&lt;br&gt;（3）我们将GString传递个一个携带String参数的方法&lt;br&gt;（4）takeString()明确说明它的唯一参数是一个String&lt;br&gt;（5）我们也验证一个参数是String而不是GString&lt;/p&gt;
&lt;h4 id=&quot;GString和String的hashCode&quot;&gt;&lt;a href=&quot;#GString和String的hashCode&quot; class=&quot;headerlink&quot; title=&quot;GString和String的hashCode&quot;&gt;&lt;/a&gt;GString和String的hashCode&lt;/h4&gt;&lt;p&gt;虽然插值字符串可以代替普通Java字符串，它们用一种不同的方式是字符串不同：它们的hashCode是不同的。普通Java字符串是不可变的，而一个GString依赖于插入的值，它的String是可变的。即使有相同的字符串结果，GString和String也没有相同的hashCode。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assert &amp;quot;one: $&amp;#123;1&amp;#125;&amp;quot;.hashCode() != &amp;quot;one: 1&amp;quot;.hashCode()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;GString和String有不同的hashCode值，应该避免使用GSring作为Map的键值，我们使用String代替GString取出一个关联值。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def key = &amp;quot;a&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def m = [&amp;quot;$&amp;#123;key&amp;#125;&amp;quot;: &amp;quot;letter $&amp;#123;key&amp;#125;&amp;quot;] （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert m[&amp;quot;a&amp;quot;] == null （2）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（1）map被一个初始化键值对创建，其键值是GString&lt;br&gt;（2）当我们尝试使用String键值获取值时，我们并没获取对应值，因为String和GString有不同的hashCode&lt;/p&gt;
&lt;h3 id=&quot;三双引号字符串&quot;&gt;&lt;a href=&quot;#三双引号字符串&quot; class=&quot;headerlink&quot; title=&quot;三双引号字符串&quot;&gt;&lt;/a&gt;三双引号字符串&lt;/h3&gt;&lt;p&gt;三双引号字符串与双引号字符串相同，增加多行，像三单引号字符串一样。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def name = &amp;apos;Groovy&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def template = &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Dear Mr $&amp;#123;name&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  You&amp;apos;re the winner of the lottery!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Yours sincerly,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Dave&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert template.toString().contains(&amp;apos;Groovy&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;无论是双引号还是单引号，在三双引号字符串中需要被转义。&lt;/p&gt;
&lt;h3 id=&quot;斜杠字符串&quot;&gt;&lt;a href=&quot;#斜杠字符串&quot; class=&quot;headerlink&quot; title=&quot;斜杠字符串&quot;&gt;&lt;/a&gt;斜杠字符串&lt;/h3&gt;&lt;p&gt;除了通常的带引号字符串，groovy提供斜杠字符串，使用/作为分隔符。斜杠字符串对于定义正则表达式和模式是特别有用的，因为不需要转义反斜杠。&lt;/p&gt;
&lt;p&gt;一个斜杠字符串：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def fooPattern = /.*foo.*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert fooPattern == &amp;apos;.*foo.*&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只有正斜杠需要反斜杠转义：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def escapeSlash = /The character \/ is a forward slash/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert escapeSlash == &amp;apos;The character / is a forward slash&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;斜杠字符串是多行的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def multilineSlashy = /one&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;two&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;three/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert multilineSlashy.contains(&amp;apos;\n&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;斜杠字符串也能被插值（如，GString）:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def color = &amp;apos;blue&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def interpolatedSlashy = /a $&amp;#123;color&amp;#125; car/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert interpolatedSlashy == &amp;apos;a blue car&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有几个陷阱需要注意：&lt;br&gt;一个空的斜杠字符串不能使用双正斜杠表示，因为它被Groovy解析器作为一个单行注释理解。这就是为什么以下断言实际上无法编译，因为它看起来像一个无终止的语句：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assert &amp;apos;&amp;apos; == //&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;美元符修饰的斜杠字符串&quot;&gt;&lt;a href=&quot;#美元符修饰的斜杠字符串&quot; class=&quot;headerlink&quot; title=&quot;美元符修饰的斜杠字符串&quot;&gt;&lt;/a&gt;美元符修饰的斜杠字符串&lt;/h4&gt;&lt;p&gt;美元符斜杠字符串是一个有开口$/和闭口$/界定的多行GString。这转义字符是美元符，它能转义另一个美元符，或一个正斜杠。但是双美元符和双正斜杠不用被转义，除了转义像GString占位符序列开始的字符串子序列的美元符，或者你需要转义一个序列，开头看着像闭包美元符斜杠字符串分隔符。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def name = &amp;quot;Guillaume&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def date = &amp;quot;April, 1st&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def dollarSlashy = $/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Hello $name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  today we&amp;apos;re $&amp;#123;date&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $ dollar sign&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $$ escaped dollar sign&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  \ backslash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  / forward slash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $/ escaped forward slash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $/$ escaped dollar slashy string delimiter&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;apos;Guillaume&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;apos;April, 1st&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;apos;$ dollar sign&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;apos;$ escaped dollar sign&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;apos;\\ backslash&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;apos;/ forward slash&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;apos;$/ escaped forward slash&amp;apos;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;apos;/$ escaped dollar slashy string delimiter&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;].each &amp;#123; dollarSlashy.contains(it) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;字符串总结表&quot;&gt;&lt;a href=&quot;#字符串总结表&quot; class=&quot;headerlink&quot; title=&quot;字符串总结表&quot;&gt;&lt;/a&gt;字符串总结表&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String name              String syntax     Interpolated     Multiline    Escape character&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Single quoted            &amp;apos;…​&amp;apos;                                              \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Triple single quoted     &amp;apos;&amp;apos;&amp;apos;…​&amp;apos;&amp;apos;&amp;apos;                            是            \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Double quoted            &amp;quot;…​&amp;quot;               是                             \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Triple double quoted     &amp;quot;&amp;quot;&amp;quot;…​&amp;quot;&amp;quot;&amp;quot;           是               是            \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slashy                   /…​/               是               是            \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Dollar                   $/…​/$             是               是            \&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;字符&quot;&gt;&lt;a href=&quot;#字符&quot; class=&quot;headerlink&quot; title=&quot;字符&quot;&gt;&lt;/a&gt;字符&lt;/h4&gt;&lt;p&gt;与Java不同，Groovy没有显式的字符文本，然而你可以通过三种不同方式，可以将Groovy字符串实际作为一个字符使用。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;char c1 = &amp;apos;A&amp;apos; （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert c1 instanceof Character&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def c2 = &amp;apos;B&amp;apos; as char （2）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert c2 instanceof Character&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def c3 = (char)&amp;apos;C&amp;apos; （3）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert c3 instanceof Character&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;1）当定义变量时，通过指定char类型，使变量包含字符&lt;br&gt;（2）通过as操作符使用类型强制转换&lt;br&gt;（3）通过char操作符做类型转换&lt;br&gt;第一个选项是（1）有趣的当一个字符在一个变量中，而另外两个（2和3）是更令人关注时char值必须作为一个方法调用的参数。&lt;/p&gt;
&lt;h3 id=&quot;数字&quot;&gt;&lt;a href=&quot;#数字&quot; class=&quot;headerlink&quot; title=&quot;数字&quot;&gt;&lt;/a&gt;数字&lt;/h3&gt;&lt;p&gt;Groovy支持不同类型的整数和小数，通常以Java的Number类型返回。&lt;/p&gt;
&lt;h4 id=&quot;整数&quot;&gt;&lt;a href=&quot;#整数&quot; class=&quot;headerlink&quot; title=&quot;整数&quot;&gt;&lt;/a&gt;整数&lt;/h4&gt;&lt;p&gt;整数类型与Java相同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;byte&lt;/li&gt;
&lt;li&gt;char&lt;/li&gt;
&lt;li&gt;short&lt;/li&gt;
&lt;li&gt;int&lt;/li&gt;
&lt;li&gt;long&lt;/li&gt;
&lt;li&gt;java.lang.BigInteger&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你能以如下定义创建这些类型的整数：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// primitive types&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;byte b = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char c = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;short s = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int i = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long l = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// infinite precision&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BigInteger bi = 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你通过使用def关键字使用可选类型，那么整数的类型将是可变的：它取决于这个类型实际包含的值。&lt;/p&gt;
&lt;p&gt;对于正数：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def a = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert a instanceof Integer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Integer.MAX_VALUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def b = 2147483647&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert b instanceof Integer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Integer.MAX_VALUE + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def c = 2147483648&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert c instanceof Long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Long.MAX_VALUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def d = 9223372036854775807&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert d instanceof Long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Long.MAX_VALUE + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def e = 9223372036854775808&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert e instanceof BigInteger&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于负数也一样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def na = -1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert na instanceof Integer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Integer.MIN_VALUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def nb = -2147483648&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert nb instanceof Integer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Integer.MIN_VALUE - 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def nc = -2147483649&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert nc instanceof Long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Long.MIN_VALUE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def nd = -9223372036854775808&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert nd instanceof Long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Long.MIN_VALUE - 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def ne = -9223372036854775809&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert ne instanceof BigInteger&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;可选择的非十进制表示&quot;&gt;&lt;a href=&quot;#可选择的非十进制表示&quot; class=&quot;headerlink&quot; title=&quot;可选择的非十进制表示&quot;&gt;&lt;/a&gt;可选择的非十进制表示&lt;/h5&gt;&lt;p&gt;二进制数&lt;/p&gt;
&lt;p&gt;在Java6及以前和Groovy一样，数字只能使用十进制，八进制和十六进制表示，使用Java7和Groovy2你能使用0b前缀作为一个二进制符号：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int xInt = 0b10101111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xInt == 175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;short xShort = 0b11001001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xShort == 201 as short&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;byte xByte = 0b11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xByte == 3 as byte&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long xLong = 0b101101101101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xLong == 2925l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BigInteger xBigInteger = 0b111100100001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xBigInteger == 3873g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int xNegativeInt = -0b10101111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xNegativeInt == -175&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;八进制数&lt;/p&gt;
&lt;p&gt;八进制数使用0后面跟八进制数的典型格式表示。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int xInt = 077&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xInt == 63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;short xShort = 011&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xShort == 9 as short&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;byte xByte = 032&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xByte == 26 as byte&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long xLong = 0246&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xLong == 166l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BigInteger xBigInteger = 01111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xBigInteger == 585g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int xNegativeInt = -077&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xNegativeInt == -63&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;十六进制数&lt;/p&gt;
&lt;p&gt;十六进制数使用0x后面跟十六进制数的典型格式表示。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int xInt = 0x77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xInt == 119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;short xShort = 0xaa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xShort == 170 as short&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;byte xByte = 0x3a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xByte == 58 as byte&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long xLong = 0xffff&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xLong == 65535l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BigInteger xBigInteger = 0xaaaa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xBigInteger == 43690g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Double xDouble = new Double(&amp;apos;0x1.0p0&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xDouble == 1.0d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int xNegativeInt = -0x77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert xNegativeInt == -119&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;小数&quot;&gt;&lt;a href=&quot;#小数&quot; class=&quot;headerlink&quot; title=&quot;小数&quot;&gt;&lt;/a&gt;小数&lt;/h4&gt;&lt;p&gt;小数类型与Java一样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;float&lt;/li&gt;
&lt;li&gt;double&lt;/li&gt;
&lt;li&gt;java.lang.BigDecimal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你能采用如下定义方式创建这些类型的数字：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// primitive types&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;float f = 1.234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double d = 2.345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// infinite precision&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BigDecimal bd = 3.456&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;小数能使用指数，使用e或E指数字母，紧跟着一个可选符号，且有一个整数表示指数：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assert 1e3 == 1_000.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 2E4 == 20_000.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 3e+1 == 30.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 4E-2 == 0.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 5e-1 == 0.5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了精确的进行小数计算，Groovy选择java.lang.BigDecimal作为小数类型。此外，float和double也被支持，但要求有一个显式类型定义，类型转换或后缀。即使BigDecimal是默认的小数，携带float或double作为类型参数的方法或闭包也可以接受这些数值。&lt;br&gt;小数不能使用二进制，八进制和十六进制表示。&lt;/p&gt;
&lt;h4 id=&quot;有下划线的文本&quot;&gt;&lt;a href=&quot;#有下划线的文本&quot; class=&quot;headerlink&quot; title=&quot;有下划线的文本&quot;&gt;&lt;/a&gt;有下划线的文本&lt;/h4&gt;&lt;p&gt;当写一个很长的数字，使用眼睛很难弄清楚有多少数字组合在一起，例如使用千，单词等组合。通过允许你在数字中添加一些下划线，更容易发现这些组合：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;long creditCardNumber = 1234_5678_9012_3456L&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long socialSecurityNumbers = 999_99_9999L&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double monetaryAmount = 12_345_132.12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long hexBytes = 0xFF_EC_DE_5E&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long hexWords = 0xFFEC_DE5E&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long maxLong = 0x7fff_ffff_ffff_ffffL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long alsoMaxLong = 9_223_372_036_854_775_807L&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long bytes = 0b11010010_01101001_10010100_10010010&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;数字类型后缀&quot;&gt;&lt;a href=&quot;#数字类型后缀&quot; class=&quot;headerlink&quot; title=&quot;数字类型后缀&quot;&gt;&lt;/a&gt;数字类型后缀&lt;/h4&gt;&lt;p&gt;通过使用大写或小写类型后缀（见下表），我们能强制将一个数字（包括二进制，八进制，十六进制）给一个指定类型。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Type            Suffix&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BigInteger      G 或 g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Long            L 或 l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Integer         I 或 i&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BigDecimal      G 或 g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Double          D 或 d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Float           F 或 f&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assert 42I == new Integer(&amp;apos;42&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 42i == new Integer(&amp;apos;42&amp;apos;) // lowercase i more readable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 123L == new Long(&amp;quot;123&amp;quot;) // uppercase L more readable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 2147483648 == new Long(&amp;apos;2147483648&amp;apos;) // Long type used, value too large for an Integer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 456G == new BigInteger(&amp;apos;456&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 456g == new BigInteger(&amp;apos;456&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 123.45 == new BigDecimal(&amp;apos;123.45&amp;apos;) // default BigDecimal type used&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 1.200065D == new Double(&amp;apos;1.200065&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 1.234F == new Float(&amp;apos;1.234&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 1.23E23D == new Double(&amp;apos;1.23E23&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 0b1111L.class == Long // binary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 0xFFi.class == Integer // hexadecimal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 034G.class == BigInteger // octal&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;数学运算&quot;&gt;&lt;a href=&quot;#数学运算&quot; class=&quot;headerlink&quot; title=&quot;数学运算&quot;&gt;&lt;/a&gt;数学运算&lt;/h4&gt;&lt;p&gt;尽管运算在以后会被覆盖，讨论数学运算和结果类型仍然是重要的。&lt;br&gt;除法与幂方二元操作符放在一边（下文讨论）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;byte char short和int进行二元操作的结果是int&lt;/li&gt;
&lt;li&gt;使用long与byte char short int进行二元操作的结果是long&lt;/li&gt;
&lt;li&gt;使用BigInteger与任意其他整数类型进行二元操作结果是BigInteger&lt;/li&gt;
&lt;li&gt;float double与BigDecimal进行二元运算的结果是double&lt;/li&gt;
&lt;li&gt;两个BigDecimal进行二元运算的结果是BigDecimal&lt;/li&gt;
&lt;li&gt;下表总结了这些原则：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;        byte    char    short    int    long    BigInteger    float      double    BigDecimal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;byte    int     int     int      int    long    BigInteger    double     double    double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char            int     int      int    long    BigInteger    double     double    double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;short                   int      int    long    BigInteger    double     double    double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int                              int    long    BigInteger    double     double    double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;long                                    long    BigInteger    double     double    double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BigInteger                                      BigInteger    double     double    double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;float                                                         double     double    double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;double                                                                   double    double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BigDecimal                                                                         BigDecimal&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于Groovy操作符重载，BigInteger与BigDecimal通常也能进行运算操作，与Java不同，在Java中你不得不显式使用方法操作这些数字。&lt;/p&gt;
&lt;h5 id=&quot;除法运算符的情况&quot;&gt;&lt;a href=&quot;#除法运算符的情况&quot; class=&quot;headerlink&quot; title=&quot;除法运算符的情况&quot;&gt;&lt;/a&gt;除法运算符的情况&lt;/h5&gt;&lt;p&gt;如果任何一个操作数是float或double,那么除法运算符/(和/= 用于除法和赋值)产生double结果，否则（当两个操作数是一个与整型类型short, char, byte, int, long, BigInteger or BigDecimal的任意组合）是一个BigDecimal结果。&lt;/p&gt;
&lt;p&gt;如果除法是精确的（如，结果可以在相同的精度和标度范围内精确表示），那么BigDecimal的除法实际执行的是divide()方法，或使用两个操作数的最大精度加10,和一个最大值为10的标度的MathContext。&lt;/p&gt;
&lt;p&gt;对于整数除法和Java相同，你应该使用intdiv()方法，因为Groovy没有专门提供一个整数操作符。&lt;/p&gt;
&lt;h5 id=&quot;幂运算情况&quot;&gt;&lt;a href=&quot;#幂运算情况&quot; class=&quot;headerlink&quot; title=&quot;幂运算情况&quot;&gt;&lt;/a&gt;幂运算情况&lt;/h5&gt;&lt;p&gt;幂运算操作符使用**操作符，有两个参数：基数和指数。幂运算的结果取决于它的操作数以及操作的结果（特别是结果可以被表示为一个整数值）。&lt;/p&gt;
&lt;p&gt;以下这些原则被用于决定Groovy幂运算操作结果的类型：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;（1）如果指数是一个小数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	1.如果结果能作为一个Integer表示，那么返回一个Integer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	2..如果结果能作为一个Long表示，那么返回一个Long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	3.否则返回一个Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;（2）如果指数是一个整数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	1.如果是一个严格的负数，那么返回一个Integer，Long或Double，结果值使用那种类型填充。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        2.如果指数是正数或0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	  1)如果基数是BigDecimal，那么返回一个BigDecimal结果值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  2)如果基数是BigInteger，那么返回一个BigInteger结果值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  3)如果基数是Integer，那么返回一个Integer值，否则返回BigInteger&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  4)如果基数是Long，那么返回一个Long值，否则返回BigInteger&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们使用一些实例说明这些原则：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// base and exponent are ints and the result can be represented by an Integer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 2 ** 3 instanceof Integer // 8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 10 ** 9 instanceof Integer // 1_000_000_000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// the base is a long, so fit the result in a Long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// (although it could have fit in an Integer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 5L ** 2 instanceof Long // 25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// the result can&amp;apos;t be represented as an Integer or Long, so return a BigInteger&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 100 ** 10 instanceof BigInteger // 10e20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 1234 ** 123 instanceof BigInteger // 170515806212727042875...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// the base is a BigDecimal and the exponent a negative int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// but the result can be represented as an Integer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 0.5 ** -2 instanceof Integer // 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// the base is an int, and the exponent a negative float&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// but again, the result can be represented as an Integer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 1 ** -0.3f instanceof Integer // 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// the base is an int, and the exponent a negative int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// but the result will be calculated as a Double&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// (both base and exponent are actually converted to doubles)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 10 ** -1 instanceof Double // 0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// the base is a BigDecimal, and the exponent is an int, so return a BigDecimal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 1.2 ** 10 instanceof BigDecimal // 6.1917364224&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// the base is a float or double, and the exponent is an int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// but the result can only be represented as a Double value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 3.4f ** 5 instanceof Double // 454.35430372146965&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 5.6d ** 2 instanceof Double // 31.359999999999996&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// the exponent is a decimal value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// and the result can only be represented as a Double value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 7.8 ** 1.9 instanceof Double // 49.542708423868476&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert 2 ** 0.1f instanceof Double // 1.0717734636432956&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;布尔&quot;&gt;&lt;a href=&quot;#布尔&quot; class=&quot;headerlink&quot; title=&quot;布尔&quot;&gt;&lt;/a&gt;布尔&lt;/h4&gt;&lt;p&gt;Boolean是一种特殊的数据类型，用于表示真值：true和false。使用这种数据类型作为跟踪真假条件的简单标志。&lt;/p&gt;
&lt;p&gt;Boolean能被存储在变量中，成员变量中，就像其他数据类型一样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def myBooleanVariable = true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;boolean untypedBooleanVar = false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;booleanField = true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;true和false是仅有的两个原始布尔值。但更复杂的布尔表达式能使用逻辑操作符表示。&lt;/p&gt;
&lt;p&gt;除此之外，Groovy有一些特殊的规则（经常因为Groovy真值涉及）用于将非布尔值对象转化为一个布尔值。&lt;/p&gt;
&lt;h4 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h4&gt;&lt;p&gt;Groovy使用逗号分隔列表中的值，并使用方括号包围，用来指定一个列表。Groovy的列表是java.util.List，因为Groovy没有定义任何集合类。当定义一个列表常量时，默认的列表具体实现是java.util.ArrayList，除非你指定，我们将在后面看到。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def numbers = [1, 2, 3] （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert numbers instanceof List （2）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert numbers.size() == 3 （3）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（1）我们定义用逗号分隔，并用方括号包围列表数字，并将列表赋值给一个变量&lt;/p&gt;
&lt;p&gt;（2）list是java java.util.List接口的实例&lt;/p&gt;
&lt;p&gt;（3）列表的大小可以使用size()方法查询，表明列表有三个元素&lt;/p&gt;
&lt;p&gt;在上面的示例中，我们使用了一个元素类型相同的列表，我们也能创建包含不同类型元素的列表：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def heterogeneous = [1, &amp;quot;a&amp;quot;, true] （1）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（1）我们的列表包含一个数字，一个字符串，一个布尔值&lt;/p&gt;
&lt;p&gt;我们提及到，默认的列表字面量实际是java.util.ArrayList的实例，但列表使用不同返回类型也是可以的，使用as操作符进行类型转换，或使用变量的定义类型：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def arrayList = [1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert arrayList instanceof java.util.ArrayList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def linkedList = [2, 3, 4] as LinkedList （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert linkedList instanceof java.util.LinkedList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LinkedList otherLinked = [3, 4, 5] （2）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert otherLinked instanceof java.util.LinkedList&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（1）我们使用as操作符进行类型转换，显式请求一个java.util.LinkedList实现&lt;br&gt;（2）我们使用类型为java.util.LinkedList的变量保存列表字面量&lt;/p&gt;
&lt;p&gt;你能通过下标操作符&lt;code&gt;[](读和写元素值)&lt;/code&gt;并使用正索引值访问列表元素或负索引值从列表尾部访问元素，也可以使用范围，或使用左移&amp;lt;&amp;lt;追加列表元素：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def letters = [&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, &amp;apos;c&amp;apos;, &amp;apos;d&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert letters[0] == &amp;apos;a&amp;apos; （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert letters[1] == &amp;apos;b&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert letters[-1] == &amp;apos;d&amp;apos; （2）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert letters[-2] == &amp;apos;c&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;letters[2] = &amp;apos;C&amp;apos; （3）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert letters[2] == &amp;apos;C&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;letters &amp;lt;&amp;lt; &amp;apos;e&amp;apos; （4）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert letters[ 4] == &amp;apos;e&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert letters[-1] == &amp;apos;e&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert letters[1, 3] == [&amp;apos;b&amp;apos;, &amp;apos;d&amp;apos;] （5）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert letters[2..4] == [&amp;apos;C&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;e&amp;apos;] （6）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（1）访问列表的第一个元素（索引从零开始计算）&lt;/p&gt;
&lt;p&gt;（2）使用负索引访问列表的最后一个元素：-1是列表从尾部开始的第一个元素&lt;/p&gt;
&lt;p&gt;（3）使用赋值操作为列表的第三个元素设置一个新值&lt;/p&gt;
&lt;p&gt;（4）使用&amp;lt;&amp;lt;左移操作符在列表尾部追加一个元素&lt;/p&gt;
&lt;p&gt;（5）一次访问两个元素，并返回一个包含这两个元素的新列表&lt;/p&gt;
&lt;p&gt;（6）使用范围访问列表中这个范围内的元素，从start到end元素位置&lt;/p&gt;
&lt;p&gt;因为列表可以很自然的做到元素类型不同，因此列表也可以包含列表用于创建多维列表：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def multi = [[0, 1], [2, 3]] （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert multi[1][0] == 2 （2）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（1）定义一个数字列表的列表&lt;/p&gt;
&lt;p&gt;（2）访问顶级列表的第二个元素，内部列表的第一个元素&lt;/p&gt;
&lt;h3 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h3&gt;&lt;p&gt;Groovy使用列表标记来标记数组，但为了创建字面量数组，你需要通过类型转换或类型定义来定义数组类型。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String[] arrStr = [&amp;apos;Ananas&amp;apos;, &amp;apos;Banana&amp;apos;, &amp;apos;Kiwi&amp;apos;] （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert arrStr instanceof String[] （2）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert !(arrStr instanceof List)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def numArr = [1, 2, 3] as int[] （3）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert numArr instanceof int[] （4）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert numArr.size() == 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（1）使用显式变量类型定义一个字符串数组&lt;/p&gt;
&lt;p&gt;（2）断言说明我们创建了一个字符串数组&lt;/p&gt;
&lt;p&gt;（3）使用as操作符创建以int数组&lt;/p&gt;
&lt;p&gt;（4）断言表明我们创建了一个原始类型的int数组&lt;/p&gt;
&lt;p&gt;你也能创建多维数组：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def matrix3 = new Integer[3][3] （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert matrix3.size() == 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Integer[][] matrix2 （2）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;matrix2 = [[1, 2], [3, 4]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert matrix2 instanceof Integer[][]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（1）你能定义一个新数组的边界&lt;/p&gt;
&lt;p&gt;（2）或不指定它的边界定义一个新数组&lt;/p&gt;
&lt;p&gt;通过与列表相同的标记访问数组的元素：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String[] names = [&amp;apos;Cédric&amp;apos;, &amp;apos;Guillaume&amp;apos;, &amp;apos;Jochen&amp;apos;, &amp;apos;Paul&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert names[0] == &amp;apos;Cédric&amp;apos; （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;names[2] = &amp;apos;Blackdrag&amp;apos; （2）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert names[2] == &amp;apos;Blackdrag&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（1）取得数组的第一个元素&lt;/p&gt;
&lt;p&gt;（2）为数组的第三个元素设置一个新值&lt;/p&gt;
&lt;p&gt;Java数组初始化标记Groovy不支持，因为大括号会被误解为Groovy的闭包标记。&lt;/p&gt;
&lt;h3 id=&quot;映射&quot;&gt;&lt;a href=&quot;#映射&quot; class=&quot;headerlink&quot; title=&quot;映射&quot;&gt;&lt;/a&gt;映射&lt;/h3&gt;&lt;p&gt;在其它语言中，有时候称为字典或关联数组，Groovy称为映射。映射使键到值关联，使用冒号将键值分隔开，每个键值对使用逗号，整个键和值使用方括号包围。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def colors = [red: &amp;apos;#FF0000&amp;apos;, green: &amp;apos;#00FF00&amp;apos;, blue: &amp;apos;#0000FF&amp;apos;] （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert colors[&amp;apos;red&amp;apos;] == &amp;apos;#FF0000&amp;apos; （2）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert colors.green == &amp;apos;#00FF00&amp;apos; （3）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;colors[&amp;apos;pink&amp;apos;] = &amp;apos;#FF00FF&amp;apos; （4）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;colors.yellow = &amp;apos;#FFFF00&amp;apos; （5）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert colors.pink == &amp;apos;#FF00FF&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert colors[&amp;apos;yellow&amp;apos;] == &amp;apos;#FFFF00&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert colors instanceof java.util.LinkedHashMap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; (1）我们定义了一个字符串颜色名关联十六进制的html颜色的映射&lt;/p&gt;
&lt;p&gt;（2）我们使用下标标记检查red键值关联的内容&lt;/p&gt;
&lt;p&gt;（3）我们也能使用属性标记访问绿颜色十六进制表达式&lt;/p&gt;
&lt;p&gt;（4）相似的，我们也能使用下标标记添加一个新的键值对&lt;/p&gt;
&lt;p&gt;（5）或者使用属性标记添加yellow颜色&lt;/p&gt;
&lt;p&gt;当使用这些键的名字时，我们实际上在映射中定义了一个键值。&lt;br&gt;Groovy创建的映射实际是java.util.LinkedHashMap的实例。&lt;/p&gt;
&lt;p&gt;如果你尝试在映射中访问不存在的键：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;assert colors.unknown == null&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你将取回null。&lt;/p&gt;
&lt;p&gt;在上面的示例中我们使用字符串键值，你也可以使用其他类型作为键值：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def numbers = [1: &amp;apos;one&amp;apos;, 2: &amp;apos;two&amp;apos;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert numbers[1] == &amp;apos;one&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们使用数字作为键值，作为数字能清楚的识别数字，因此Groovy不会像之前的示例一样创建一个字符串的键。但是考虑你想传递一个变量代替键的情况下，有一个变量值将会作为键：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def key = &amp;apos;name&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def person = [key: &amp;apos;Guillaume&amp;apos;] （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert !person.containsKey(&amp;apos;name&amp;apos;) （2）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert person.containsKey(&amp;apos;key&amp;apos;) （3）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（1）key同’Guillaume’关联，名字将会变为”key”字符串，而不是其值&lt;/p&gt;
&lt;p&gt;（2）这个映射不包括”name”键&lt;/p&gt;
&lt;p&gt;（3）代替的是，映射包括一个”key”键&lt;/p&gt;
&lt;p&gt;你也能通过引用的字符串以及键: [“name”: “Guillaume”]。如果你的见字符串不是一个合法的标识符，这是强制的，例如，如果你想创建一个字符串键像哈希：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&amp;quot;street-name&amp;quot;: &amp;quot;Main street&amp;quot;]。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在映射定义中需要传递变量值，你必须使用圆括号包围这个变量或表达式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;person = [(key): &amp;apos;Guillaume&amp;apos;] （1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert person.containsKey(&amp;apos;name&amp;apos;) （2）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert !person.containsKey(&amp;apos;key&amp;apos;) （3）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（1）这次，我们使用圆括号包围key变量，指示解析器我们传递一个变量，而不是定义一个字符串键&lt;/p&gt;
&lt;p&gt;（2）映射包含name键&lt;/p&gt;
&lt;p&gt;（3）但映射不像之前包含key键&lt;/p&gt;
&lt;h2 id=&quot;Groovy-函数与闭包&quot;&gt;&lt;a href=&quot;#Groovy-函数与闭包&quot; class=&quot;headerlink&quot; title=&quot;Groovy 函数与闭包&quot;&gt;&lt;/a&gt;Groovy 函数与闭包&lt;/h2&gt;&lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;p&gt;有些人可能对函数和方法的叫法一直不太清楚。事实上没有本质区别，在面向过程的语言中一般称为函数，在函数式编程中一般都叫做函数。方法的一般是类的方法，在某一个类中定义的称之为方法。&lt;/p&gt;
&lt;p&gt;在Groovy中除非指定了确定的返回类型，void也可以作为返回值的一种，否则定义函数必须加上关键字def。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String getString()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def getDef()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void printSomething()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &amp;quot;hello worlld&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//错误的定义，编译可以通过，但是运行时报错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//getString()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//    return &amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在定义函数需要传参时可以不设置设置参数的类型，默认是Object类型的，如果用def关键字设置参数类型，事实上也是使用的Object定义参数的。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def printSomething01(param)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println param&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def printSomething02(int param)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println param&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def printSomething03(def param)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println param&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在调用函数时，如果所定义的函数有参数，在使用的时候可以不使用括号，但是必须得传入参数，参数与函数名以空格隔开。&lt;/p&gt;
&lt;p&gt;如果不出入参数必须添加括号，否则代码编译可以通过，但是运行时会出错，会将函数误认为是一个属性。&lt;/p&gt;
&lt;p&gt;如果所定义的函数没有参数，在调用的时候必须添加括号，否则运行出错，会将函数误认为是一个属性。&lt;/p&gt;
&lt;p&gt;函数调用的时候参数的个数必须匹配，否则也会报错，提示没有定义该函数，如果单个参数除外，可以不用输入参数，系统默认赋值null。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def printSomething(param01,param02)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println param01+param02&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printSomething (&amp;quot;hello&amp;quot;,&amp;quot;world&amp;quot;)//helloworld&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printSomething &amp;quot;hello&amp;quot;,&amp;quot;world&amp;quot;//helloworld&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//参数个数不对，报错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//printSomething (&amp;quot;hello&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def printOne(param)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println param&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printOne()//null&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;函数可以有返回值，如果有显示地使用return关键字，则返回return指定的返回值，其后面的语句不再执行。&lt;/p&gt;
&lt;p&gt;如果没有显式地使用return关键字，则返回函数最后一行语句的运行结果。&lt;/p&gt;
&lt;p&gt;如果使用void关键字代替def关键字定义函数，则函数的返回值将为null。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def printSomething()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;quot;hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &amp;quot;world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println printSomething()//hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def printSomething01()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println printSomething01()//1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def printSomething02()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println printSomething02()//hello world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;支持函数重载，当参数个数不同时，函数名称可以同名。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def printSomething(param)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println param&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def printSomething(param01,param02)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println param01+&amp;quot; &amp;quot;+param02&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printSomething(&amp;quot;hello&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printSomething(&amp;quot;hello&amp;quot;,&amp;quot;world&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;函数内不可以访问函数外的变量&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int m=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def n=&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def printSomething()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println m//error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println n//error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printSomething()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Groovy支持不定长参数。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def printSomething(... params) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println(params[0])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printSomething(&amp;quot;hello&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printSomething(&amp;quot;hello&amp;quot;,&amp;quot;world&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;函数可以赋值给其它函数，使用语法标记&amp;amp;将函数赋予新的函数。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def printSomething() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println(&amp;quot;hello world&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//printSomething不可以加括号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def printHello=this.&amp;amp;printSomething&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printHello()          //hello world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printSomething()      //hello world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h3&gt;&lt;p&gt;Groovy中闭包是这么定义的:可以用作函数参数和方法参数的代码块。可以把这个代码块理解为一个函数指针。&lt;/p&gt;
&lt;p&gt;闭包的定义格式：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def xxx = &amp;#123; params -&amp;gt; code &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def xxx=&amp;#123;code&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;闭包可以访问外部的变量，记住一点方法是不能访问外部变量的。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def str=&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def closure=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println str&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;closure()//hello world&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;闭包是有返回值的，默认最后一行语句就是该闭包的返回值，如果最后一行语句没有不输入任何类型，闭包将返回null。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def closure = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &amp;quot;I&amp;apos;m callback&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//hello world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//I&amp;apos;m callback&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println closure()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def noReturn=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//hello world&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println noReturn()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;闭包可以有参数，如果没有定义参数，会有一个隐式的默认参数it，如果没有参数可以将[参数]和[-&amp;gt;]省略。&lt;/p&gt;
&lt;p&gt;如果存在参数，在[-&amp;gt;]之前的就是参数，如果只有一个参数，参数可以省略。&lt;/p&gt;
&lt;p&gt;闭包中参数名称不能与闭包内或闭包外的参数名重名&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def closure=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &amp;quot;hello $it&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;closure(&amp;quot;admin&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def closure=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    param01,param02,param03-&amp;gt;println param01+param02+param03&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;closure &amp;quot;hello&amp;quot;,&amp;quot;world&amp;quot;,&amp;quot;ok&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def closure=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println it&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;closure &amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//编译时就不通过&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//def param&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//def closure=&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//    param-&amp;gt;println param&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;闭包可以作为一个参数传递给另一个闭包，也可以在闭包中返回一个闭包。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def toTriple = &amp;#123; n -&amp;gt; n * 3 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def runTwice = &amp;#123; a, c -&amp;gt; c(c(a)) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println runTwice(5, toTriple)//45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def times = &amp;#123; x -&amp;gt; &amp;#123; y -&amp;gt; x * y &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println times(3)(4)//12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;闭包的一些快捷写法，当闭包作为闭包或方法的最后一个参数，可以将闭包从参数圆括号中提取出来接在最后。&lt;/p&gt;
&lt;p&gt;如果闭包中不包含闭包，则闭包或方法参数所在的圆括号也可以省略。&lt;/p&gt;
&lt;p&gt;对于有多个闭包参数的，只要是在参数声明最后的，均可以按上述方式省略。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def runTwice = &amp;#123; a, c -&amp;gt; c(c(a)) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println runTwice(5, &amp;#123; it * 3 &amp;#125;) //45 usual syntax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println runTwice(5) &amp;#123; it * 3 &amp;#125; //45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def closure = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    param -&amp;gt; println param&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;closure &amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def runTwoClosures = &amp;#123; a, c1, c2 -&amp;gt; c1(c2(a)) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//when more than one closure as last params&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert runTwoClosures(5, &amp;#123; it * 3 &amp;#125;, &amp;#123; it * 4 &amp;#125;) == 60 //usual syntax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assert runTwoClosures(5) &amp;#123; it * 3 &amp;#125; &amp;#123; it * 4 &amp;#125; == 60 //shortcut form&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;闭包接受参数的规则，会将参数列表中所有有键值关系的参数，作为一个map组装，传入闭包作为调用闭包的第一个参数。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def f= &amp;#123;m, i, j-&amp;gt; i + j + m.x + m.y &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println f(6, x:4, y:3, 7)//20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果闭包的参数声明中没有list，那么传入参数可以设置为list，里面的参数将分别传入闭包参数。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;def c = &amp;#123; a, b, c -&amp;gt; a + b + c &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def list = [1, 2, 3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println c(list) // 6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Groovy-类与对象&quot;&gt;&lt;a href=&quot;#Groovy-类与对象&quot; class=&quot;headerlink&quot; title=&quot;Groovy 类与对象&quot;&gt;&lt;/a&gt;Groovy 类与对象&lt;/h2&gt;&lt;p&gt;Groovy类与Java类似，在字节码级都被编译成Java类，由于其在定义变量上面的灵活性，所以在新建一个Groovy类时还是有一些不同的，增加了许多灵活性。由于Groovy是松散型语言，它并不强制你给属性、方法参数和返回值定义类型。如果没有指定类型，在字节码级别会被编译成Object。在定义类的属性时不用刻意加上权限修饰符，默认就是public的。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Book&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    String author&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private int price&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public Book(title)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.title=title&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    boolean order(int isbn)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def title()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;Booke Title&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Book book=new Book(&amp;quot;Hello Groovy&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;book.order(1001)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;book.title//获取属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;book.title()//访问方法&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们将Book类看做是一个JavaBean，事实上Groovy在编译完成后会自动帮助我们生成getter与setter方法，但是私有属性除外也就是说price属性我们不能使用getter与setter方法。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Book book=new Book(&amp;quot;Hello Groovy&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println book.getTitle()//Hello Groovy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;book.setTitle(&amp;quot;New Groovy&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println book.getTitle()//New Groovy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println book.title////New Groovy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在Groovy中类名和文件名并不需要严格的映射关系，我们知道在Java中主类名必须与文件同名，但是在Groovy中一个文件可以定义多个public类。&lt;br&gt;在Groovy中可以定义与任何类不相关的方法和语句，这些方法通常称为独立方法或者松方法。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Hello&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static String hello()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &amp;quot;hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class World&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static String world()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &amp;quot;world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println Hello.hello()+World.world()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def helloWorld()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return &amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面一个文件名定义为Structure.groovy，在这个文件中包含了类的定义和独立方法声明，它编译之后会发生什么呢。首先会生成一个与文件同名的class文件。所有的松语句都集中在run方法中，并且run方法被该类的main方法调用。独立方法被编译成了类的静态方法。与Java相似，每一个独立的类都会被编译成一个单独的class文件。因此编译Structure.groovy文件最后会被编译成Hello.class、World.class和Structure.class。上面一个文件名定义为Structure.groovy，在这个文件中包含了类的定义和独立方法声明，它编译之后会发生什么呢。首先会生成一个与文件同名的class文件。所有的松语句都集中在run方法中，并且run方法被该类的main方法调用。独立方法被编译成了类的静态方法。与Java相似，每一个独立的类都会被编译成一个单独的class文件。因此编译Structure.groovy文件最后会被编译成Hello.class、World.class和Structure.class。&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.sunnyang.com/522.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Groovy进阶之函数、闭包和类&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://ifeve.com/groovy-syntax/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《Groovy语言规范》-语法&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Groovy是什么&quot;&gt;&lt;a href=&quot;#Groovy是什么&quot; class=&quot;headerlink&quot; title=&quot;Groovy是什么&quot;&gt;&lt;/a&gt;Groovy是什么&lt;/h2&gt;&lt;p&gt;Groovy是一种基于JVM（Java虚拟机）的敏捷开发语言，它结合了Python、Ruby和Smalltalk的许多强大的特性，Groovy 代码能够与 Java 代码很好地结合，也能用于扩展现有代码。由于其运行在 JVM 上的特性，Groovy 可以使用其他 Java 语言编写的库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/011/20151021205159588.png&quot; alt=&quot;Gradle for Andoid&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="gradle" scheme="http://czhzero.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Gradle for Andoid 学习笔记(一):Gradle基础</title>
    <link href="http://czhzero.com/2016/08/19/gradle-study-1/"/>
    <id>http://czhzero.com/2016/08/19/gradle-study-1/</id>
    <published>2016-08-19T05:34:59.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是Gradle&quot;&gt;&lt;a href=&quot;#什么是Gradle&quot; class=&quot;headerlink&quot; title=&quot;什么是Gradle&quot;&gt;&lt;/a&gt;什么是Gradle&lt;/h2&gt;&lt;p&gt;Gradle是一个构建系统, Android Studio默认创建的project都是基于Gradle构建脚本。在Gradle爆红之前，常用的构建工具是ANT，然后又进化到Maven。ANT和Maven这两个工具其实也还算方便，现在还有很多地方在使用。但是二者都有一些缺点，所以让更懒得人觉得不是那么方便。比如，Maven编译规则是用XML来编写的。XML虽然通俗易懂，但是很难在xml中描述if{某条件成立，编译某文件}/else{编译其他文件}这样有不同条件的任务。相比而言，Gradle使用是DSL,领域相关语言，比起xml更加方便。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Gradle具有如下特点,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;声明构建和协议构建&lt;/p&gt;
&lt;p&gt; Gradle的核心是基于Groovy的丰富的可扩展的领域特定语言（DSL），通过提供你自定义的声明语言元素，Gradle把依赖关系传递到下一层中，这些元素也提供了对很多语言的协议构建支持，比如java、Groovy，OSGI，Web和Scala项目。甚至，声明语言是可扩展的，你可以有自己的新语言元素或者是加强现有的。这样，就提供了一个简洁、易于维护和理解的构建过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;依赖型编程语言&lt;/p&gt;
&lt;p&gt; 声明式的语言构建于一个通用的任务图之上，在你的构建任务重可以充分的利用。它提供了适应你独特需求的最大灵活度的工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;结构化构建&lt;/p&gt;
&lt;p&gt; Gradle的灵活性和和丰富性允许你用通用的设计原则来构建项目。比如说，构建可重用的的逻辑块的逻辑非常简单。不要试图去强迫拆散本应该在一起的东西，比如说是项目的层次结构。这样可以避免项目太分散，因为分散的项目会导致你的构建过程变成一个噩梦！最后，你可以构建一个结构良好、易于维护、理解的构建过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;深度API&lt;/p&gt;
&lt;p&gt; 在构建执行的整个生命周期里，你可以嵌入很多的钩子，Gradle允许你检测和自定义配置和执行非常核心的行为。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gradle Scales&lt;/p&gt;
&lt;p&gt; Gradle Scales 非常好，它可以增加你的生产力。从简单的单项目到企业的多项目构建都可以。随着功能的增加，它可以解决很多大型企业构建过程中的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多项目构建&lt;/p&gt;
&lt;p&gt;   Gradle对多项目构建的支持非常好，Gradle还提供了部分构建，如果你构建一个单项目，那么Gradle会构建整个项目的目录，在多项目的构建中，你可以选择构建部分项目，增量构建可以大大的节省你的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;很多方式管理依赖&lt;/p&gt;
&lt;p&gt; 不同的团队喜欢使用不同的方式来管理外部依赖，Gradle为所有的方式都提供了支持。你可以使用远程的依赖管理库，比如Maven和ivy或者是本地的文件系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gradle是第一个集成的构建工具&lt;/p&gt;
&lt;p&gt; Ant的task是支持的，更有趣的事，Ant的project也是支持的。Gradle为Ant的项目提供了深度支持，在运行时可以把Ant的 targets转换城本地的Gradle任务。你可以在Gradle中依赖或者是改进Ant，你甚至可以在Gradle的任务重宣布对build.xml 的依赖。Gradle支持现有的Maven仓库和Ivy仓库，Gradle还提供了将Maven的pom.xml转换成Gradle脚本的工具。 Maven项目的运行时导入时代即将到来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;容易迁移&lt;/p&gt;
&lt;p&gt; Gradle可以适应你有的任何结构，因此你可以在项目运行的生产环境中进行项目构建，我们通常建议写一个测试程序来保证项目正常运行，使用Gradle可以尽可能的减少项目迁移出现的问题，这也是进行项目重构的最佳实践，也就是“baby steps”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Groovy&lt;/p&gt;
&lt;p&gt;Gradle使用Grovvy来写脚本，而不是XML，这是因为Groovy比XML的可读性更好。Gradle的设计并不是要提供一个严格的框架。 Gradle提供了一些标准，但是并不是不能修改的。这是Gradle和其他声明性构建系统的区别和特色。Groovy不仅仅是糖衣，添加Groovy得到了一个愉快和富有成效的经验。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gradle Wrapper&lt;/p&gt;
&lt;p&gt;Gradle Wrapper 允许你在没有安装Gradle的机器上运行Gradle脚本，在一些持续性的集成服务器上是非常有用的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;免费开源&lt;/p&gt;
&lt;p&gt;Gradle是开源项目，并且采用是ASL协议授权。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Android-Studio-的-Gradle-构建脚本&quot;&gt;&lt;a href=&quot;#Android-Studio-的-Gradle-构建脚本&quot; class=&quot;headerlink&quot; title=&quot;Android Studio 的 Gradle 构建脚本&quot;&gt;&lt;/a&gt;Android Studio 的 Gradle 构建脚本&lt;/h2&gt;&lt;p&gt;通过Android Studio新建一个Android项目，项目中会自动帮你创建三个gradle文件，settings.gradle,build.gradle,app/build.gradle.&lt;/p&gt;
&lt;h3 id=&quot;Android-Studio-项目结构截图&quot;&gt;&lt;a href=&quot;#Android-Studio-项目结构截图&quot; class=&quot;headerlink&quot; title=&quot;Android Studio 项目结构截图&quot;&gt;&lt;/a&gt;Android Studio 项目结构截图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/011/lALOaELhKM0Cas0BeA_376_618.png&quot; alt=&quot;Gradle for Andoid&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Android-Studio-项目目录结构&quot;&gt;&lt;a href=&quot;#Android-Studio-项目目录结构&quot; class=&quot;headerlink&quot; title=&quot;Android Studio 项目目录结构&quot;&gt;&lt;/a&gt;Android Studio 项目目录结构&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GradleStudy/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── .gitignore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── .gradle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── 2.10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── taskArtifacts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── GradleStudy.iml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── .gitignore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── app.iml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── generated&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── intermediates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   ├── outputs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── build.gradle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── libs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── proguard-rules.pro&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── src&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       ├── androidTest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       ├── main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── generated&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   │   └── mockable-android-23.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── intermediates&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── dex-cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── build.gradle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── gradle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── wrapper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       ├── gradle-wrapper.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│       └── gradle-wrapper.properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── gradle.properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── gradlew&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── gradlew.bat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── local.properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── settings.gradle&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;主要构建文件介绍&quot;&gt;&lt;a href=&quot;#主要构建文件介绍&quot; class=&quot;headerlink&quot; title=&quot;主要构建文件介绍&quot;&gt;&lt;/a&gt;主要构建文件介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;settings.gradle &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;include &amp;apos;:app&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;settings.gradle用来指定项目中所包含的子项目。’app’就是默认的子项目。你也可以通过File/New Module菜单创建新的子项目。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Top-level build.gradle &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Top-level build file where you can add configuration options common to all sub-projects/modules.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//配置gradle插件，引入android DSL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &amp;apos;com.android.tools.build:gradle:2.0.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // NOTE: Do not place your application dependencies here; they belong&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // in the individual module build.gradle files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//统一配置子项目&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allprojects &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//删除build目录内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;task clean(type: Delete) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    delete rootProject.buildDir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; Android项目根目录的gradle文件，默认的根目录gradle会做三件事，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;配置Android Gradle插件版本&lt;/li&gt;
&lt;li&gt;通过allprojects块，配置子项目&lt;/li&gt;
&lt;li&gt;清除build文件夹&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;SubProject build.gradle &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;com.android.application&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //编译sdk版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compileSdkVersion 23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //编译sdk tools的版本&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buildToolsVersion &amp;quot;23.0.3&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //默认配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    defaultConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        applicationId &amp;quot;com.chen.gradle&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        minSdkVersion 15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        targetSdkVersion 23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        versionCode 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        versionName &amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buildTypes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        release &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minifyEnabled false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//依赖管理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile fileTree(dir: &amp;apos;libs&amp;apos;, include: [&amp;apos;*.jar&amp;apos;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testCompile &amp;apos;junit:junit:4.12&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;com.android.support:appcompat-v7:23.4.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &amp;apos;com.android.support:design:23.4.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;子项目的gradle,就是具体管理项目的gradle。每个子项目都是一个Project, 分为&lt;code&gt;com.android.application&lt;/code&gt; &lt;code&gt;com.android.library&lt;/code&gt; , &lt;code&gt;com.android.test&lt;/code&gt; 三种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gradle Wrapper&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;grade只是一个构建工具，而新版本总是在更迭，所以使用Gradle Wrapper将会是一个好的选择去避免由于gradle版本更新导致的问题。Gradle Wrapper提供了一个windows的batch文件和其他系统的shell文件，当你使用这些脚本的时候，当前gradle版本将会被下载，并且会被自动用在项目的构建，所以每个开发者在构建自己app的时候只需要使用Wrapper。所以开发者不需要为你的电脑安装任何gradle版本，在mac上你只需要运行gradlew，而在windows上你只需要运行gradlew.bat。&lt;/p&gt;
&lt;p&gt;你也可以利用命令行./gradlew -v来查看当前gradle版本。下列是wrapper的文件夹：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GradleStudy/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ├── gradlew&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ├── gradlew.bat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; └── gradle/wrapper/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ├── gradle-wrapper.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     └── gradle-wrapper.properties&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到一个bat文件针对windows系统，一个shell脚本针对mac系统，一个jar文件，一个配置文件。配置文件包含以下信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#Mon Dec 28 10:00:20 PST 2015&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;distributionBase=GRADLE_USER_HOME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;distributionPath=wrapper/dists&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zipStoreBase=GRADLE_USER_HOME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zipStorePath=wrapper/dists&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改配置这个配置文件，就可以更改gradle版本。&lt;/p&gt;
&lt;p&gt;另外通过Android Studio, 也可以修改Gradle版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/005/lALOXyEtXczizQUC_1282_226.png&quot; alt=&quot;Gradle Version&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gradle.properties&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;gradle的配置文件，一般用配置一些project的属性，或者 gradle属性.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 配置用户名/密码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NEXUS_USERNAME=deployment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NEXUS_PASSWORD=deployment123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#配置JVM&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#配置并行编译&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;org.gradle.parallel=true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#配置守护进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;org.gradle.daemon=true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Gradle-工作流程&quot;&gt;&lt;a href=&quot;#Gradle-工作流程&quot; class=&quot;headerlink&quot; title=&quot;Gradle 工作流程&quot;&gt;&lt;/a&gt;Gradle 工作流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/011/20150905194317170.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Gradle执行的生命周期，包含三个阶段，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初始化阶段：执行settings.gradle , project实例在这儿创建，如果有多个模块，即有多个build.gradle文件，多个project将会被创建。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置阶段：在该阶段，解析每个project中的build.gradle。比如multi-project build例子中，解析每个子目录中的build.gradle。在这两个阶段之间，我们可以加一些定制化的Hook。这当然是通过API来添加的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行阶段：这一阶段，gradle会决定哪一个tasks会被执行，哪一个tasks会被执行完全依赖开始构建时传入的参数和当前所在的文件夹位置有关。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在settings.gradle添加如下内容,&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gradle.beforeProject &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Project project -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        println project.name + &amp;quot; is before Project&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gradle.taskGraph.whenReady &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TaskExecutionGraph graph -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        println graph.allTasks.each &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Task task -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                println task.name + &amp;apos;is ready&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gradle.buildFinished &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println &amp;apos;gralde build finish&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GradleStudy is before Project		//主项目&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app is before Project				//子项目&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;preBuildis ready&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;preDebugBuildis ready&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;checkDebugManifestis ready&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;preReleaseBuildis ready&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prepareComAndroidSupportAnimatedVectorDrawable2340Libraryis ready&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prepareComAndroidSupportAppcompatV72340Libraryis ready&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prepareComAndroidSupportDesign2340Libraryis ready&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prepareComAndroidSupportRecyclerviewV72340Libraryis ready&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prepareComAndroidSupportSupportV42340Libraryis ready&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prepareComAndroidSupportSupportVectorDrawable2340Libraryis ready&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prepareDebugDependenciesis ready&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compileDebugAidlis ready&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:app:preBuild UP-TO-DATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:app:preDebugBuild UP-TO-DATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:app:checkDebugManifest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:app:preReleaseBuild UP-TO-DATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:app:prepareComAndroidSupportAnimatedVectorDrawable2340Library UP-TO-DATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:app:prepareComAndroidSupportAppcompatV72340Library UP-TO-DATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:app:prepareComAndroidSupportDesign2340Library UP-TO-DATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:app:prepareComAndroidSupportRecyclerviewV72340Library UP-TO-DATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:app:prepareComAndroidSupportSupportV42340Library UP-TO-DATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:app:prepareComAndroidSupportSupportVectorDrawable2340Library UP-TO-DATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:app:prepareDebugDependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:app:compileDebugAidl UP-TO-DATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:app:compileDebugRenderscript UP-TO-DATE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BUILD SUCCESSFUL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total time: 6.882 secs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gralde build finish   //最后显示&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Gradle-基本组件&quot;&gt;&lt;a href=&quot;#Gradle-基本组件&quot; class=&quot;headerlink&quot; title=&quot;Gradle 基本组件&quot;&gt;&lt;/a&gt;Gradle 基本组件&lt;/h2&gt;&lt;p&gt;Gradle中，每一个待编译的工程都叫一个Project。每一个Project在构建的时候都包含一系列的Task。比如一个Android APK的编译可能包含：Java源码编译Task、资源编译Task、JNI编译Task、lint检查Task、打包生成APK的Task、签名Task等。&lt;br&gt;一个Project到底包含多少个Task，其实是由编译脚本指定的插件决定。插件是什么呢？插件就是用来定义Task，并具体执行这些Task的东西。&lt;br&gt;刚才说了，Gradle是一个框架，作为框架，它负责定义流程和规则。而具体的编译工作则是通过插件的方式来完成的。比如编译Java有Java插件，编译Groovy有Groovy插件，编译Android APP有Android APP插件，编译Android Library有Android Library插件&lt;br&gt;好了。到现在为止，你知道Gradle中每一个待编译的工程都是一个Project，一个具体的编译过程是由一个一个的Task来定义和执行的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每一个Library和每一个App都是单独的Project。根据Gradle的要求，每一个Project在其根目录下都需要有一个build.gradle。build.gradle文件就是该Project的编译脚本，类似于Makefile。&lt;/p&gt;
&lt;p&gt;对于multi-projects build，需要在根目录下也放一个build.gradle，和一个settings.gradle&lt;/p&gt;
&lt;p&gt;一个Project是由若干tasks来组成的，当gradle xxx的时候，实际上是要求gradle执行xxx任务。这个任务就能完成具体的工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;./gradlew projects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看project数目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;./gradlew :tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;查看所有的任务&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;All tasks runnable from root project&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Android tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;androidDependencies - Displays the Android dependencies of the project.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;signingReport - Displays the signing info for each variant.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceSets - Prints out all the source sets defined in this project.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assemble - Assembles all variants of all applications and secondary packages.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assembleAndroidTest - Assembles all the Test applications.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assembleDebug - Assembles all Debug builds.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;assembleRelease - Assembles all Release builds.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;build - Assembles and tests this project.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;buildDependents - Assembles and tests this project and all projects that depend on it.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;buildNeeded - Assembles and tests this project and all projects it depends on.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clean - Deletes the build directory.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compileDebugAndroidTestSources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compileDebugSources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compileDebugUnitTestSources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compileReleaseSources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compileReleaseUnitTestSources&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mockableAndroidJar - Creates a version of android.jar that&amp;apos;s suitable for unit tests.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build Setup tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;init - Initializes a new Gradle build. [incubating]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wrapper - Generates Gradle wrapper files. [incubating]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Help tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;buildEnvironment - Displays all buildscript dependencies declared in root project &amp;apos;GradleStudy&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;components - Displays the components produced by root project &amp;apos;GradleStudy&amp;apos;. [incubating]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies - Displays all dependencies declared in root project &amp;apos;GradleStudy&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencyInsight - Displays the insight into a specific dependency in root project &amp;apos;GradleStudy&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;help - Displays a help message.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;model - Displays the configuration model of root project &amp;apos;GradleStudy&amp;apos;. [incubating]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;projects - Displays the sub-projects of root project &amp;apos;GradleStudy&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;properties - Displays the properties of root project &amp;apos;GradleStudy&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tasks - Displays the tasks runnable from root project &amp;apos;GradleStudy&amp;apos; (some of the displayed tasks may belong to subprojects).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Install tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;installDebug - Installs the Debug build.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;installDebugAndroidTest - Installs the android (on device) tests for the Debug build.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uninstallAll - Uninstall all applications.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uninstallDebug - Uninstalls the Debug build.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uninstallDebugAndroidTest - Uninstalls the android (on device) tests for the Debug build.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uninstallRelease - Uninstalls the Release build.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Verification tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;check - Runs all checks.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;connectedAndroidTest - Installs and runs instrumentation tests for all flavors on connected devices.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;connectedCheck - Runs all device checks on currently connected devices.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;connectedDebugAndroidTest - Installs and runs the tests for debug on connected devices.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deviceAndroidTest - Installs and runs instrumentation tests using all Device Providers.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deviceCheck - Runs all device checks using Device Providers and Test Servers.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lint - Runs lint on all variants.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lintDebug - Runs lint on the Debug build.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lintRelease - Runs lint on the Release build.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test - Run unit tests for all variants.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;testDebugUnitTest - Run unit tests for the debug build.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;testReleaseUnitTest - Run unit tests for the release build.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Other tasks&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-----------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jarDebugClasses&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jarReleaseClasses&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;transformResourcesWithMergeJavaResForDebugUnitTest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;transformResourcesWithMergeJavaResForReleaseUnitTest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;./gradlew build&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目代码编译&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;./gradlew clean&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;清除项目build临时文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;./gradlew assemble&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打包命令，会生成两个debug和release两种类型的apk，&lt;br&gt;如果要单独生成指定类型apk. 可执行 &lt;code&gt;./gradlew assembleRelease&lt;/code&gt;&lt;br&gt;和 &lt;code&gt;./gradlew assembleDebug&lt;/code&gt; 两个命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;./gradlew androidDependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显示项目所有的依赖包&lt;/p&gt;
&lt;h3 id=&quot;常用命令参数&quot;&gt;&lt;a href=&quot;#常用命令参数&quot; class=&quot;headerlink&quot; title=&quot;常用命令参数&quot;&gt;&lt;/a&gt;常用命令参数&lt;/h3&gt;&lt;p&gt;gradle命令可以同时执行多个任务, 多任务之间用空格隔开,&lt;br&gt;若包含多个相同任务，也只会执行一次。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./gradlew lint assembleDebug&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;gradle执行task时，可以提前指定执行task的模块,&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 执行task的help指令&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./gradlew help --task androidDependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:help&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Detailed task information for androidDependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Paths&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     :account:androidDependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     :app:androidDependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     :base:androidDependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     :task:androidDependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     :team:androidDependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     :tools:androidDependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     :libraries:android-library-fengxin:androidDependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 从上述命令结果，可知，每个子模块，都存在一个androidDependencies任务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 因此可以针对单个模块执行对应的任务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./gradlew :account:androidDependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./gradlew :task:androidDependencies&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;gradle可以通过 -x 命令排除制定的任务, 多个任务间用逗号隔开。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./gradlew assembleDebug -x lintDebug&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;gradle可以通过&lt;code&gt;-P&lt;/code&gt;命令设置属性值，传参数给task。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;## 设置一个名为suffix的属性，属性值为test。在项目的build.gradle中均可以获取到。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./gradlew assemble -Psuffix=test&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你的gradle文件没有在build.gradle中调用，你可以使用 -b 命令&lt;br&gt;直接指定需要运行的gradle文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./gradlew -b config/dependencies.gradle&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;gradle的任务名称，可以进行简写，只要能够唯一确定该任务，即可。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 下面这三个命名就是等价的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./gradlew assembleRelease&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./gradlew aR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; ./gradlew aRel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;通过Android-Studio执行Task&quot;&gt;&lt;a href=&quot;#通过Android-Studio执行Task&quot; class=&quot;headerlink&quot; title=&quot;通过Android Studio执行Task&quot;&gt;&lt;/a&gt;通过Android Studio执行Task&lt;/h3&gt;&lt;p&gt;Android Studio在界面最右侧，有个Gradle Project浮动窗，&lt;br&gt;打开后，里面将项目中所有的task都放在了里面，双击即可运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/011/lALOaFpKs80CXM0CWw_603_604.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;本章主要介绍了Gradle的基础知识，以及整个Android Studio结构，看完应该会对整个Android Studio的构建过程有些了解了。&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004229002&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle for Android 第一篇( 从 Gradle 和 AS 开始 )&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gradle.org/getting-started-android-build/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gradle Recipes for Android&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/innost/article/details/48228651&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解Android之Gradle&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Gradle&quot;&gt;&lt;a href=&quot;#什么是Gradle&quot; class=&quot;headerlink&quot; title=&quot;什么是Gradle&quot;&gt;&lt;/a&gt;什么是Gradle&lt;/h2&gt;&lt;p&gt;Gradle是一个构建系统, Android Studio默认创建的project都是基于Gradle构建脚本。在Gradle爆红之前，常用的构建工具是ANT，然后又进化到Maven。ANT和Maven这两个工具其实也还算方便，现在还有很多地方在使用。但是二者都有一些缺点，所以让更懒得人觉得不是那么方便。比如，Maven编译规则是用XML来编写的。XML虽然通俗易懂，但是很难在xml中描述if{某条件成立，编译某文件}/else{编译其他文件}这样有不同条件的任务。相比而言，Gradle使用是DSL,领域相关语言，比起xml更加方便。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="gradle" scheme="http://czhzero.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio提高开发效率必备神器 - JRebel for Android</title>
    <link href="http://czhzero.com/2016/08/10/jrebel-for-android-guide/"/>
    <id>http://czhzero.com/2016/08/10/jrebel-for-android-guide/</id>
    <published>2016-08-10T06:28:26.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;Android开发的同学都知道，随着Android项目越来越大，编译时间也会逐步增加，项目里随便改几行代码，重新编译一下，少则几十秒，多则三四分钟，实在让人崩溃。网上很多技术博客都提出了各种提高编译速度的版本，本人也试验过&lt;a href=&quot;http://www.czhzero.com/2016/07/21/android-studio-compile-speed-up/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;很多方法&lt;/strong&gt;&lt;/a&gt;，收效甚微。&lt;/p&gt;
&lt;p&gt;这篇文章想给大家介绍的内容就是一个让你不用再苦等的AndroidStudio插件工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JRebel for Android&lt;/p&gt;
&lt;p&gt;官网地址: &lt;a href=&quot;http://zeroturnaround.com/software/jrebel-for-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zeroturnaround.com/software/jrebel-for-android/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;h2 id=&quot;JRebel功能介绍&quot;&gt;&lt;a href=&quot;#JRebel功能介绍&quot; class=&quot;headerlink&quot; title=&quot;JRebel功能介绍&quot;&gt;&lt;/a&gt;JRebel功能介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;跳过编译，直接安装运行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JRebel的Run功能和Android Studio的Run功能不同，它不会每次Run都检查编译一下所有代码，相反它每次只会处理你修改过的代码，并且直接运行到你的机器上去。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/010/Card1_18_@2x.gif&quot; alt=&quot;JRebel&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时调整UI布局&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很多时候Android开发人员会接到产品经理的 “把这个字体改大一点，我看看效果” “把这个按钮先临时隐藏掉” 等等诸如此类需求。虽然只是修改一行代码，但是我们编译运行要三四分钟。是不是很痛苦？&lt;/p&gt;
&lt;p&gt;这个时候只要点击一下JRebel的 &lt;strong&gt;[Apply Changes ]&lt;/strong&gt; 按钮。你的修改便会直接显现到你的app上，而且你的app都不会回到登录页面，还是停留在原来的页面。是不是很牛？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/010/Card2_18_@2x.gif&quot; alt=&quot;JRebel&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方便快捷的修改bug&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;修改bug时候的时候，与调整ui一样快捷，只需十秒钟就可以验证。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/010/Card3_18_@2x.gif&quot; alt=&quot;JRebel&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;JRebel安装与使用&quot;&gt;&lt;a href=&quot;#JRebel安装与使用&quot; class=&quot;headerlink&quot; title=&quot;JRebel安装与使用&quot;&gt;&lt;/a&gt;JRebel安装与使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过AndroidStudiox下载插件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开AndroidStudio的Prefrences菜单，按下图操作，即可下载安装&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/010/lALOZk-yXc0Cxs0Ejw_1167_710.png&quot; alt=&quot;JRebel&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/010/lALOZk-0Ac0Ci80DJw_807_651.png&quot; alt=&quot;JRebel&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果下载速度过慢，可以先用迅雷下载安装包，再选择本地安装。&lt;a href=&quot;http://7xvouf.com1.z0.glb.clouddn.com/jrebel-for-android.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jrebel for Android 1.3.2 下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/010/lALOZmOPi80C0c0Feg_1402_721.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JRebel使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安装完成后，系统提示你重启AndroidStudio,重启后，会再提示你输入Lisence或者进行试用。&lt;/p&gt;
&lt;p&gt;这里我选择的是试用21天。操作完成后，工具栏多出三个按钮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/010/lALOZlAoTE7NAuA_736_78.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;同时Run菜单栏也会多次三个选项菜单。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/010/lALOZlAqrs0Bqc0BUg_338_425.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选项一是JRebel Run, 相当于官方的Run&lt;/li&gt;
&lt;li&gt;选项二是JRebel Debug, 相当于官方的Debug&lt;/li&gt;
&lt;li&gt;选项三是Apply Changes, 可以不重启app,直接将修改应用到app中。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，只有先运行选项一或者选择二之后，才能运行三。另外，[Apply Changes]在某些Android 6.0以上机器上无法正常使用，不过选项一和选项二是是可以使用的。期待官方修复这个问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;Jrebel for Android 与 Android Studio 2.0官方的Instant Run对Sdk版本没什么限制。同时官方Instant Run在使用时仍然有许多限制，具体可参看&lt;a href=&quot;https://developer.android.com/studio/run/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Developers&lt;/a&gt;。不过可惜的是，Jrebel for Android并不是免费的，如何选择，各位看官就仁者见仁智者见智了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android开发的同学都知道，随着Android项目越来越大，编译时间也会逐步增加，项目里随便改几行代码，重新编译一下，少则几十秒，多则三四分钟，实在让人崩溃。网上很多技术博客都提出了各种提高编译速度的版本，本人也试验过&lt;a href=&quot;http://www.czhzero.com/2016/07/21/android-studio-compile-speed-up/&quot;&gt;&lt;strong&gt;很多方法&lt;/strong&gt;&lt;/a&gt;，收效甚微。&lt;/p&gt;
&lt;p&gt;这篇文章想给大家介绍的内容就是一个让你不用再苦等的AndroidStudio插件工具。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JRebel for Android&lt;/p&gt;
&lt;p&gt;官网地址: &lt;a href=&quot;http://zeroturnaround.com/software/jrebel-for-android/&quot;&gt;http://zeroturnaround.com/software/jrebel-for-android/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="JRebel" scheme="http://czhzero.com/tags/JRebel/"/>
    
  </entry>
  
  <entry>
    <title>解读Android6.0新功能和Api变更</title>
    <link href="http://czhzero.com/2016/07/31/android-6-0-changes/"/>
    <id>http://czhzero.com/2016/07/31/android-6-0-changes/</id>
    <published>2016-07-31T10:59:35.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;从 Android A 到 Android M，Android 的每个甜品的变化的细节里都是新版本的改进。上一个大版本 Android 5.0（也就是 Android L）为我们带来了 Material Design 清爽但不失细节的设计风格，从此原生 Android 的颜值终于在舆论中得到了普遍赞誉；而在 Android 6.0 中，我们得到的更多是内在的提升。&lt;/p&gt;
&lt;p&gt;新功能在使用体验上提升的效果是非常明显的，内在体验优化的意义不亚于全新的设计语言带来的新鲜感与友好度的提升。从外表到内在，我们看到的是一个更为成熟的 Android 系统。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你之前已经发布过 Android 应用程序，要意识到这些变更对应用程序的影响。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Runtime-Permissions-运行时权限&quot;&gt;&lt;a href=&quot;#Runtime-Permissions-运行时权限&quot; class=&quot;headerlink&quot; title=&quot;Runtime Permissions (运行时权限)&quot;&gt;&lt;/a&gt;Runtime Permissions (运行时权限)&lt;/h1&gt;&lt;p&gt;这个版本中引入了新的权限模型，现在用户可以在运行时直接管理应用程序的权限。这个模型基于用户对权限控制的更多可见性，同时为应用程序的开发者提供更流畅的应用安装和自动升级。用户可以为已安装的每个应用程序独立的授予或者取消权限。&lt;/p&gt;
&lt;p&gt;在运行于目标版本 Android 6.0 (API 级别 23) 及以上的应用程序中，必须在运行时检查并请求权限。通过新的 checkSelfPermission() 方法来确定你的应用程序是否已经被授权。通过新的 requestPermissions() 方法来请求权限。即使你的应用程序运行的目标版本不是 Android 6.0 (API 级别 23)，你也应该在新的授权模型下来测试应用程序。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/008/Android-m-4.jpg&quot; alt=&quot;解读Android6.0新功能和Api变更&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Doze-and-App-Standby-休眠与应用挂起&quot;&gt;&lt;a href=&quot;#Doze-and-App-Standby-休眠与应用挂起&quot; class=&quot;headerlink&quot; title=&quot;Doze and App Standby(休眠与应用挂起)&quot;&gt;&lt;/a&gt;Doze and App Standby(休眠与应用挂起)&lt;/h1&gt;&lt;p&gt;这个版本为空闲的设备和应用程序引入了电源节能优化。这个特性将影响所有应用程序，故确保自己的应用程序在这些新模式下进行测试。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;休眠：如果用户将设备拔下，并将其静置，关闭屏幕，经过一段时间，设备将进入休眠模式。这时候，设备试图让系统保持在一个睡眠的状态。这种模式下，设备周期性的恢复平常的操作，以便应用程序同步，系统则可以处理一些延时的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用挂起：应用挂起则允许系统当用户不再使用应用程序时，将其定义为空闲。当用户经过一段时间没有触摸应用程序时，系统可以做这个决定。设备被拔线时，系统禁用网络访问，停止应用程序的同步及操作，则被认为是空闲。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Apache-HTTP-Client-Removal-移除-Apache-HTTP-客户端&quot;&gt;&lt;a href=&quot;#Apache-HTTP-Client-Removal-移除-Apache-HTTP-客户端&quot; class=&quot;headerlink&quot; title=&quot;Apache HTTP Client Removal (移除 Apache HTTP 客户端)&quot;&gt;&lt;/a&gt;Apache HTTP Client Removal (移除 Apache HTTP 客户端)&lt;/h1&gt;&lt;p&gt;Android 6.0 发布版移除了对 Apache HTTP 客户端的支持。如果你的应用程序使用该客户端，并且目标运行版本为 Android 2.3 (API 级别9) 及以上，需要使用 HttpURLConnection 类来代替。这个 API 更加的高效，因为它通过对用户透明的压缩、响应缓存来减少网络开销，并最小化电量消耗。要继续使用 Apache HTTP 的 API，你需要在 build.gradle 文件中声明下面的编译期依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    useLibrary &amp;apos;org.apache.http.legacy&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;BoringSSL&quot;&gt;&lt;a href=&quot;#BoringSSL&quot; class=&quot;headerlink&quot; title=&quot;BoringSSL&quot;&gt;&lt;/a&gt;BoringSSL&lt;/h1&gt;&lt;p&gt;Android 从 OpenSSL 转移到了 BoringSSL 库。如果你在应用程序中使用 Android NDK，千万不要将加密库链接到除 NDK API 之外的任何库，如 libcrypto.so 和 libssl.so。这些库不是公开 API，有可能在没有收到通知的情况下在发布版和设备间发生变更或中断。这种情况你将把自己暴露在安全威胁下。你应该修改自己的本地代码来通过 JNI 调用 Java 加密 API 或者静态链接你选择的一个加密库。&lt;/p&gt;
&lt;h1 id=&quot;Access-to-Hardware-Identifier-访问硬件标识符&quot;&gt;&lt;a href=&quot;#Access-to-Hardware-Identifier-访问硬件标识符&quot; class=&quot;headerlink&quot; title=&quot;Access to Hardware Identifier (访问硬件标识符)&quot;&gt;&lt;/a&gt;Access to Hardware Identifier (访问硬件标识符)&lt;/h1&gt;&lt;p&gt;为了给用户更多的数据保护，从这个版本开始， Android 移除了通过 WiFi 和蓝牙 API 来在应用程序中可编程的访问本地硬件标示符。现在 WifiInfo.getMacAddress() 和 BluetoothAdapter.getAddress() 方法都将返回 02:00:00:00:00:00 常量。&lt;/p&gt;
&lt;p&gt;要通过蓝牙和 WiFi 扫描来访问附近外部设备的硬件标示符，应用程序需要 ACCESS_FINE_LOCATION 和 ACCESS_COARSE_LOCATION 权限：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WifiManager.getScanResults())&lt;/li&gt;
&lt;li&gt;BluetoothDevice.ACTION_FOUND&lt;/li&gt;
&lt;li&gt;BluetoothLeScanner.startScan())&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：在一个运行 Android 6.0 (API 级别 23) 的设备初始化后台的 WiFi 或蓝牙扫描时，操作对于外部设备是可见的，且被赋予一个随机的 MAC 地址。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Notifications-通知&quot;&gt;&lt;a href=&quot;#Notifications-通知&quot; class=&quot;headerlink&quot; title=&quot;Notifications (通知)&quot;&gt;&lt;/a&gt;Notifications (通知)&lt;/h1&gt;&lt;p&gt;这个版本移除了 Notification.setLatestEventInfo() 方法。使用 Notification.Builder 类来代替构造方法。要重复的更新通知，要重用 Notification.Builder 实例。调用 build() 方法来获取更新过的 Notification 实例。&lt;/p&gt;
&lt;p&gt;adb shell dumpsys nnotification 命令不在答应通知文本。使用 adb shell dumpsys notification –noredcat 命令来在同志对象中打印文本。&lt;/p&gt;
&lt;h1 id=&quot;AudioManager-Changes-AudioManager-变更&quot;&gt;&lt;a href=&quot;#AudioManager-Changes-AudioManager-变更&quot; class=&quot;headerlink&quot; title=&quot;AudioManager Changes (AudioManager 变更)&quot;&gt;&lt;/a&gt;AudioManager Changes (AudioManager 变更)&lt;/h1&gt;&lt;p&gt;通过 AudioManager 类来直接设置音量或者使流静音已经不再支持。 setStreamSolo() 方法被弃用，你需要调用 requestAudioFocus() 来代替。类似的， setStreamMute() 方法被弃用，替换为 adjustStreamVolume() 方法并传递方向值 ADJUST_MUTE 或 ADJUST_UNMUTE。&lt;/p&gt;
&lt;h1 id=&quot;Text-Selection-文本选择&quot;&gt;&lt;a href=&quot;#Text-Selection-文本选择&quot; class=&quot;headerlink&quot; title=&quot;Text Selection (文本选择)&quot;&gt;&lt;/a&gt;Text Selection (文本选择)&lt;/h1&gt;&lt;p&gt;当用户在应用程序中选择文本时，你可以在悬浮工具栏中显示文本选择工作，如剪切、复制、粘贴。用户交互实现与为独立视图启动上下文动作模式中描述的上下文动作栏类似。&lt;/p&gt;
&lt;p&gt;为文本选择实现悬浮工具栏，需要在已存在的应用程序中做如下修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 View 或者 Activity 对象中，通过修改 startActionMode(Callback) 为 startActionMode(Callback, ActionMode.TYPE_FLOATING) 来改变 ActionMode。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使已经存在的 ActionMode.Callback 的实现继承自 ActionMode.Callback2 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重载 onGetContentRect() 方法来提供内容 Rect 对象(如文本选择矩形)在视图中的坐标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果矩形位置不在有效，并且这是需要刷新的唯一元素，则调用 invalidateContentRect() 方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/008/text-selection.gif&quot; alt=&quot;解读Android6.0新功能和Api变更&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果你在使用 Android 22.2 修订版的兼容包，悬浮工具栏不是向后兼容的，且使用默认的 ActionMode 对象。这导致悬浮工具栏无法显示。在 AppCompatActivity 中启用 ActionMode，首先调用 getDelegate() ，然后在返回的 AppCompatDelegate 对象中调用 setHandleNativeActionModesEnabled()，并设置输入参数为 false。这个调用为框架返回可控的 ActionMode 对象。在运行 Android 6.0 (API 级别 23) 的设备上，这允许框架支持 ActionBar 或悬浮工具栏模式。在 Android 5.1 (API 级别 22) 或更低版本，只有 ActionBar 是支持的。&lt;/p&gt;
&lt;h1 id=&quot;Browser-Bookmark-Changes-浏览器书签变更&quot;&gt;&lt;a href=&quot;#Browser-Bookmark-Changes-浏览器书签变更&quot; class=&quot;headerlink&quot; title=&quot;Browser Bookmark Changes (浏览器书签变更)&quot;&gt;&lt;/a&gt;Browser Bookmark Changes (浏览器书签变更)&lt;/h1&gt;&lt;p&gt;这个版本移除了对全局书签的支持。 android.provider.Browser.getAllBookmark() 和 android.provider.Browser.saveBookmark() 方法被移除。同样的， READ_HISTORY_BOOKMARKS 和 WRITE_HISTORY_BOOKMARKS 权限被移除。如果你的应用程序的目标运行版本为 Android 6.0 (API 级别 23) 或者更高，不要从全局提供者访问书签或者使用书签权限。现在，你的应用程序需要内部保存书签数据。&lt;/p&gt;
&lt;h1 id=&quot;Android-Keystore-Changes-密钥变更&quot;&gt;&lt;a href=&quot;#Android-Keystore-Changes-密钥变更&quot; class=&quot;headerlink&quot; title=&quot;Android Keystore Changes (密钥变更)&quot;&gt;&lt;/a&gt;Android Keystore Changes (密钥变更)&lt;/h1&gt;&lt;p&gt;在这个版本中， Android Keystore 提供器 不在支持 DSA。 ECDSA 则仍然被支持。&lt;/p&gt;
&lt;p&gt;当安全锁屏被禁用或重置时，不要求加密的 key 将不再被删除。要求加密的 key 则会在这些事件中被删除。&lt;/p&gt;
&lt;h1 id=&quot;Wi-Fi-and-Networking-Changes-Wi-Fi和网络变更&quot;&gt;&lt;a href=&quot;#Wi-Fi-and-Networking-Changes-Wi-Fi和网络变更&quot; class=&quot;headerlink&quot; title=&quot;Wi-Fi and Networking Changes (Wi-Fi和网络变更)&quot;&gt;&lt;/a&gt;Wi-Fi and Networking Changes (Wi-Fi和网络变更)&lt;/h1&gt;&lt;p&gt;这个版本为 Wi-Fi 和 网络 API 引入了下面的行为变更：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;应用程序只有在创建了 WifiConfiguration 对象以后，才能更变这些对象的状态。当 WifiConfiguration 被用户或者其他应用程序创建时，你将不允许修改和删除这些 WifiConfiguration 对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在之前的版本中，如果应用程序使用 enableNetwork() ，并设置 disableAllOthers=true 来强制设备连接到指定的 Wi-Fi 网络，设备将和其他网络断开。这个版本中，这些设备将不再和其他网络断开。如果应用程序的 targetSdkVersion 是 20 或者更低，则会连接被选中的 Wi-Fi 网络。如果应用程序的 targetSdkVersion 是 21 或者更高，使用多网络 API (如 openConnection()， bindSocket() 及新的 bindProcessToNetwork() 方法)来确保它的网络通信是发给被选中的网络。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Camera-Service-Changes-摄像头服务变更&quot;&gt;&lt;a href=&quot;#Camera-Service-Changes-摄像头服务变更&quot; class=&quot;headerlink&quot; title=&quot;Camera Service Changes (摄像头服务变更)&quot;&gt;&lt;/a&gt;Camera Service Changes (摄像头服务变更)&lt;/h1&gt;&lt;p&gt;在这个版本中，在摄像头服务中访问共享资源的模式发生了变更，不再是以前的”先到先得”，而是具备高优先级的将优先处理。服务行为的变更包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;访问摄像头子系统的资源，包括打开和配置摄像设备，依赖于客户端应用进程的优先级。用户可见或者在前台活动的应用程序进程往往具备更高的优先级，使得摄像资源更易获得，也更加可靠。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当更高优先级的应用程序视图使用摄像头时，具有低权限的活动摄像头客户端应用程序可能被中断。在被弃用的 Camera API 中，错误会在被中断客户端的 onError() 中被调用。在 Camera2 API 中，错误结果则在 onDisconnected() 中被调用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在具备适合摄像头硬件的设备上，不同的应用进程可以同时独立地打开和使用独立的摄像头设备。虽然如此，多进程使用时，同时访问摄像头会造成设备性能的急剧下降，这将被摄像头服务所检测到并不被允许。这个变更使得由于较低优先级而被中断的客户端，即使当没有其他应用直接访问时，也会试图访问一样的设备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;改变当前用户会导致之前用户账号的应用程序中活动那个的摄像头客户端被中断。对摄像头的访问是被当前设备用户所限制的。实际上，这意味着当用户切换到不同的账户下时，原来的”访客”账号所使用的摄像头子系统是不可能继续运行的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Runtime-运行时&quot;&gt;&lt;a href=&quot;#Runtime-运行时&quot; class=&quot;headerlink&quot; title=&quot;Runtime (运行时)&quot;&gt;&lt;/a&gt;Runtime (运行时)&lt;/h1&gt;&lt;p&gt;通过 newInstance() 方法 ART 运行时现在正确的实现了访问规则。这个变更修复了之前版本中 Dalvik 检查访问规则时的错误。如果你的应用程序使用 newInstance() 方法，且你想要覆盖访问检查，调用 setAccessible() 方便，并设置参数为 true。如果你的应用程序使用 v7 兼容库 和 v7 recyclerview 库。你需要升级应用程序中的相关库到最新版本。否则，需要确保 XML 中所引用的自定义类已经被升级，其构造方法是可访问的。&lt;/p&gt;
&lt;p&gt;这个版本升级了动态链接器的行为。动态连接器现在可以理解库的 soname 和 它的路径之间的区别，且实现了通过 soname 来搜索。在加载时，之前可用的应用程序可能会被提示具有不可用的 DT_NEEDED 条目(通常是在构建机器文件系统中的绝对路径)。&lt;/p&gt;
&lt;p&gt;dlopen(3) RTLD_LOCAL 标志现在被正确实现了。 RTLD_LOCAL 是默认的，因此调用 dlopen(3) 是不明确使用 RTLD_LOCAL 是有效的(除非应用之前有明确使用 RTLD_GLOBAL )。使用 RTLD_LOCAL ，标记在调用 dlopen(3) 加载库之前是不可用的(这与被 DT_NEEDED 条目引用恰恰相反)。&lt;/p&gt;
&lt;p&gt;在之前版本的 Android，如果你的应用请求系统来加载包含文本重定位段的动态链接库，系统会显示警告，但允许继续加载库。从这个版本开始，如果你的目标运行 SDK 版本为 23 或以上，系统会拒绝这个库。为了辅助检测库是否被成功加载，应用程序需要为 dlopen(3) 失败添加日志，并在 dlerror(3) 返回值中包含问题的描述文本。学习更多关于如何处理文本重定位段，可以查看这个指南。&lt;/p&gt;
&lt;h1 id=&quot;APK-验证-APK-Validation&quot;&gt;&lt;a href=&quot;#APK-验证-APK-Validation&quot; class=&quot;headerlink&quot; title=&quot;APK 验证 (APK Validation)&quot;&gt;&lt;/a&gt;APK 验证 (APK Validation)&lt;/h1&gt;&lt;p&gt;Android 平台现在执行更加严格的 APK 验证。如果一个文件在清单文件中被声明，但在 APK 中却没有，那么这个 APK 被认为是无效的。如果任意的内容被移除， APK 需要重新签名。&lt;/p&gt;
&lt;h1 id=&quot;USB-连接-USB-Connection&quot;&gt;&lt;a href=&quot;#USB-连接-USB-Connection&quot; class=&quot;headerlink&quot; title=&quot;USB 连接 (USB Connection)&quot;&gt;&lt;/a&gt;USB 连接 (USB Connection)&lt;/h1&gt;&lt;p&gt;通过 USB 端口的设备连接现在默认被设置为充电模式。想要通过 USB 连接来访问设备和它的内容，用户需要为这些交互提供明确的授权。如果你的应用程序支持用户通过 USB 端口与设备交互，需要确保这些交互被明确启用。&lt;/p&gt;
&lt;h1 id=&quot;Android-for-Work-Changes-Android-for-Work-变更&quot;&gt;&lt;a href=&quot;#Android-for-Work-Changes-Android-for-Work-变更&quot; class=&quot;headerlink&quot; title=&quot;Android for Work Changes (Android for Work 变更)&quot;&gt;&lt;/a&gt;Android for Work Changes (Android for Work 变更)&lt;/h1&gt;&lt;p&gt;这个版本包括下面的 Android for Work 行为变更：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;个人上下文中的联系人。Google 拨号器通话记录现在可以在用户查看已通话记录时显示当前联系人。在 Google 拨号器中通过设置 setCrossProfileCallerIdDisabled() 为 true 来隐藏当前联系人。当设置 setBluetoothContactSharingDisabled() 为 false 时，当前联系人能通过蓝牙显示在设备联系人中。默认情况下，其设置为 true。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;移除 Wi-Fi 配置：由外部拥有者添加(如通过 addNetworkd() 方法)的 Wi-Fi 配置现在在当前 profile 被删除时也将被移除。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;紧闭 Wi-Fi 配置：如果 WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN 为非空时，任何由活动的设备拥有者创建的 Wi-Fi 配置将不能用户被修改和删除。用户可以创建和修改自己的 Wi-Fi 配置。活动的设备拥有者拥有编辑和移除任意 Wi-Fi 配置的特权，包括不是由他们创建的配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过 Google 账号下载使用策略控制器：当一个要求 WPC 应用程序来管理的 Google 账号被添加到管理上下文之外的设备中时，添加账号流程会提示用户安装合适的 WPC。这些行为也可以应用到通过在初始设备创建向导中 设置 &amp;gt; 账号 添加的账号。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;制定 DevicePolicyManager API 行为变更：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;调用 setCameraDisabled() 方法来影响当前调用用户的摄像头。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;此外， setKeyguardDisabledFeatures() 方法对 Profile 用户是可用的，与设备拥有者一样。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Profile 拥有者可以设置键盘守卫的约束：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KEYGUARD_DISABLE_TRUST_AGENTS 和 KEYGUARD_DISABLE_FINGERPRINT 将影响到 profile 父用户的键盘守卫设置。&lt;/li&gt;
&lt;li&gt;KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS 只会影响在 profile 中由应用程序生成的通知。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;createAndInitializeUser() 和 createUser() 方法已经被弃用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当给定用户的应用程序在前台运行时， setScreenCaptureDisabled() 方法将阻塞辅助结构。&lt;br&gt;SHA-256 的默认值为 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM 。为保持兼容性， SHA-1 仍然被支持，但在将来会被移除。 EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM 则仅接受 SHA-256。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原来存在的设备初始化 API 在 Android 6.0 (API 级别 23) 中被移除了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EXTRA_PROVISIONING_RESET_PROTECTION_PARAMETERS 被移除，因此 NFC bump provisioning 无法通过编程的方式解锁重置被保护的设备。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现在在被管理的设备中通过 NFC 可以使用 EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE 来传递数据给设备拥有者的应用程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android M 上的 Android for Work API 是经过优化的，包括 Work 配置，辅助层及其他。新的 DevicePolicyManager 权限 API 不会影响 Android 之前版本的应用程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当用户通过 ACTION_PROVISION_MANAGED_PROFILE 或者 ACTION_PROVISION_MANAGED_DEVICE 意图，从创建流程中的同步部分返回时，系统将返回 RESULT_CANCELED 结果码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他 API 变更：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据用法： android.app.usage.NetworkUsageStates 类重命名为 NetworkStats。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全局设置变更：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下面的设置不能继续通过 setGlobalSettings() 方法设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BLUETOOTH_ON&lt;/li&gt;
&lt;li&gt;DEVELOPMENT_SETTINGS_ENABLED&lt;/li&gt;
&lt;li&gt;MODE_RINGER&lt;/li&gt;
&lt;li&gt;NETWORK_PREFERENCE&lt;/li&gt;
&lt;li&gt;WIFI_ON&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下面全局设置可以通过 setGlobalSettings() 方法设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.android.com/about/versions/marshmallow/android-6.0-changes.html#behavior-afw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 6.0 Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.linfuyan.com/android-m-changes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 6.0 新功能及主要 API 变更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ifanr.com/app/569615&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解读 Android 6.0 如何让你甜到心窝&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;从 Android A 到 Android M，Android 的每个甜品的变化的细节里都是新版本的改进。上一个大版本 Android 5.0（也就是 Android L）为我们带来了 Material Design 清爽但不失细节的设计风格，从此原生 Android 的颜值终于在舆论中得到了普遍赞誉；而在 Android 6.0 中，我们得到的更多是内在的提升。&lt;/p&gt;
&lt;p&gt;新功能在使用体验上提升的效果是非常明显的，内在体验优化的意义不亚于全新的设计语言带来的新鲜感与友好度的提升。从外表到内在，我们看到的是一个更为成熟的 Android 系统。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你之前已经发布过 Android 应用程序，要意识到这些变更对应用程序的影响。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="Android 6.0" scheme="http://czhzero.com/tags/Android-6-0/"/>
    
  </entry>
  
  <entry>
    <title>技术高手如何炼成？</title>
    <link href="http://czhzero.com/2016/07/30/how-to-be-stronger/"/>
    <id>http://czhzero.com/2016/07/30/how-to-be-stronger/</id>
    <published>2016-07-30T08:56:56.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文转载自: 知乎-郑均&lt;br&gt;原文地址: &lt;a href=&quot;http://zhuanlan.zhihu.com/zhengyun/20270317&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zhuanlan.zhihu.com/zhengyun/20270317&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;面试的时候，我会问面试者，你日常如何构建自己的知识体系，如何让自己更高更快更强？多数工程师并没有深入地思考过这个问题，基本上是零敲碎打，随机性大。本着不能让你白来一趟的精神，好为人师的我会娓娓道来：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/007/bingshanyijiao.jpg&quot; alt=&quot;技术高手如何炼成？&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;第一阶段-认真构建完整的知识体系&quot;&gt;&lt;a href=&quot;#第一阶段-认真构建完整的知识体系&quot; class=&quot;headerlink&quot; title=&quot;第一阶段 认真构建完整的知识体系&quot;&gt;&lt;/a&gt;第一阶段 认真构建完整的知识体系&lt;/h1&gt;&lt;p&gt;十几年前我投身软件行业的时候，光是讲解数据库原理、操作系统、TCP/IP、组网、算法等等基础知识的英文原版书摞起来就等身，认认真真看完，各种上手实践，入行后，读遍 C++ 各种经典著作，读遍各种协议原文，认认真真打基础。很多工程师都说自己平常就是在某些 IT 门户上看看推荐的博文或新闻，我说这属于典型的零敲碎打，不够刺激。&lt;/p&gt;
&lt;p&gt;聊到这时，我会举一个例子，为什么要阅读长篇小说，因为中短篇小说就像用针扎你，而长篇小说就像把你装进一个沙袋里吊起来，从四面八方用狼牙棒打你，酣畅淋漓。构建可用的知识体系，就得读书，书是有体系结构的，你关心不关心，现阶段你用到用不到，它都讲到了，从头到尾看几遍，针扎得透透的。&lt;/p&gt;
&lt;p&gt;何谓知识体系？&lt;/p&gt;
&lt;p&gt;几年前，前支付宝架构师姚建东曾经在我们公司做过技术人员如何规划自己的分享讲座，他是这么论述的：&lt;/p&gt;
&lt;p&gt;技术与技巧包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算机基础理论&lt;ul&gt;
&lt;li&gt;计算机模型：内存/IO/时钟/CPU……&lt;/li&gt;
&lt;li&gt;算法&lt;/li&gt;
&lt;li&gt;专项技术领域：&lt;/li&gt;
&lt;li&gt;数据挖掘&lt;/li&gt;
&lt;li&gt;数据管理&lt;/li&gt;
&lt;li&gt;智能推荐&lt;/li&gt;
&lt;li&gt;搜索&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;语言与工具&lt;ul&gt;
&lt;li&gt;语言与相关体系&lt;/li&gt;
&lt;li&gt;开发工具，分析工具，代码管理工具&lt;/li&gt;
&lt;li&gt;HTML/CSS/JS/Ajax&lt;/li&gt;
&lt;li&gt;常用框架与第三方类库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;调试与测试&lt;ul&gt;
&lt;li&gt;调试方法和哲学&lt;/li&gt;
&lt;li&gt;定位问题&lt;/li&gt;
&lt;li&gt;BUG管理工具&lt;/li&gt;
&lt;li&gt;单元测试&lt;/li&gt;
&lt;li&gt;集成测试&lt;/li&gt;
&lt;li&gt;性能测试&lt;/li&gt;
&lt;li&gt;安全测试&lt;/li&gt;
&lt;li&gt;兼容性测试与方法&lt;/li&gt;
&lt;li&gt;JS/Ajax测试与方法&lt;/li&gt;
&lt;li&gt;服务层测试&lt;/li&gt;
&lt;li&gt;Web层测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;网络与系统&lt;ul&gt;
&lt;li&gt;TCP/IP协议与模型，HTTP/SMTP等协议&lt;/li&gt;
&lt;li&gt;Linux系统，网络分析工具，系统分析工具&lt;/li&gt;
&lt;li&gt;容量，流量与负载均衡&lt;/li&gt;
&lt;li&gt;应用部署、规范、规划&lt;/li&gt;
&lt;li&gt;安全&lt;/li&gt;
&lt;li&gt;监控与故障分析&lt;/li&gt;
&lt;li&gt;磁盘与存储&lt;/li&gt;
&lt;li&gt;Shell&lt;/li&gt;
&lt;li&gt;DNS与域名&lt;/li&gt;
&lt;li&gt;缓存，反向代理&lt;/li&gt;
&lt;li&gt;图片服务器（海量小文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;需求挖掘与分析&lt;ul&gt;
&lt;li&gt;需求文档格式&lt;/li&gt;
&lt;li&gt;需求访谈&lt;/li&gt;
&lt;li&gt;需求分析方法，需求分析工具&lt;/li&gt;
&lt;li&gt;领域知识与经验&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;系统分析与设计&lt;ul&gt;
&lt;li&gt;UML语言与模型&lt;/li&gt;
&lt;li&gt;分析模式&lt;/li&gt;
&lt;li&gt;设计模式，领域驱动&lt;/li&gt;
&lt;li&gt;系统分析文档格式&lt;/li&gt;
&lt;li&gt;系统设计文档格式&lt;/li&gt;
&lt;li&gt;功能性需求与非功能性需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;数据与系统&lt;ul&gt;
&lt;li&gt;数据库&lt;/li&gt;
&lt;li&gt;可伸缩策略，扩展策略，备份，容灾，性能，安全，高可用……&lt;/li&gt;
&lt;li&gt;数据设计与范式，SQL/NoSQL，Cache，分布式文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;架构设计&lt;ul&gt;
&lt;li&gt;架构模式，典型互联网公司架构演进历史&lt;/li&gt;
&lt;li&gt;架构原则，常用策略&lt;/li&gt;
&lt;li&gt;架构设计方法&lt;/li&gt;
&lt;li&gt;非功能性理解&lt;ul&gt;
&lt;li&gt;扩展性&lt;/li&gt;
&lt;li&gt;伸缩性&lt;/li&gt;
&lt;li&gt;稳定性&lt;/li&gt;
&lt;li&gt;一致性&lt;/li&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;li&gt;吞吐量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;容量预测与规划&lt;/li&gt;
&lt;li&gt;架构体系与相关技术&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;过程与管理&lt;ul&gt;
&lt;li&gt;分析过程&lt;/li&gt;
&lt;li&gt;研发过程&lt;/li&gt;
&lt;li&gt;评审过程&lt;/li&gt;
&lt;li&gt;测试过程&lt;/li&gt;
&lt;li&gt;发布过程&lt;/li&gt;
&lt;li&gt;回滚过程&lt;/li&gt;
&lt;li&gt;文档管理&lt;/li&gt;
&lt;li&gt;知识管理&lt;/li&gt;
&lt;li&gt;项目管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上其实就是一份从业基础知识清单，你可以按图索骥，阅读相关书籍。&lt;/p&gt;
&lt;h1 id=&quot;第二阶段-顺着一个Topic钻进去，锻炼自己的预研能力&quot;&gt;&lt;a href=&quot;#第二阶段-顺着一个Topic钻进去，锻炼自己的预研能力&quot; class=&quot;headerlink&quot; title=&quot;第二阶段 顺着一个Topic钻进去，锻炼自己的预研能力&quot;&gt;&lt;/a&gt;第二阶段 顺着一个Topic钻进去，锻炼自己的预研能力&lt;/h1&gt;&lt;p&gt;无论公司业务还是自己喜欢做的事，都可以抽象出通用性课题，然后以做论文的方式杀进去。这个事情得反复操练，有意识操练。&lt;/p&gt;
&lt;p&gt;做事方式为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;抽象出 Topic——如分布式锁，分布式并行计算引擎，防CSRF的FormToken自动生成框架，定时任务管理与调度平台，分布式跟踪，等等&lt;/li&gt;
&lt;li&gt;向功课好的学生学习——有针对性地深入了解业界其他公司是如何分析问题和解决问题的，汇总各种方案，站在巨人的肩膀上&lt;/li&gt;
&lt;li&gt;分析特定应用场景，技术选型&lt;/li&gt;
&lt;li&gt;兼顾高可用性和可伸缩，做设计评审&lt;/li&gt;
&lt;li&gt;做测试自证靠谱，梳理知识点，开技术分享会&lt;/li&gt;
&lt;li&gt;上线商用，总结经验教训，开经验分享会&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中一个重点是汇总和分享。05年时，应电信级统一消息业务需要，我去研究了 SIP 协议，做了各种试验，分析报文，写了一系列的幻灯片，做了公开分享，一时间还颇受欢迎：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SIP_to_Freshman_by_zhengyun.ppt&lt;/li&gt;
&lt;li&gt;SIP之穿越NAT_by_zhengyun.ppt&lt;/li&gt;
&lt;li&gt;SIP体系架构讲义及消息交互演示_by_zhengyun.ppt&lt;/li&gt;
&lt;li&gt;SIP多方会话消息之实例讲解_by_zhengyun.ppt&lt;/li&gt;
&lt;li&gt;SIP安全框架之认证[NTLM和Kerberos]_by_zhengyun.ppt&lt;/li&gt;
&lt;li&gt;SIP消息之逐项讲解_by_zhengyun.ppt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为什么要写出来、讲出来呢？因为有一个学习金字塔理论，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/007/xuexijinzita.png&quot; alt=&quot;技术高手如何炼成？&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们读过的事情能够记住学习内容的10%，&lt;br&gt;我们听过的事情能够记住20%，&lt;br&gt;我们看过的事情能够记住30%，&lt;br&gt;我们听过和看过的事情能够记住50%——如看影像/看展览/看演示/现场观摩，&lt;br&gt;我们说过的事情能够记住70%——如参与讨论/发言，&lt;br&gt;我们说过和做过的事情能够记住90%——如做报告，给别人讲，亲身体验，动手做。&lt;/p&gt;
&lt;p&gt;这也就是我在&lt;a href=&quot;http://www.cnblogs.com/zhengyun_ustc/p/rightThings.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《窝窝研发过去几年做对了哪些事》&lt;/a&gt;中阐述的管理方法：我们从入职之后就有意识地训练大家，让大家能够公开陈述、清晰表达。所以，试用期内，新人必须做一次技术分享和一次技术评审，面对各方的 challenge；预研的中间和结尾都要有分享会；平时也要定期组织技术讲座。&lt;/p&gt;
&lt;h1 id=&quot;第三阶段-疯狂回答技术问题&quot;&gt;&lt;a href=&quot;#第三阶段-疯狂回答技术问题&quot; class=&quot;headerlink&quot; title=&quot;第三阶段 疯狂回答技术问题&quot;&gt;&lt;/a&gt;第三阶段 疯狂回答技术问题&lt;/h1&gt;&lt;p&gt;知识体系慢慢构建，与业务相关的抽象 Topic 也在探索中。但这还不够。因为你亲身接触到的世界太小，可能不足以构成挑战，你可能意识不到自己缺多少知识和技能，不利于你分析问题、提出问题和解决问题的能力培养。&lt;/p&gt;
&lt;p&gt;所以，要主动出击：疯狂回答问题。&lt;/p&gt;
&lt;p&gt;我曾经在入行的头几年里几乎把我关注的垂直领域（包括语言领域和业务领域）里的所有问题都回答了一遍。我对外宣扬知无不言言无不尽，放出邮件地址和 MSN（那时候 MSN 很高大上），很多网友都会发邮件或者加我好友，问各种开发疑难问题，平均每天都有几个，然后我把解决问题的过程写成微软 KB（KnowledgeBase） 文体发表在我的博客上。&lt;/p&gt;
&lt;p&gt;你想想看，工作中的问题你平均每隔几天才能遇到一个，而这么做，每天你都会遇到几个乃至于十几个，第一让你脑力激荡，第二接触到更多新知。05年到06年期间，我因工作需要学习了 JavaME（或古老的称呼 J2ME），早年间 Symbian 手机上的客户端开发。那段时间我天天扫中文论坛的帖子，力求回答所有问题，尤其是那些 BUG 或故障。对于那些暂时没有人解决的，如流媒体实时播放，如仿 OperaMini 二级菜单界面，都上下求索，最后放出思路以及源码。&lt;/p&gt;
&lt;p&gt;同时，我经常整理常见问题，梳理成册并发布。譬如我整理过的 J2ME 疑难问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[J2ME Q&amp;amp;A]真机报告MontyThread -n的错误之解释&lt;/li&gt;
&lt;li&gt;[J2MEQ&amp;amp;A]WTK初始化WMAClient报错XXX has no IP address的解释&lt;/li&gt;
&lt;li&gt;[J2ME Q&amp;amp;A]untrusted domain is not configured问题回应&lt;/li&gt;
&lt;li&gt;[J2ME]“Cannot open socket for LIME events”错误解决&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几个月后，我成为 J2ME 中文论坛超级版主。通过这个历程，我想告诉大家，回答网友问题，技巧得当的话，比如别老是重复回答新手问题，试着攻克那些疑难问题，或者离奇故障，绝对不会浪费你的时间。为什么？&lt;/p&gt;
&lt;p&gt;因为你要信奉：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你学过的每一样东西，你遭受的每一次苦难，都会在你一生中的某个&lt;br&gt;时候派上用场。&lt;br&gt;——佩内洛普·菲兹杰拉德 《离岸》&lt;/p&gt;
&lt;p&gt;Everything that you’ve learnt and all the&lt;br&gt;hardships you’ve suffered will all come in handy&lt;br&gt;at some point in your life.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;第四阶段-RCA-总结&quot;&gt;&lt;a href=&quot;#第四阶段-RCA-总结&quot; class=&quot;headerlink&quot; title=&quot;第四阶段 RCA/总结&quot;&gt;&lt;/a&gt;第四阶段 RCA/总结&lt;/h1&gt;&lt;p&gt;现在是你把经验教训变为财富的时刻了。&lt;/p&gt;
&lt;p&gt;什么是好的技术 Leader？&lt;/p&gt;
&lt;p&gt;随便一个业务需求或业务场景讲出来，你立刻把它抽象为几个模块/系统/Topic，然后侃侃而谈，业界都是怎么解决的，我们以前又是怎么分析怎么解决的，现在咱们这种情况下应该如何设计，可能会遇到什么问题，我们应该做哪些预防设计，blabla。&lt;/p&gt;
&lt;p&gt;怎么做到这一点？&lt;/p&gt;
&lt;p&gt;第一，写 RCA 报告。我以前说过，『窝窝从 2011 年开始，一直坚持每错必查、错了又错就整改、每错必写，用身体力行告诉每一个新员工直面错误、公开技术细节、分享给所有人，长此以往，每一次事故和线上漏测都会变为我们的财富。这就是我们的 RCA（Root Cause Analysis）制度，截止到目前已经收集整理了近两百个详尽的 RCA 报告。』&lt;/p&gt;
&lt;p&gt;RCA 报告格式为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;背景知识（Optional）&lt;/li&gt;
&lt;li&gt;问题现象&lt;/li&gt;
&lt;li&gt;影响范围&lt;/li&gt;
&lt;li&gt;问题原因&lt;/li&gt;
&lt;li&gt;问题分析过程（Optional）&lt;/li&gt;
&lt;li&gt;解决办法&lt;/li&gt;
&lt;li&gt;后续处理措施：如线上脏数据如何修复，如对用户造成的影响如何弥补等（Optional）&lt;/li&gt;
&lt;li&gt;经验教训&lt;/li&gt;
&lt;li&gt;RCA类型：如代码问题、实施问题、配置问题、设计问题、测试问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样，作为一名合格的老兵，你见过了足够多的血，并且把它们变成了你的人生财富。&lt;/p&gt;
&lt;p&gt;第二，写总结。话说，要经常拉清单。侃侃而谈得有资料，这些都得是你自己写才能印象深刻，关键时刻想得起来。&lt;/p&gt;
&lt;p&gt;好了，这就是我告诉面试者的高手炼成四个阶段。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文转载自: 知乎-郑均&lt;br&gt;原文地址: &lt;a href=&quot;http://zhuanlan.zhihu.com/zhengyun/20270317&quot;&gt;http://zhuanlan.zhihu.com/zhengyun/20270317&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;面试的时候，我会问面试者，你日常如何构建自己的知识体系，如何让自己更高更快更强？多数工程师并没有深入地思考过这个问题，基本上是零敲碎打，随机性大。本着不能让你白来一趟的精神，好为人师的我会娓娓道来：&lt;/p&gt;
    
    </summary>
    
      <category term="深度文摘" scheme="http://czhzero.com/categories/%E6%B7%B1%E5%BA%A6%E6%96%87%E6%91%98/"/>
    
    
      <category term="知识体系" scheme="http://czhzero.com/tags/%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio提升编译速度方法总结</title>
    <link href="http://czhzero.com/2016/07/21/android-studio-compile-speed-up/"/>
    <id>http://czhzero.com/2016/07/21/android-studio-compile-speed-up/</id>
    <published>2016-07-21T06:57:52.000Z</published>
    <updated>2017-01-15T05:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;编译会占用你的时间，加快编译会影响你的开发效率，让你的项目工作更加顺畅。本文会定期更新一些提高编译效率的方法。加速gradle编译。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;方法一-开启gradle守护线程，并行编译&quot;&gt;&lt;a href=&quot;#方法一-开启gradle守护线程，并行编译&quot; class=&quot;headerlink&quot; title=&quot;方法一:开启gradle守护线程，并行编译&quot;&gt;&lt;/a&gt;方法一:开启gradle守护线程，并行编译&lt;/h3&gt;&lt;p&gt;在下面的目录下面创建gradle.properties文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/Users/&lt;username&gt;/.gradle/ (Mac)&lt;/username&gt;&lt;/li&gt;
&lt;li&gt;/home/&lt;username&gt;/.gradle/ (Linux)&lt;/username&gt;&lt;/li&gt;
&lt;li&gt;C:\Users\&lt;username&gt;.gradle (Windows)&lt;/username&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在文件中增加:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;org.gradle.daemon=true  //就是让你让你编译时使用守护进程。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;org.gradle.parallel=true //使用并行编译&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m //JVM最大允许分配的堆内存，按需分配&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;网上关于提速的方法，这类介绍最多，不知道怎么回事，我亲测后，发现没什么效果。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;方法二-设置离线状态&quot;&gt;&lt;a href=&quot;#方法二-设置离线状态&quot; class=&quot;headerlink&quot; title=&quot;方法二:设置离线状态&quot;&gt;&lt;/a&gt;方法二:设置离线状态&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o7y1sf21i.bkt.clouddn.com/blog/006/lALOYktUms0CEM0FeQ_1401_528.png&quot; alt=&quot;离线状态&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;设置离线，Vpn用上后，似乎对整个编译也没有什么直观的改善。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;方法三-更新gradle版本&quot;&gt;&lt;a href=&quot;#方法三-更新gradle版本&quot; class=&quot;headerlink&quot; title=&quot;方法三:更新gradle版本&quot;&gt;&lt;/a&gt;方法三:更新gradle版本&lt;/h3&gt;&lt;p&gt;gradle是一个比较复杂的‘怪物’，大多数的项目随着每个release版本越来越快，所以用最新的版本有很大意义。&lt;a href=&quot;https://gradle.org/gradle-download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tips:&lt;br&gt;如果发现IDE下载gradle较慢,则可改为自定义下载，下载好的zip包放到如下目录&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;~/.gradle/wrapper/dists/gradle-2.10-all/5b6kqrscumh9p4evkkemdk57ad/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;我升级到gradle-2.14.1之后，也没发现有多大的改变。编译还是要1分多钟。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;dev包中设置minSdkVersion为21&lt;/p&gt;
&lt;h3 id=&quot;方法四-优化项目&quot;&gt;&lt;a href=&quot;#方法四-优化项目&quot; class=&quot;headerlink&quot; title=&quot;方法四:优化项目&quot;&gt;&lt;/a&gt;方法四:优化项目&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;删除无用的module, 多module相互依赖会降低编译速度&lt;/li&gt;
&lt;li&gt;删除无用的文件资源, 如单元测试代码，废弃图片等等&lt;/li&gt;
&lt;li&gt;减少方法数目，不使用multidex。&lt;a href=&quot;http://blog.csdn.net/t12x3456/article/details/40837287&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;multidex&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;这类方法，肯定是会提高编译速度，本文不再详述。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;这个方法肯定有用。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;方法五-使用aar依赖&quot;&gt;&lt;a href=&quot;#方法五-使用aar依赖&quot; class=&quot;headerlink&quot; title=&quot;方法五:使用aar依赖&quot;&gt;&lt;/a&gt;方法五:使用aar依赖&lt;/h3&gt;&lt;p&gt;我们都知道我们或多或少使用第三方的开源库或者工具，还有自己封装的类库，但是一次编译的时候在Library Module 目录下， 打开build/outputs/aar，就有生成的aar 文件。把他放在libs 目录下，在build.gradle 添加。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;allprojects &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      flatDir &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dirs &amp;apos;libs&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile(name:&amp;apos;test&amp;apos;, ext:&amp;apos;aar&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然也可以这样添加&lt;/p&gt;
&lt;p&gt;我们可以新建一个jar/aar Module，选择aar 文件，然后新建的Module 目录下，就会多了个build.gradle 和xxx.aar。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;configurations.maybeCreate(&amp;quot;default&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;artifacts.add(&amp;quot;default&amp;quot;, file(&amp;apos;mylibrary-debug.aar&amp;apos;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在我们的Module 中这样引用即可&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile project(&amp;apos;:mylibrary-debug&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;如果大量的module都被置换成aar文件，确实会使得整个项目编译速度加快。但是若aar中代码需要改变，就会比较麻烦。所以这种方法，需要酌情考虑。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;方法六-对第三方库进行优化&quot;&gt;&lt;a href=&quot;#方法六-对第三方库进行优化&quot; class=&quot;headerlink&quot; title=&quot;方法六:对第三方库进行优化&quot;&gt;&lt;/a&gt;方法六:对第三方库进行优化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;利用debugCompile来依赖debug时才用到的库&lt;/li&gt;
&lt;li&gt;利用更小的库替代现有的库&lt;/li&gt;
&lt;li&gt;利用exclude来排出某些不需要的依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于远程仓库&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile (&amp;apos;com.facebook.react:react-native:+&amp;apos;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exclude group: &amp;apos;com.squareup.okhttp3&amp;apos;, module: &amp;apos;okhttp&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exclude group: &amp;apos;com.android.support&amp;apos;, module: &amp;apos;support-v4&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exclude group: &amp;apos;com.android.support&amp;apos;, module: &amp;apos;support-v7&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于本地项目&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile(project(&amp;apos;:react-native-custom-module&amp;apos;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exclude group: &amp;apos;com.facebook.react&amp;apos;, module: &amp;apos;react-native&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;方法七-采用增量编译&quot;&gt;&lt;a href=&quot;#方法七-采用增量编译&quot; class=&quot;headerlink&quot; title=&quot;方法七:采用增量编译&quot;&gt;&lt;/a&gt;方法七:采用增量编译&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Instant Run&lt;/li&gt;
&lt;li&gt;Jrebel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正在研究中。&lt;/p&gt;
&lt;h3 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://kevinpelgrims.com/blog/2015/06/11/speeding-up-your-gradle-builds/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Speeding up Gradle builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/2ff3717199da&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;6个技巧加速你的gradle编译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知道Android 中Gradle 的这些技巧，提升编译构建速度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jianshu.com/p/e456a5ac8613?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android打包提速实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;编译会占用你的时间，加快编译会影响你的开发效率，让你的项目工作更加顺畅。本文会定期更新一些提高编译效率的方法。加速gradle编译。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://czhzero.com/categories/Android/"/>
    
    
      <category term="Android Studio" scheme="http://czhzero.com/tags/Android-Studio/"/>
    
  </entry>
  
</feed>
