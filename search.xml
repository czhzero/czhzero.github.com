<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[设计模式学习笔记-原型模式]]></title>
      <url>http://czhzero.com/2017/03/12/design-pattern-prototype/</url>
      <content type="html"><![CDATA[<p>原型模式是一个创建型的模式。原型二字表明了该模式应该有一个样板实例，用户从这个样板对象中复制出一个内部属性一致的对象。这个过程也就是我们俗称的“克隆，本质就是对象拷贝。</p>
<p>原型模式中的拷贝分为”浅拷贝”和”深拷贝”:<br>浅拷贝: 对值类型的成员变量进行值的复制,对引用类型的成员变量只复制引用,不复制引用的对象.<br>深拷贝: 对值类型的成员变量进行值的复制,对引用类型的成员变量也进行引用对象的复制</p>
<a id="more"></a>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h2><blockquote>
<p>用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。</p>
</blockquote>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h2><ul>
<li>原型模式是在内存中二进制流的拷贝，要比直接new一个对象的性能好很多，特别是要在一个循环体内产生大量对象时，原型模式可以更好地体现其优点。</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h2><ul>
<li>直接在内存中的拷贝，构造函数不会知晓，在实际开发当中应该注意这个问题。</li>
</ul>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景:"></a>使用场景:</h2><ul>
<li>类的初始化需要消化非常多大资源，这些资源包括数据、硬件资源等，通过原型拷贝避免这些消耗。</li>
<li>通过new产生一个对象需要非常繁琐的数据准备或者访问权限，这时可以使用原型模式。</li>
<li>一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用，即是保护性拷贝。</li>
</ul>
<h2 id="常见实例"><a href="#常见实例" class="headerlink" title="常见实例:"></a>常见实例:</h2><ul>
<li>ArrayList的clone方法</li>
<li>Intent的clone方法</li>
</ul>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by chenzhaohua on 17/3/12.</span><br><span class="line"> */</span><br><span class="line">public class ProtoTypeExample &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static class ShallowWordDocument implements Cloneable &#123;</span><br><span class="line"></span><br><span class="line">        public String title;</span><br><span class="line">        public ArrayList&lt;String&gt; imageList;</span><br><span class="line"></span><br><span class="line">        public ShallowWordDocument() &#123;</span><br><span class="line">            System.out.println(&quot;ShallowWordDocument 执行构造函数 &quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        protected Object clone() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                ShallowWordDocument document = (ShallowWordDocument) super.clone();</span><br><span class="line">                document.title = this.title;</span><br><span class="line">                document.imageList = this.imageList;</span><br><span class="line">                return document;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void printDocument() &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;-------------  printDocument start -----------&quot;);</span><br><span class="line">            System.out.println(&quot;标题 :&quot; + title);</span><br><span class="line"></span><br><span class="line">            for (String str : imageList) &#123;</span><br><span class="line">                System.out.println(&quot;图片 :&quot; + str);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;-------------  printDocument end -----------&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static class DeepWordDocument implements Cloneable &#123;</span><br><span class="line"></span><br><span class="line">        public String title;</span><br><span class="line">        public ArrayList&lt;String&gt; imageList;</span><br><span class="line"></span><br><span class="line">        public DeepWordDocument() &#123;</span><br><span class="line">            System.out.println(&quot;DeepWordDocument 执行构造函数 &quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        protected Object clone() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                DeepWordDocument document = (DeepWordDocument) super.clone();</span><br><span class="line">                document.title = this.title;</span><br><span class="line">                document.imageList = (ArrayList&lt;String&gt;) this.imageList.clone();</span><br><span class="line">                return document;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void printDocument() &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;-------------  printDocument start -----------&quot;);</span><br><span class="line">            System.out.println(&quot;标题 :&quot; + title);</span><br><span class="line"></span><br><span class="line">            for (String str : imageList) &#123;</span><br><span class="line">                System.out.println(&quot;图片 :&quot; + str);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;-------------  printDocument end -----------&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line"></span><br><span class="line">        ShallowWordDocument orginDoc = new ShallowWordDocument();</span><br><span class="line">        orginDoc.title = &quot;原始文档&quot;;</span><br><span class="line">        orginDoc.imageList = new ArrayList&lt;&gt;();</span><br><span class="line">        orginDoc.imageList.add(&quot;图片1&quot;);</span><br><span class="line">        orginDoc.imageList.add(&quot;图片2&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ShallowWordDocument copyDoc = (ShallowWordDocument) orginDoc.clone();;</span><br><span class="line">        copyDoc.title = &quot;拷贝文档&quot;;</span><br><span class="line">        copyDoc.imageList.add(&quot;图片3&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //浅拷贝, 只拷贝title和imageList的地址</span><br><span class="line">        orginDoc.printDocument();</span><br><span class="line">        copyDoc.printDocument();</span><br><span class="line"></span><br><span class="line">        DeepWordDocument orginDoc2 = new DeepWordDocument();</span><br><span class="line">        orginDoc2.title = &quot;原始文档&quot;;</span><br><span class="line">        orginDoc2.imageList = new ArrayList&lt;&gt;();</span><br><span class="line">        orginDoc2.imageList.add(&quot;图片1&quot;);</span><br><span class="line">        orginDoc2.imageList.add(&quot;图片2&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        DeepWordDocument copyDoc2 = (DeepWordDocument) orginDoc2.clone();;</span><br><span class="line">        copyDoc2.title = &quot;拷贝文档&quot;;</span><br><span class="line">        copyDoc2.imageList.add(&quot;图片3&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //深拷贝, 拷贝title和imageList的完整内容</span><br><span class="line">        orginDoc2.printDocument();</span><br><span class="line">        copyDoc2.printDocument();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ShallowWordDocument 执行构造函数 </span><br><span class="line">-------------  printDocument start -----------</span><br><span class="line">标题 :原始文档</span><br><span class="line">图片 :图片1</span><br><span class="line">图片 :图片2</span><br><span class="line">图片 :图片3</span><br><span class="line">-------------  printDocument end -----------</span><br><span class="line">-------------  printDocument start -----------</span><br><span class="line">标题 :拷贝文档</span><br><span class="line">图片 :图片1</span><br><span class="line">图片 :图片2</span><br><span class="line">图片 :图片3</span><br><span class="line">-------------  printDocument end -----------</span><br><span class="line">DeepWordDocument 执行构造函数 </span><br><span class="line">-------------  printDocument start -----------</span><br><span class="line">标题 :原始文档</span><br><span class="line">图片 :图片1</span><br><span class="line">图片 :图片2</span><br><span class="line">-------------  printDocument end -----------</span><br><span class="line">-------------  printDocument start -----------</span><br><span class="line">标题 :拷贝文档</span><br><span class="line">图片 :图片1</span><br><span class="line">图片 :图片2</span><br><span class="line">图片 :图片3</span><br><span class="line">-------------  printDocument end -----------</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式学习笔记-建造者模式]]></title>
      <url>http://czhzero.com/2017/03/12/design-pattern-builder/</url>
      <content type="html"><![CDATA[<p>Builder模式是一步一步创建一个复杂对象的创建型模式，它允许用户在不知道内部构造细节的情况下，可以更精细的控制对象的构造流程。</p>
<a id="more"></a>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h2><blockquote>
<p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
</blockquote>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h2><ul>
<li>良好的封装性，使用建造者模式可以使客户端不必知道产品内部组成的细节。</li>
<li>建造者独立，容易扩展。</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h2><ul>
<li>会产生多余的Builder对象以及Director对象，额外消耗内存。</li>
</ul>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景:"></a>使用场景:</h2><ul>
<li>相同的方法，不同的执行顺序，产生不同的事件结果时。</li>
<li>多个部件或者零件，都可以装配到一个对象中，但是产生的运行结果又不相同时。</li>
<li>产品类非常复杂，或者产品类中的调用顺序不同产生了不同的作用，这个时候使用建造者模式非常合适。</li>
<li>当初始化一个对象特别复杂，如参数多，且很多参数都具有默认值时。</li>
</ul>
<h2 id="常见实例"><a href="#常见实例" class="headerlink" title="常见实例:"></a>常见实例:</h2><ul>
<li>AlertDialog.Builder</li>
<li>ImageLoader的Builder</li>
</ul>
<hr>
<p>具体实现如下，</p>
<h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><ul>
<li>产品类</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Room &#123;</span><br><span class="line"></span><br><span class="line">    private Window window;</span><br><span class="line">    private Floor floor;</span><br><span class="line"></span><br><span class="line">    public Window getWindow() &#123;</span><br><span class="line">        return window;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setWindow(Window window) &#123;</span><br><span class="line">        this.window = window;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Floor getFloor() &#123;</span><br><span class="line">        return floor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setFloor(Floor floor) &#123;</span><br><span class="line">        this.floor = floor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>定义Builder接口(非必需)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface Builder &#123;</span><br><span class="line"></span><br><span class="line">    public void makeWindow();</span><br><span class="line"></span><br><span class="line">    public void makeFloor();</span><br><span class="line"></span><br><span class="line">    public Room getRoom();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实现Builder</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class RoomBuilder implements Builder &#123;</span><br><span class="line"></span><br><span class="line">    private Room room = new Room();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void makeWindow() &#123;</span><br><span class="line">        room.setWindow(new Window());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void makeFloor() &#123;</span><br><span class="line">        room.setFloor(new Floor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Room getRoom() &#123;</span><br><span class="line">        return room;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>定义Director</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Designer &#123;</span><br><span class="line">    </span><br><span class="line">    public void command(Builder builder)&#123;</span><br><span class="line">        // 先建造地板</span><br><span class="line">        builder.makeFloor();</span><br><span class="line">        // 再建造窗户</span><br><span class="line">        builder.makeWindow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>场景类</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 先找来一个工人</span><br><span class="line">        Builder builder = new RoomBuilder();</span><br><span class="line">        // 再找来一个房屋设计师</span><br><span class="line">        Designer designer = new Designer();</span><br><span class="line">        // 工人按照设计师设计建造</span><br><span class="line">        designer.command(builder);</span><br><span class="line">        // 工人向雇主交房子</span><br><span class="line">        Room newRoom = builder.getRoom();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="方式二链式调用"><a href="#方式二链式调用" class="headerlink" title="方式二链式调用"></a>方式二链式调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        User.Builder builder = new User.Builder();</span><br><span class="line">        User user = builder.setName(&quot;corn&quot;).setAge(100).setAddress(&quot;广州&quot;).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class User &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private String address;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getAddress() &#123;</span><br><span class="line">        return address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Builder &#123;</span><br><span class="line">        private User user = new User();</span><br><span class="line"></span><br><span class="line">        public Builder setName(String name) &#123;</span><br><span class="line">            user.name = name;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Builder setAge(int age) &#123;</span><br><span class="line">            user.age = age;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Builder setAddress(String address) &#123;</span><br><span class="line">            user.address = address;</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public User build() &#123;</span><br><span class="line">            return user;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android如何重新签名APK]]></title>
      <url>http://czhzero.com/2017/03/10/how-to-resign-apk/</url>
      <content type="html"><![CDATA[<p>如何使用jarsigner进行apk的重新签名</p>
<a id="more"></a>
<h2 id="Step1-删除apk包中旧的签名文件"><a href="#Step1-删除apk包中旧的签名文件" class="headerlink" title="Step1.删除apk包中旧的签名文件"></a>Step1.删除apk包中旧的签名文件</h2><p>将apk重命名为zip文件，解压后，将其中META-INF文件夹删除，再改回.apk格式。</p>
<h2 id="Step2-进入到java安装目录，进入bin文件夹"><a href="#Step2-进入到java安装目录，进入bin文件夹" class="headerlink" title="Step2.进入到java安装目录，进入bin文件夹"></a>Step2.进入到java安装目录，进入bin文件夹</h2><h2 id="Step3-命令行生成keystore"><a href="#Step3-命令行生成keystore" class="headerlink" title="Step3.命令行生成keystore"></a>Step3.命令行生成keystore</h2><p>keytool -genkey -alias nt.android -keyalg RSA -validity 20000 -keystorent.keystore<br>(-validity 20000代表有效期天数)，命令完成后，bin目录中会生成nt.keystore</p>
<h2 id="Step4-找到jarsigner文件-执行如下命令"><a href="#Step4-找到jarsigner文件-执行如下命令" class="headerlink" title="Step4.找到jarsigner文件,执行如下命令"></a>Step4.找到jarsigner文件,执行如下命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -keystore /Users/chenzhaohua/Downloads/sign/nt.keystore -storepass ntandroid -signedjar /Users/chenzhaohua/Downloads/sign/windthunder_signed.apk -digestalg SHA1 -sigalg MD5withRSA /Users/chenzhaohua/Downloads/sign/windthunder_unsigned.apk nt.android</span><br></pre></td></tr></table></figure>
<p>其中，</p>
<ul>
<li><code>/Users/chenzhaohua/Downloads/sign/nt.keystore</code>为签名证书文件。</li>
<li><code>ntandroid</code>为证书密码</li>
<li><code>/Users/chenzhaohua/Downloads/sign/windthunder_signed.apk</code> 为签名后的apk文件名</li>
<li><code>/Users/chenzhaohua/Downloads/sign/windthunder_unsigned.apk</code> 为待签名的apk<br>nt.android  为Key的别名</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android设备获取扫码枪扫描内容]]></title>
      <url>http://czhzero.com/2017/03/10/scangon-get/</url>
      <content type="html"><![CDATA[<p>条形码扫码枪现在随处可见，可以很迅速地扫描出条形码内容，比什么手机相机扫码快了不是一点两点。<br>为了节约成本，扫码枪可以直接通过蓝牙连接android或其他设备。<br>那么android设备如何通过蓝牙获取扫描内容的呢？</p>
<a id="more"></a>
<h3 id="1-蓝牙配对，连接设备"><a href="#1-蓝牙配对，连接设备" class="headerlink" title="1. 蓝牙配对，连接设备"></a>1. 蓝牙配对，连接设备</h3><p>打开系统设置，找到蓝牙，打开扫码枪，配对扫码枪设备。输入一个固定的配对码，一般扫码枪说明书里都有写。配对完成后，显示设备已连接。就ok。</p>
<h3 id="2-AndroidManifest中配置权限"><a href="#2-AndroidManifest中配置权限" class="headerlink" title="2.AndroidManifest中配置权限"></a>2.AndroidManifest中配置权限</h3><p>android项目中的AndroidManifest.xml文件添加蓝牙权限。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission     android:name=&quot;android.permission.BLUETOOTH&quot; /&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot; /&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-检测扫码枪的连接状态"><a href="#3-检测扫码枪的连接状态" class="headerlink" title="3.检测扫码枪的连接状态"></a>3.检测扫码枪的连接状态</h3><p>通常来说，扫码枪设备也相当于普通外接输入设备类型，外接键盘。</p>
<p>我这款扫码枪设备返回的是如下蓝牙类型。</p>
<blockquote>
<p>BluetoothClass.Device.Major.PERIPHERAL</p>
</blockquote>
<p>一般而言，通过如下这种方式就可以获得到我们扫码枪设备的信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;BluetoothDevice&gt; blueDevices = mBluetoothAdapter.getBondedDevices();</span><br><span class="line"></span><br><span class="line">if (blueDevices == null || blueDevices.size() &lt;= 0) &#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (Iterator&lt;BluetoothDevice&gt; iterator = blueDevices.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">    BluetoothDevice bluetoothDevice = iterator.next();</span><br><span class="line"></span><br><span class="line">    if (bluetoothDevice.getBluetoothClass().getMajorDeviceClass() == BluetoothClass.Device.Major.PERIPHERAL) &#123;</span><br><span class="line">        //TODO 获取扫码枪设备信息</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>开发过程中，必然会需要实时判断设备是否正常连接。</p>
<blockquote>
<p>mBluetoothAdapter.getBondedDevices()</p>
</blockquote>
<p>这个方法仅仅只能够判断设备是否已配对绑定。但是绑定不代表连接，所以只能放弃。</p>
<blockquote>
<p>public List<bluetoothdevice> getConnectedDevices (int profile)<br>public int getConnectionState (BluetoothDevice device, int profile)</bluetoothdevice></p>
</blockquote>
<p>接着又尝试了这两个方法，方法是可用，但是必须要求设备sdk&gt;18,即android 4.3版本以上才可用。</p>
<p>后来转头一想，既然扫码枪也是输入设备，我们可以不同蓝牙设备状态检测入手，改为从输入设备检测入手。于是，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void hasScanGun() &#123;</span><br><span class="line">	Configuration cfg = getResources().getConfiguration();</span><br><span class="line">	return cfg.keyboard != Configuration.KEYBOARD_NOKEYS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搞定。</p>
<h3 id="4-获取扫码枪扫描内容"><a href="#4-获取扫码枪扫描内容" class="headerlink" title="4.获取扫码枪扫描内容"></a>4.获取扫码枪扫描内容</h3><p>扫描枪，既然是一个外接输入设备，那么很自然的，我们就从KeyEvent入手。</p>
<p>事件解析类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 扫码枪事件解析类</span><br><span class="line"> */</span><br><span class="line">public class ScanGunKeyEventHelper &#123;</span><br><span class="line"></span><br><span class="line">    //延迟500ms，判断扫码是否完成。</span><br><span class="line">    private final static long MESSAGE_DELAY = 500;</span><br><span class="line">    //扫码内容</span><br><span class="line">    private StringBuffer mStringBufferResult = new StringBuffer();</span><br><span class="line">    //大小写区分</span><br><span class="line">    private boolean mCaps;</span><br><span class="line">    private OnScanSuccessListener mOnScanSuccessListener;</span><br><span class="line">    private Handler mHandler = new Handler();</span><br><span class="line"></span><br><span class="line">    private final Runnable mScanningFishedRunnable = new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            performScanSuccess();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    //返回扫描结果</span><br><span class="line">    private void performScanSuccess() &#123;</span><br><span class="line">        String barcode = mStringBufferResult.toString();</span><br><span class="line">        if (mOnScanSuccessListener != null)</span><br><span class="line">            mOnScanSuccessListener.onScanSuccess(barcode);</span><br><span class="line">        mStringBufferResult.setLength(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //key事件处理</span><br><span class="line">    public void analysisKeyEvent(KeyEvent event) &#123;</span><br><span class="line"></span><br><span class="line">        int keyCode = event.getKeyCode();</span><br><span class="line"></span><br><span class="line">        //字母大小写判断</span><br><span class="line">        checkLetterStatus(event);</span><br><span class="line"></span><br><span class="line">        if (event.getAction() == KeyEvent.ACTION_DOWN) &#123;</span><br><span class="line"></span><br><span class="line">            char aChar = getInputCode(event);;</span><br><span class="line"></span><br><span class="line">            if (aChar != 0) &#123;</span><br><span class="line">                mStringBufferResult.append(aChar);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (keyCode == KeyEvent.KEYCODE_ENTER) &#123;</span><br><span class="line">                //若为回车键，直接返回</span><br><span class="line">                mHandler.removeCallbacks(mScanningFishedRunnable);</span><br><span class="line">                mHandler.post(mScanningFishedRunnable);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //延迟post，若500ms内，有其他事件</span><br><span class="line">                mHandler.removeCallbacks(mScanningFishedRunnable);</span><br><span class="line">                mHandler.postDelayed(mScanningFishedRunnable, MESSAGE_DELAY);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //检查shift键</span><br><span class="line">    private void checkLetterStatus(KeyEvent event) &#123;</span><br><span class="line">        int keyCode = event.getKeyCode();</span><br><span class="line">        if (keyCode == KeyEvent.KEYCODE_SHIFT_RIGHT || keyCode == KeyEvent.KEYCODE_SHIFT_LEFT) &#123;</span><br><span class="line">            if (event.getAction() == KeyEvent.ACTION_DOWN) &#123;</span><br><span class="line">                //按着shift键，表示大写</span><br><span class="line">                mCaps = true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //松开shift键，表示小写</span><br><span class="line">                mCaps = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //获取扫描内容</span><br><span class="line">    private char getInputCode(KeyEvent event) &#123;</span><br><span class="line"></span><br><span class="line">        int keyCode = event.getKeyCode();</span><br><span class="line"></span><br><span class="line">        char aChar;</span><br><span class="line"></span><br><span class="line">        if (keyCode &gt;= KeyEvent.KEYCODE_A &amp;&amp; keyCode &lt;= KeyEvent.KEYCODE_Z) &#123;</span><br><span class="line">            //字母</span><br><span class="line">            aChar = (char) ((mCaps ? &apos;A&apos; : &apos;a&apos;) + keyCode - KeyEvent.KEYCODE_A);</span><br><span class="line">        &#125; else if (keyCode &gt;= KeyEvent.KEYCODE_0 &amp;&amp; keyCode &lt;= KeyEvent.KEYCODE_9) &#123;</span><br><span class="line">            //数字</span><br><span class="line">            aChar = (char) (&apos;0&apos; + keyCode - KeyEvent.KEYCODE_0);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            //其他符号</span><br><span class="line">            switch (keyCode) &#123;</span><br><span class="line">                case KeyEvent.KEYCODE_PERIOD:</span><br><span class="line">                    aChar = &apos;.&apos;;</span><br><span class="line">                    break;</span><br><span class="line">                case KeyEvent.KEYCODE_MINUS:</span><br><span class="line">                    aChar = mCaps ? &apos;_&apos; : &apos;-&apos;;</span><br><span class="line">                    break;</span><br><span class="line">                case KeyEvent.KEYCODE_SLASH:</span><br><span class="line">                    aChar = &apos;/&apos;;</span><br><span class="line">                    break;</span><br><span class="line">                case KeyEvent.KEYCODE_BACKSLASH:</span><br><span class="line">                    aChar = mCaps ? &apos;|&apos; : &apos;\\&apos;;</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    aChar = 0;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return aChar;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public interface OnScanSuccessListener &#123;</span><br><span class="line">        public void onScanSuccess(String barcode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setOnBarCodeCatchListener(OnScanSuccessListener onScanSuccessListener) &#123;</span><br><span class="line">        mOnScanSuccessListener = onScanSuccessListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onDestroy() &#123;</span><br><span class="line">        mHandler.removeCallbacks(mScanningFishedRunnable);</span><br><span class="line">        mOnScanSuccessListener = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Activity中重写dispatchKeyEvent方法，截取Key事件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Activity截获按键事件.发给ScanGunKeyEventHelper</span><br><span class="line">    *</span><br><span class="line">    * @param event</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   @Override</span><br><span class="line">   public boolean dispatchKeyEvent(KeyEvent event) &#123;</span><br><span class="line"></span><br><span class="line">       if (isScanGunEvent(event)) &#123;</span><br><span class="line">         mScanGunKeyEventHelper.analysisKeyEvent(event);</span><br><span class="line">           return true;</span><br><span class="line">       &#125;</span><br><span class="line">       return super.dispatchKeyEvent(event);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 显示扫描内容</span><br><span class="line">    * @param barcode 条形码</span><br><span class="line">    */</span><br><span class="line">   @Override</span><br><span class="line">   public void onScanSuccess(String barcode) &#123;</span><br><span class="line">    //TODO 显示扫描内容</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>详细代码参看：<a href="https://github.com/czhzero/scangon" target="_blank" rel="external">https://github.com/czhzero/scangon</a></p>
<p>注意点：</p>
<p>1.部分机型无法判断外接键盘信息，如三星。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void hasScanGun() &#123;</span><br><span class="line">	Configuration cfg = getResources().getConfiguration();</span><br><span class="line">	return cfg.keyboard != Configuration.KEYBOARD_NOKEYS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>三星手机cfg.keyboard返回值等于Configuration.KEYBOARD_NOKEYS。</p>
<p>因此为了更好的兼容，可以采用如下方法，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断是否已经连接扫码枪</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">protected boolean hasScanGun() &#123;</span><br><span class="line"></span><br><span class="line">    Set&lt;BluetoothDevice&gt; blueDevices = mBluetoothAdapter.getBondedDevices();</span><br><span class="line"></span><br><span class="line">    if (blueDevices == null || blueDevices.size() &lt;= 0) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (Iterator&lt;BluetoothDevice&gt; iterator = blueDevices.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">        BluetoothDevice bluetoothDevice = iterator.next();</span><br><span class="line"></span><br><span class="line">        if (bluetoothDevice.getBluetoothClass().getMajorDeviceClass() == BluetoothClass.Device.Major.PERIPHERAL) &#123;</span><br><span class="line">            return isInputDeviceUsed(bluetoothDevice.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private boolean isInputDeviceUsed(String deviceName) &#123;</span><br><span class="line"></span><br><span class="line">    int[] deviceIds = InputDevice.getDeviceIds();</span><br><span class="line"></span><br><span class="line">    for (int id : deviceIds) &#123;</span><br><span class="line">        if (InputDevice.getDevice(id).getName().equals(deviceName)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android自定义Dialog的Match_parent无效问题解决]]></title>
      <url>http://czhzero.com/2017/03/10/dialog-matchparent-invalid/</url>
      <content type="html"><![CDATA[<p>Android 开发过程中，自定义dialog 用得很多，通常都是通过继承Dialog, 再加载自定义的xml来实现。</p>
 <a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//自定义Dialog</span><br><span class="line">public class OrderFilterDialog extends Dialog &#123;</span><br><span class="line"></span><br><span class="line">    public OrderFilterDialog(Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">        initView(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public OrderFilterDialog(Context context, int themeResId) &#123;</span><br><span class="line">        super(context, themeResId);</span><br><span class="line">        initView(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public  void initView(Dialog dialog) &#123;</span><br><span class="line">        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        dialog.setContentView(R.layout.dialog_search_order);</span><br><span class="line">        show();</span><br><span class="line">        dialog.setCancelable(false);</span><br><span class="line">        Window window = dialog.getWindow();</span><br><span class="line">        WindowManager.LayoutParams lp = window.getAttributes();</span><br><span class="line">        lp.width = WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">        lp.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">        lp.gravity = Gravity.TOP;</span><br><span class="line">        window.setAttributes(lp);</span><br><span class="line">        window.setWindowAnimations(R.style.DialogInOutTopAnimation);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行后，发现效果如下，</p>
<p><img src="http://img.blog.csdn.net/20160114170927743" alt="这里写图片描述"></p>
<p>我们发现，match_parent属性根本没有生效。查看Dialog源码才发现，默认Dialog是有一个theme属性的，坑。</p>
<p>Dialog部分代码如下，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">140     * Creates a dialog window that uses the default dialog theme.</span><br><span class="line">141     * &lt;p&gt;</span><br><span class="line">142     * The supplied &#123;@code context&#125; is used to obtain the window manager and</span><br><span class="line">143     * base theme used to present the dialog.</span><br><span class="line">144     *</span><br><span class="line">145     * @param context the context in which the dialog should run</span><br><span class="line">146     * @see android.R.styleable#Theme_dialogTheme</span><br><span class="line">147     */</span><br><span class="line">148    public Dialog(@NonNull Context context) &#123;</span><br><span class="line">149        this(context, 0, true);   //默认传入0</span><br><span class="line">150    &#125;</span><br><span class="line">151</span><br><span class="line">152    /**</span><br><span class="line">153     * Creates a dialog window that uses a custom dialog style.</span><br><span class="line">154     * &lt;p&gt;</span><br><span class="line">155     * The supplied &#123;@code context&#125; is used to obtain the window manager and</span><br><span class="line">156     * base theme used to present the dialog.</span><br><span class="line">157     * &lt;p&gt;</span><br><span class="line">158     * The supplied &#123;@code theme&#125; is applied on top of the context&apos;s theme. See</span><br><span class="line">159     * &lt;a href=&quot;&#123;@docRoot&#125;guide/topics/resources/available-resources.html#stylesandthemes&quot;&gt;</span><br><span class="line">160     * Style and Theme Resources&lt;/a&gt; for more information about defining and</span><br><span class="line">161     * using styles.</span><br><span class="line">162     *</span><br><span class="line">163     * @param context the context in which the dialog should run</span><br><span class="line">164     * @param themeResId a style resource describing the theme to use for the</span><br><span class="line">165     *              window, or &#123;@code 0&#125; to use the default dialog theme</span><br><span class="line">166     */</span><br><span class="line">167    public Dialog(@NonNull Context context, @StyleRes int themeResId) &#123;</span><br><span class="line">168        this(context, themeResId, true);</span><br><span class="line">169    &#125;</span><br><span class="line">170</span><br><span class="line">171    Dialog(@NonNull Context context, @StyleRes int themeResId, boolean createContextThemeWrapper) &#123;</span><br><span class="line">172        if (createContextThemeWrapper) &#123;</span><br><span class="line">173            if (themeResId == 0) &#123;</span><br><span class="line">174                final TypedValue outValue = new TypedValue();</span><br><span class="line">175                context.getTheme().resolveAttribute(R.attr.dialogTheme, outValue, true);             //若值为0，则默认设置dialogTheme样式</span><br><span class="line">176                themeResId = outValue.resourceId;</span><br><span class="line">177            &#125;</span><br><span class="line">178            mContext = new ContextThemeWrapper(context, themeResId);</span><br><span class="line">179        &#125; else &#123;</span><br><span class="line">180            mContext = context;</span><br><span class="line">181        &#125;</span><br><span class="line">182</span><br><span class="line">183        mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">184</span><br><span class="line">185        final Window w = new PhoneWindow(mContext);</span><br><span class="line">186        mWindow = w;</span><br><span class="line">187        w.setCallback(this);</span><br><span class="line">188        w.setOnWindowDismissedCallback(this);</span><br><span class="line">189        w.setWindowManager(mWindowManager, null, null);</span><br><span class="line">190        w.setGravity(Gravity.CENTER);</span><br><span class="line">191</span><br><span class="line">192        mListenersHandler = new ListenersHandler(this);</span><br><span class="line">193    &#125;</span><br></pre></td></tr></table></figure>
<p>其中</p>
<blockquote>
<p>if (themeResId == 0) {<br>    final TypedValue outValue = new TypedValue();<br>    context.getTheme().resolveAttribute(R.attr.dialogTheme, outValue, true);<br>    themeResId = outValue.resourceId;<br>}</p>
</blockquote>
<p>从上述代码可以看出，若Dialog没有设置默认样式，系统会自动给你适配为R.attr.dialogTheme样式。<br>而查看themes.xml后，发现 dialogTheme样式是自带有Padding值的，所以match_parent自然是无效的。</p>
<p>那么，如何实现match_parent呢</p>
<p>(1) 设置padding值为0。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dialog.getWindow().getDecorView().setPadding(0, 0, 0, 0);</span><br></pre></td></tr></table></figure>
<p>(2) 自定义一个Theme，覆盖原生Theme。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OrderFilterDialog dialog = new OrderFilterDialog(context, R.style.test);</span><br></pre></td></tr></table></figure>
<p>运行效果如下，</p>
<p><img src="http://img.blog.csdn.net/20160114171122552" alt="这里写图片描述"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git submodule 使用命令简介]]></title>
      <url>http://czhzero.com/2017/03/10/git-submodule-introduce/</url>
      <content type="html"><![CDATA[<p>抽取项目公共模块，多项目共用，必然会使用到git submodule命令。<br>项目中submodule的管理，无外乎添加，更新，删除等操作。</p>
<a id="more"></a>
<p>###1. submodule 添加</p>
<p>进入到git项目根目录下，输入命令:</p>
<blockquote>
<p>git submodule add  [-b master ]  [URL to Git repo]  [local path]</p>
</blockquote>
<p>其中，[-b master] 为submodule的默认分支，[local path]为submodule的本地路径。</p>
<p>若出现如下提示，则表示submodule添加成功。</p>
<p><img src="http://img.blog.csdn.net/20160121154730707" alt="这里写图片描述"></p>
<p>命令执行完成，会在当前工程根路径下生成一个名为“.gitmodules”的文件，其中记录了子模块的信息，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;libraries/pushserver&quot;]</span><br><span class="line"> path = libraries/pushserver                //本地路径</span><br><span class="line"> url = git@*****/android-library-push.git   //仓库地址</span><br><span class="line"> branch = master                            //默认分支</span><br></pre></td></tr></table></figure>
<h3 id="2-submodule-更新"><a href="#2-submodule-更新" class="headerlink" title="2. submodule 更新"></a>2. submodule 更新</h3><p> 若项目中包含.gitmodules, 进入到git项目根目录下，输入命令, .gitmodules中的所有项目都会进行更新:</p>
<blockquote>
<p>git clone 父项目.git<br>git submodule init<br>git submodule update  (update时，submodule分支必须已在正确分支上)</p>
</blockquote>
<p>submodule远程分支发生变更后，直接使用git submodule update是不会进行更新操作的。必须依次进入到各个submodule的目录，进行git pull操作，如果submodule数目很多，每次发版本时必须进入所有目录进行git pull，这将是噩梦。不过有个更简单的方法，</p>
<blockquote>
<p>git submodule foreach git checkout master<br>git submodule foreach git pull</p>
</blockquote>
<h3 id="3-submodule-删除"><a href="#3-submodule-删除" class="headerlink" title="3. submodule 删除"></a>3. submodule 删除</h3><p>删除submodule会麻烦些，仅仅删除submodule模块内容，是无法彻底从git中删除掉。还需要到git相关配置文件中删除条目。</p>
<ol>
<li>删除 [项目根目录/.gitmodules] 中对应的条目</li>
<li>删除 [项目根目录/.git/config] 中对应的条目</li>
<li>删除 [项目根目录/.git/modules] 目录下的对应的submodule文件夹</li>
<li>执行 git rm –cached [modulename] 命令</li>
<li>删除 submodule 模块内容</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fragment的setUserVisibleHint详解]]></title>
      <url>http://czhzero.com/2017/03/10/fragment-setuservisiblehit/</url>
      <content type="html"><![CDATA[<p>Android应用开发过程中，ViewPager同时加载多个fragment，以实现多tab页面快速切换, 但是fragment初始化时若加载的内容较多，就可能导致整个应用启动速度缓慢，影响用户体验。<br>为了提高用户体验，我们会使用一些懒加载方案，实现加载延迟。这时我们会用到getUserVisibleHint()与setUserVisibleHint()这两个方法。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*</span><br><span class="line">* @param isVisibleToUser true if this fragment&apos;s UI is currently visible to the user (default),</span><br><span class="line">*                        false if it is not.</span><br><span class="line">*/</span><br><span class="line">public void setUserVisibleHint(boolean isVisibleToUser) &#123;</span><br><span class="line">   if (!mUserVisibleHint &amp;&amp; isVisibleToUser &amp;&amp; mState &lt; STARTED) &#123;</span><br><span class="line">       mFragmentManager.performPendingDeferredStart(this);</span><br><span class="line">   &#125;</span><br><span class="line">   mUserVisibleHint = isVisibleToUser;</span><br><span class="line">   mDeferStart = !isVisibleToUser;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @return The current value of the user-visible hint on this fragment.</span><br><span class="line"> * @see #setUserVisibleHint(boolean)</span><br><span class="line"> */</span><br><span class="line">public boolean getUserVisibleHint() &#123;</span><br><span class="line">    return mUserVisibleHint;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上述源码注释我们可以看出，当fragment被用户可见时，setUserVisibleHint()会调用且传入true值，当fragment不被用户可见时，setUserVisibleHint()则得到false值。而在传统的fragment生命周期里也看不到这个函数。</p>
<p><img src="http://img.blog.csdn.net/20160428203327414" alt="这里写图片描述"></p>
<p>那么，问题来了，</p>
<blockquote>
<ol>
<li>fragment是如何知道自己时候用户可见？</li>
<li>setUserVisibleHint() 在上图所示fragment的生命周期的什么位置?</li>
</ol>
</blockquote>
<p>先说结论,</p>
<blockquote>
<ol>
<li>viewpager监听切换tab事件，tab切换一次，执行一次setUserVisibleHint()方法</li>
<li>setUserVisibleHint() 在 上图所示fragment所有生命周期之前，无论viewpager是在activity哪个生命周期里初始化。</li>
<li>activity生命周期 和 fragment生命周期 时序并不是按序来的，也就是说fragment的oncreate方法时序并不一定在activity的oncreate方法之后。</li>
</ol>
</blockquote>
<p>具体原因，我们从应用场景开始一点一点的分析。</p>
<h3 id="Theme-1-我们的应用场景"><a href="#Theme-1-我们的应用场景" class="headerlink" title="Theme 1.  我们的应用场景"></a>Theme 1.  我们的应用场景</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends FragmentActivity &#123;</span><br><span class="line"></span><br><span class="line">    private ViewPager viewPager;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        viewPager = (ViewPager) findViewById(R.id.viewpager);</span><br><span class="line">        vpOrder.setAdapter(new MainFragmentPagerAdapter(getSupportFragmentManager()));</span><br><span class="line">        vpOrder.setOffscreenPageLimit(5);</span><br><span class="line">        vpOrder.setCurrentItem(0);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure>
<h3 id="Theme-2-ViewPager-FragmentPagerAdapter"><a href="#Theme-2-ViewPager-FragmentPagerAdapter" class="headerlink" title="Theme 2. ViewPager ,FragmentPagerAdapter"></a>Theme 2. ViewPager ,FragmentPagerAdapter</h3><ul>
<li><code>/frameworks/base/core/java/com/android/internal/widget/ViewPager.java</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//每次切换ViewPager的Tab时调用的方法</span><br><span class="line">void populate(int newCurrentItem) &#123;</span><br><span class="line"></span><br><span class="line">        mAdapter.startUpdate(this);</span><br><span class="line"></span><br><span class="line">        //......</span><br><span class="line">        addNewItem(mCurItem, curIndex);</span><br><span class="line">        // mCurItem 为当前可见Fragment</span><br><span class="line">        // 调用setUserVisibleHint(true)</span><br><span class="line">        mAdapter.setPrimaryItem(this, mCurItem, curItem != null ? curItem.object : null); </span><br><span class="line"></span><br><span class="line">        mAdapter.finishUpdate(this);</span><br><span class="line"></span><br><span class="line">        //.....</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ItemInfo addNewItem(int position, int index) &#123;</span><br><span class="line">        ItemInfo ii = new ItemInfo();</span><br><span class="line">        ii.position = position;</span><br><span class="line">        //初始化fragment, 调用setUserVisibleHint(false)</span><br><span class="line">        ii.object = mAdapter.instantiateItem(this, position);</span><br><span class="line">        ii.widthFactor = mAdapter.getPageWidth(position);</span><br><span class="line">        if (index &lt; 0 || index &gt;= mItems.size()) &#123;</span><br><span class="line">            mItems.add(ii);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            mItems.add(index, ii);</span><br><span class="line">        &#125;</span><br><span class="line">        return ii;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>/frameworks/support/v4/java/android/support/v4/app/FragmentPagerAdapter.java</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">	@Override</span><br><span class="line">public Object instantiateItem(ViewGroup container, int position) &#123;</span><br><span class="line">    if (mCurTransaction == null) &#123;</span><br><span class="line">        mCurTransaction = mFragmentManager.beginTransaction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final long itemId = getItemId(position);</span><br><span class="line"></span><br><span class="line">    // Do we already have this fragment?</span><br><span class="line">    String name = makeFragmentName(container.getId(), itemId);</span><br><span class="line">    Fragment fragment = mFragmentManager.findFragmentByTag(name);</span><br><span class="line">    if (fragment != null) &#123;</span><br><span class="line">        if (DEBUG) Log.v(TAG, &quot;Attaching item #&quot; + itemId + &quot;: f=&quot; + fragment);</span><br><span class="line">        mCurTransaction.attach(fragment);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        fragment = getItem(position);</span><br><span class="line">        if (DEBUG) Log.v(TAG, &quot;Adding item #&quot; + itemId + &quot;: f=&quot; + fragment);</span><br><span class="line">        //将fragment添加到FragmentManager里面</span><br><span class="line">        mCurTransaction.add(container.getId(), fragment,</span><br><span class="line">                makeFragmentName(container.getId(), itemId));</span><br><span class="line">    &#125;</span><br><span class="line">    if (fragment != mCurrentPrimaryItem) &#123;</span><br><span class="line">        fragment.setMenuVisibility(false);</span><br><span class="line">        //我们要找的方法在这里</span><br><span class="line">        fragment.setUserVisibleHint(false); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return fragment;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void setPrimaryItem(ViewGroup container, int position, Object object) &#123;</span><br><span class="line">    Fragment fragment = (Fragment)object;</span><br><span class="line">    if (fragment != mCurrentPrimaryItem) &#123;</span><br><span class="line">        if (mCurrentPrimaryItem != null) &#123;</span><br><span class="line">            mCurrentPrimaryItem.setMenuVisibility(false);</span><br><span class="line">            mCurrentPrimaryItem.setUserVisibleHint(false);</span><br><span class="line">        &#125;</span><br><span class="line">        if (fragment != null) &#123;</span><br><span class="line">	        //我们要找的方法在这里</span><br><span class="line">            fragment.setMenuVisibility(true);</span><br><span class="line">            fragment.setUserVisibleHint(true);</span><br><span class="line">        &#125;</span><br><span class="line">        mCurrentPrimaryItem = fragment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Theme-3-Activity-FragmentManager"><a href="#Theme-3-Activity-FragmentManager" class="headerlink" title="Theme 3. Activity  , FragmentManager"></a>Theme 3. Activity  , FragmentManager</h3><ul>
<li><code>/frameworks/base/core/java/android/app/Activity.java</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">    if (DEBUG_LIFECYCLE) Slog.v(TAG, &quot;onCreate &quot; + this + &quot;: &quot; + savedInstanceState);</span><br><span class="line">    if (mLastNonConfigurationInstances != null) &#123;</span><br><span class="line">        mFragments.restoreLoaderNonConfig(mLastNonConfigurationInstances.loaders);</span><br><span class="line">    &#125;</span><br><span class="line">    if (mActivityInfo.parentActivityName != null) &#123;</span><br><span class="line">        if (mActionBar == null) &#123;</span><br><span class="line">            mEnableDefaultActionBarUp = true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            mActionBar.setDefaultDisplayHomeAsUpEnabled(true);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (savedInstanceState != null) &#123;</span><br><span class="line">        Parcelable p = savedInstanceState.getParcelable(FRAGMENTS_TAG);</span><br><span class="line">        mFragments.restoreAllState(p, mLastNonConfigurationInstances != null</span><br><span class="line">                ? mLastNonConfigurationInstances.fragments : null);</span><br><span class="line">    &#125;</span><br><span class="line">    //分发fragment的onCreate()事件</span><br><span class="line">    mFragments.dispatchCreate(); </span><br><span class="line">    getApplication().dispatchActivityCreated(this, savedInstanceState);</span><br><span class="line">    if (mVoiceInteractor != null) &#123;</span><br><span class="line">        mVoiceInteractor.attachActivity(this);</span><br><span class="line">    &#125;</span><br><span class="line">    mCalled = true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>/frameworks/support/v4/java/android/support/v4/app/FragmentManager.java</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//分发onCreate事件函数</span><br><span class="line">public void dispatchCreate() &#123;</span><br><span class="line">    mStateSaved = false;</span><br><span class="line">    moveToState(Fragment.CREATED, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//moveToState 重载 1</span><br><span class="line">void moveToState(int newState, boolean always) &#123;</span><br><span class="line">    moveToState(newState, 0, 0, always);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//moveToState 重载 2</span><br><span class="line">void moveToState(int newState, int transit, int transitStyle, boolean always) &#123;</span><br><span class="line">    if (mHost == null &amp;&amp; newState != Fragment.INITIALIZING) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;No host&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!always &amp;&amp; mCurState == newState) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mCurState = newState;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //若mActive为null,就算Activtiy里面调用了dispatchOnCreate()也不会执行Fragment</span><br><span class="line">    //的OnAttach和onCreate等方法。</span><br><span class="line"></span><br><span class="line">	//只有mActive非null,即addFragment()执行后，才会真正进入到生命周期。</span><br><span class="line">	//而根据FragmentPagerAdapter可知，只有当viewpager调用setAdapter方法，才会添加fragment到FramentManager。</span><br><span class="line"></span><br><span class="line">    //执行setAdapter的时候，会调用setUserVisibleHint()方法，并且，只有当setAdapter方法执行完之后，才会进入到Fragment到生命周期，因此setUserVisibleHint()方法在所有生命周期之前被调用。</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    if (mActive != null) &#123;</span><br><span class="line">        boolean loadersRunning = false;</span><br><span class="line">        for (int i=0; i&lt;mActive.size(); i++) &#123;</span><br><span class="line">            Fragment f = mActive.get(i);</span><br><span class="line">            if (f != null) &#123;</span><br><span class="line">                moveToState(f, newState, transit, transitStyle, false);</span><br><span class="line">                if (f.mLoaderManager != null) &#123;</span><br><span class="line">                    loadersRunning |= f.mLoaderManager.hasRunningLoaders();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!loadersRunning) &#123;</span><br><span class="line">            startPendingDeferredFragments();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (mNeedMenuInvalidate &amp;&amp; mHost != null &amp;&amp; mCurState == Fragment.RESUMED) &#123;</span><br><span class="line">            mHost.onSupportInvalidateOptionsMenu();</span><br><span class="line">            mNeedMenuInvalidate = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//moveToState 重载 3</span><br><span class="line">void moveToState(Fragment f, int newState, int transit, int transitionStyle,</span><br><span class="line">         </span><br><span class="line">	     //...</span><br><span class="line"></span><br><span class="line">         f.onAttach();</span><br><span class="line"></span><br><span class="line">         //...</span><br><span class="line"></span><br><span class="line">         f.performOnCreate();</span><br><span class="line">          </span><br><span class="line">         //其他生命周期</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//添加fragment到FragmentManager</span><br><span class="line">public void addFragment(Fragment fragment, boolean moveToStateNow) &#123;</span><br><span class="line">    if (mAdded == null) &#123;</span><br><span class="line">        mAdded = new ArrayList&lt;Fragment&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    if (DEBUG) Log.v(TAG, &quot;add: &quot; + fragment);</span><br><span class="line"></span><br><span class="line">    //激活fragment</span><br><span class="line">    makeActive(fragment);</span><br><span class="line"></span><br><span class="line">    if (!fragment.mDetached) &#123;</span><br><span class="line">        if (mAdded.contains(fragment)) &#123;</span><br><span class="line">            throw new IllegalStateException(&quot;Fragment already added: &quot; + fragment);</span><br><span class="line">        &#125;</span><br><span class="line">        mAdded.add(fragment);</span><br><span class="line">        fragment.mAdded = true;</span><br><span class="line">        fragment.mRemoving = false;</span><br><span class="line">        if (fragment.mHasMenu &amp;&amp; fragment.mMenuVisible) &#123;</span><br><span class="line">            mNeedMenuInvalidate = true;</span><br><span class="line">        &#125;</span><br><span class="line">        if (moveToStateNow) &#123;</span><br><span class="line">            moveToState(fragment);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void makeActive(Fragment f) &#123;</span><br><span class="line">    if (f.mIndex &gt;= 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (mAvailIndices == null || mAvailIndices.size() &lt;= 0) &#123;</span><br><span class="line">        if (mActive == null) &#123;</span><br><span class="line">        	//激活Fragment</span><br><span class="line">            mActive = new ArrayList&lt;Fragment&gt;();	</span><br><span class="line">        &#125;</span><br><span class="line">        f.setIndex(mActive.size(), mParent);</span><br><span class="line">        mActive.add(f);</span><br><span class="line">        </span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        f.setIndex(mAvailIndices.remove(mAvailIndices.size()-1), mParent);</span><br><span class="line">        mActive.set(f.mIndex, f);</span><br><span class="line">    &#125;</span><br><span class="line">    if (DEBUG) Log.v(TAG, &quot;Allocated fragment index &quot; + f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为Android Studio 项目手动下载gradle]]></title>
      <url>http://czhzero.com/2017/03/10/gradle-manual-download/</url>
      <content type="html"><![CDATA[<p>原文:  <a href="http://www.cnblogs.com/duanguyuan/p/3997550.html" target="_blank" rel="external">http://www.cnblogs.com/duanguyuan/p/3997550.html</a></p>
<p>在 <a href="http://developer.android.com/samples/index.html" target="_blank" rel="external">http://developer.android.com/samples/index.html</a> 上下载的例子，导入Android Studio的时候，第一件事就是下载项目对应版本的gradle。gradle是一个主要面向Java应用的build工具，类似于大家熟知的eclipse下的Ant，但比Ant高级。</p>
<a id="more"></a>
<p>Andriod Studio下载gradle的过程很慢，在运行./studio.sh的终端中可以看见进度：</p>
<p>把终端中的网址复制下来，在浏览器中打开，可见有38MB多。Windows下可用迅雷下载，Linux下推荐Firefox + DownThemAll插件。</p>
<p>Android Studio下载的各个版本gradle放在~/.gradle/wrapper/dists/目录下（Windows下目录为C:\Users\用户名.gradle\wrapper\dists）。如下显示了Andriod Studio已经下载了gradle部分文件的大小，可见已经下载了20MB左右：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wy@wy-Inspiron-7420:~/.gradle/wrapper/dists/gradle-1.10-bin/6oa4rff9viiqskhgd6uns5v1f8$ ll</span><br><span class="line">total 21432</span><br><span class="line">drwxrwxr-x 2 wy wy     4096 Sep 28 00:27 ./</span><br><span class="line">drwxrwxr-x 3 wy wy     4096 Sep 28 00:20 ../</span><br><span class="line">-rw-rw-r-- 1 wy wy        0 Sep 28 00:20 gradle-1.10-bin.zip.lck</span><br><span class="line">-rw-rw-r-- 1 wy wy 21931207 Sep 28 00:33 gradle-1.10-bin.zip.part</span><br></pre></td></tr></table></figure>
<p>在Android Studio中取消下载（不过貌似有个bug，取消不了，那就直接在运行studio.sh的终端中按Ctrl + C 退出Android Studio）。</p>
<p>将gradle-1.10-bin.zip.part移除，把自己下载的gradle-1.10-bin.zip复制到这个目录。然后再次启动Andriod Studio，会自动读取gradle并解压，然后用解压得到的gradle工具build你import进来的sample project。</p>
<p>再次查看gradle的下载目录，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wy@wy-Inspiron-7420:~/.gradle/wrapper/dists/gradle-1.10-bin/6oa4rff9viiqskhgd6uns5v1f8$ ll</span><br><span class="line">total 39472</span><br><span class="line">drwxrwxr-x 3 wy wy     4096 Sep 28 00:38 ./</span><br><span class="line">drwxrwxr-x 3 wy wy     4096 Sep 28 00:20 ../</span><br><span class="line">drwxrwxr-x 6 wy wy     4096 Sep 28 00:38 gradle-1.10/</span><br><span class="line">-rw-r----- 1 wy wy 40404574 Sep 28 00:37 gradle-1.10-bin.zip</span><br><span class="line">-rw-rw-r-- 1 wy wy        0 Sep 28 00:20 gradle-1.10-bin.zip.lck</span><br><span class="line">-rw-rw-r-- 1 wy wy        0 Sep 28 00:38 gradle-1.10-bin.zip.ok</span><br></pre></td></tr></table></figure>
<p>lck和ok文件大小为0，没有实际内容，起一个标志的作用。ok表示此版本的gradle已经收拾妥当（在下载完毕之前是没有这个ok文件的）。lck文件不知什么作用。（猜测是lock的意思，标记这个版本的gradle是否有project在使用。如果没有被使用，当总的gradle文件达到缓存上限后，此版本的gradle会被删除）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android分享机制总结]]></title>
      <url>http://czhzero.com/2017/03/10/android-share-introduce/</url>
      <content type="html"><![CDATA[<p>Android应用分享功能是一般应用所必不可少到功能。<br>一般有以下三种方式。</p>
<ul>
<li>调用系统Activity进行分享 </li>
<li>根据第三方App的包名和类名直接启动 </li>
<li>注册第三方app账号，集成sdk</li>
</ul>
<a id="more"></a>
<p>###1.调用系统Activity进行分享</p>
<p>这种方式最为简单，但是有些分享软件的高级功能无法使用。<br>分享一般分为图片，文字，或者图片文字混合的分享。</p>
<ul>
<li>分享文字</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Intent intent= new Intent(Intent.ACTION_SEND);</span><br><span class="line">intent.setType(&quot;text/plain&quot;);</span><br><span class="line">intent .putExtra(Intent.EXTRA_SUBJECT, &quot;subject&quot;);</span><br><span class="line">intent.putExtra(Intent.EXTRA_TEXT,&quot;my share content&quot;);</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">startActivity(Intent.createChooser(intentItem, &quot;share&quot;));</span><br></pre></td></tr></table></figure>
<ul>
<li>分享图片</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Intent shareIntent = new Intent(); </span><br><span class="line">shareIntent.setAction(Intent.ACTION_SEND); </span><br><span class="line">File file=new File(imgPath);</span><br><span class="line">Uri uri=Uri.fromFile(file);  </span><br><span class="line">shareIntent.putExtra(Intent.EXTRA_STREAM, uri); </span><br><span class="line">shareIntent.putExtra(Intent.EXTRA_TEXT, &quot;share content&quot;);</span><br><span class="line">shareIntent.setType(&quot;image/*&quot;); </span><br><span class="line">startActivity(Intent.createChooser(shareIntent,&quot;image share &quot;));</span><br></pre></td></tr></table></figure>
<ul>
<li>分享多张图片</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Uri&gt; imageUris = new ArrayList&lt;Uri&gt;();</span><br><span class="line">imageUris.add(uri_1); </span><br><span class="line">imageUris.add(uri_2);</span><br><span class="line">Intent shareIntent = new Intent();</span><br><span class="line">shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);</span><br><span class="line">shareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, imageUris);</span><br><span class="line">shareIntent.setType(&quot;image/*&quot;);</span><br><span class="line">startActivity(Intent.createChooser(shareIntent, &quot;image share&quot;));</span><br></pre></td></tr></table></figure>
<ul>
<li>同时分享文字和图片</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(Intent.ACTION_SEND);</span><br><span class="line">if(imgPath == null || imgPath.equals(&quot;&quot;)) &#123;</span><br><span class="line">	intent.setType(&quot;text/plain&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">		File f = new File(imgPath);</span><br><span class="line">		if (f != null &amp;&amp; f.exists() &amp;&amp; f.isFile()) &#123;</span><br><span class="line">	       intent.setType(&quot;image/jpg&quot;);</span><br><span class="line">	       Uri u = Uri.fromFile(f);</span><br><span class="line">	       intent.putExtra(Intent.EXTRA_STREAM, u);</span><br><span class="line">	   &#125;</span><br><span class="line">&#125;</span><br><span class="line">intent.putExtra(Intent.EXTRA_SUBJECT, msgTitle);</span><br><span class="line">intent.putExtra(Intent.EXTRA_TEXT, msgText);</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">startActivity(Intent.createChooser(intent, activityTitle));</span><br></pre></td></tr></table></figure>
<p>###2.根据第三方App的包名和类名直接启动</p>
<p>根据第三方包名直接启动，可以自定义界面，同时也不需要任何sdk，节省apk空间大小。缺点是，万一第三方app更新类名或者增加了某些特殊限制，这一方法也将会失效。</p>
<ul>
<li>获取可分享app的包名和activity名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ResolveInfo&gt; mApps = new ArrayList&lt;ResolveInfo&gt;();</span><br><span class="line">Intent intent = new Intent(Intent.ACTION_SEND, null);</span><br><span class="line">intent.addCategory(Intent.CATEGORY_DEFAULT);</span><br><span class="line">intent.setType(&quot;text/plain&quot;);</span><br><span class="line">PackageManager pManager = context.getPackageManager();</span><br><span class="line">mApps = pManager.queryIntentActivities(intent, PackageManager.COMPONENT_ENABLED_STATE_DEFAULT);</span><br><span class="line">if(mApps!=null)</span><br><span class="line">&#123;</span><br><span class="line"> for (ResolveInfo resolveInfo : mApps) &#123;</span><br><span class="line"> Log.v(&quot;czh&quot;,&quot;packageName=&quot;+resolveInfo.activityInfo.packageName);</span><br><span class="line"> Log.v(&quot;czh&quot;,&quot;activityName=&quot;+resolveInfo.activityInfo.name);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>传递数据到第三方app </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">	Intent intent = new Intent();</span><br><span class="line">	ComponentName componentName = new ComponentName(</span><br><span class="line">			&quot;com.renren.mobile.android&quot;,</span><br><span class="line">			&quot;com.renren.mobile.android.publisher.UploadPhotoEffect&quot;);</span><br><span class="line">	intent.setComponent(componentName);</span><br><span class="line">	intent.setAction(Intent.ACTION_SEND);</span><br><span class="line">	intent.setType(&quot;image/*&quot;);</span><br><span class="line">	intent.putExtra(Intent.EXTRA_TEXT, mSelectedString);</span><br><span class="line">	startActivity(intent);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>###3.注册第三方app账号，集成sdk</p>
<p>这种是最常用的方法，参考官方sdk即可。虽然麻烦了点，但是是最可靠的方法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android注解使用快速入门]]></title>
      <url>http://czhzero.com/2017/03/10/annotation-start/</url>
      <content type="html"><![CDATA[<p>注解是那些插入到源码中用于某种工具处理的标签。在java语言中，注解被当作一个修饰符使用的，每个注解的名称前面都加上了@符号。注解自身并不会做任何事情，它需要通过注解事件处理器处理后，才会有用。</p>
<p>注解在Android应用开发当中，使用还是很广泛的。很多热门的框架都使用了注解，例如，butterknife ，retrofit，一些主流的数据库框架等。</p>
<p>一个完整的注解应用通常由注解接口定义、注解事件处理器、注解应用场景类三部分组成。</p>
<a id="more"></a>
<hr>
<h2 id="1-注解接口定义"><a href="#1-注解接口定义" class="headerlink" title="1.注解接口定义"></a>1.注解接口定义</h2><p>定义注解格式：</p>
<blockquote>
<p>public @interface 注解名 {定义体}</p>
</blockquote>
<p>注解参数的可支持数据类型：</p>
<p>1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)<br>2.String类型<br>3.Class类型<br>4.enum类型<br>5.Annotation类型<br>6.以上所有类型的数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.chen.annotation;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface ActionListener &#123;</span><br><span class="line">    public String source() default &quot;nothing&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，</p>
<p><strong>@Target</strong></p>
<blockquote>
<p>@Target说明了Annotation所修饰的对象范围：Annotation可被用于<br>packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</p>
<p>取值(ElementType)有：<br>1.CONSTRUCTOR:用于描述构造器<br>2.FIELD:用于描述域<br>3.LOCAL_VARIABLE:用于描述局部变量<br>4.METHOD:用于描述方法<br>5.PACKAGE:用于描述包<br>6.PARAMETER:用于描述参数<br>7.TYPE:用于描述类、接口(包括注解类型) 或enum声明</p>
</blockquote>
<p><strong>@Retention</strong></p>
<blockquote>
<p>@Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对<br>Annotation的“生命周期”限制。</p>
<p>取值（RetentionPoicy）有：<br>1.SOURCE:在源文件中有效（即源文件保留）<br>2.CLASS:在class文件中有效（即class保留）<br>3.RUNTIME:在运行时有效（即运行时保留）</p>
</blockquote>
<h2 id="2-注解事件处理器"><a href="#2-注解事件处理器" class="headerlink" title="2.注解事件处理器"></a>2.注解事件处理器</h2><p> 编写注解事件处理器，通过反射获得场景类对象的annotation的source对象。并且为source对象调用setOnClickListener方法进行事件绑定。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.chen.annotation;</span><br><span class="line"></span><br><span class="line">import android.view.View;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by chenzhaohua on 16/1/31.</span><br><span class="line"> */</span><br><span class="line">public class ActionListenerInstaller &#123;</span><br><span class="line"></span><br><span class="line">    public static void processAnnotations(Object client) &#123;</span><br><span class="line">        Class&lt;?&gt; clientClass = client.getClass();</span><br><span class="line"></span><br><span class="line">        for (Method m : clientClass.getDeclaredMethods()) &#123;</span><br><span class="line"></span><br><span class="line">            //获取指定Annotation对象</span><br><span class="line">            ActionListener listener = m.getAnnotation(ActionListener.class);</span><br><span class="line"></span><br><span class="line">            if (listener != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Field f = clientClass.getDeclaredField(listener.source());</span><br><span class="line">                    f.setAccessible(true);</span><br><span class="line">                    //控件对象</span><br><span class="line">                    Object focusView = f.get(client);</span><br><span class="line">                    //addListenr函数添加监听，当click事件发生时，调用 onBtnClick() 函数</span><br><span class="line">                    addListenr(focusView, client, m);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void addListenr(final Object focusView, final Object client, final Method m) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        InvocationHandler handler = new InvocationHandler() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">                //场景类调用 onBtnClick() 方法</span><br><span class="line">                return m.invoke(client);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Object onClickListenr = Proxy.newProxyInstance(null, new Class[]&#123;View.OnClickListener.class&#125;, handler);</span><br><span class="line"></span><br><span class="line">        Method setOnClickListenerMethod = focusView.getClass().getMethod(&quot;setOnClickListener&quot;, View.OnClickListener.class);</span><br><span class="line"></span><br><span class="line">        setOnClickListenerMethod.invoke(focusView, onClickListenr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-注解应用场景类"><a href="#3-注解应用场景类" class="headerlink" title="3.注解应用场景类"></a>3.注解应用场景类</h2><p>注解应用场景类中，只需要调用处理器中的processAnnotations方法，通过反射完成click事件的绑定。</p>
<p>同时为click事件指定source控件,添加事件处理函数onBtnClick。</p>
<p>这样一个简单的Android注解应用就完成了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.chen.annotation;</span><br><span class="line"></span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.widget.Button;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class MainActivity extends Activity &#123;</span><br><span class="line"></span><br><span class="line">    private Button test_btn;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        test_btn = (Button) findViewById(R.id.test_btn);</span><br><span class="line">        ActionListenerInstaller.processAnnotations(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @ActionListener(source = &quot;test_btn&quot;)</span><br><span class="line">    public void onBtnClick() &#123;</span><br><span class="line">        android.util.Log.d(&quot;czh&quot;,&quot;CLICK 事件发生了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何在子模块中获取BuildConfig.DEBUG值]]></title>
      <url>http://czhzero.com/2017/03/10/get-buildconfig-debug/</url>
      <content type="html"><![CDATA[<p>   在Android开发中，我们使用android.util.Log来打印日志，方便我们的开发调试。但是这些代码不想在发布后执行，我们并不想在软件发布后调试日志被其他开发者看到，我们一般可以通过设定一个布尔类型达常量，来标记软件为Debug模式还是Release模式。<br>ADT 17版本以后，我们可以通过读取build/BuildConfig.java文件里DEBUG常量来判断。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (BuildConfig.DEBUG) &#123;</span><br><span class="line">    android.util.Log.d(TAG,&quot;something&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是，如果子项目里也需要用到BuildConfig.DEBUG的值，并像如上的方式直接使用的话，会发现BuildConfig.DEBUG获取到的值一直为false。</p>
<p>出现这种现象的原因是，在子项目里虽然也有bulid文件夹，但是编译成最终apk的时候并未正确去正确编译子项目里的BuildConfig.java文件。</p>
<p>因此若要获取到正确的BuildConfig.DEBUG值，还必须通过反射的方式，获取到主项目里的BuildConfig.DEBUG值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static Object getBuildConfigValue(Context context, String fieldName) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(context.getPackageName() + &quot;.BuildConfig&quot;);</span><br><span class="line">        Field field = clazz.getField(fieldName);</span><br><span class="line">        return field.get(null);</span><br><span class="line">    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (NoSuchFieldException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boolean debug = (Boolean) getBuildConfigValue(this, &quot;DEBUG&quot;);</span><br></pre></td></tr></table></figure>
<p>这样就可以获得到真正的BuildConfig.DEBUG。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[单个电脑上进行多ssh-key配置]]></title>
      <url>http://czhzero.com/2017/03/10/multi-ssh-key/</url>
      <content type="html"><![CDATA[<p>ssh是一种网络协议，用于计算机之间的加密登录。由于公司使用的是git进行代码管理，而在公司电脑上有时也需要访问github。所以，在同一台机器上配置两个ssh-key很有必要。我用的mac机器，大部分东西都有了，配置起来还是比较简单的。</p>
<a id="more"></a>
<p>###1.生成公钥/私钥</p>
<p>命令行输入下面一行命令，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your@email.com&quot; -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<p>其中，-f 参数表示生成公钥／私钥的路径，不设置，代表默认路径。</p>
<p>为配置多个ssh-key必须设置路径，否则会相互覆盖。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//key-1</span><br><span class="line">ssh-keygen -t rsa -C &quot;first@email.com&quot; -f ~/.ssh/id_rsa</span><br><span class="line">//key-2</span><br><span class="line">ssh-keygen -t rsa -C &quot;second@email.com&quot; -f ~/.ssh/id_rsa_new</span><br></pre></td></tr></table></figure>
<p>.ssh文件下会生成四个文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id_rsa             //第一个私钥</span><br><span class="line"></span><br><span class="line">id_rsa.pub         //第一个公钥</span><br><span class="line"></span><br><span class="line">id_rsa_new         //第二个私钥</span><br><span class="line"></span><br><span class="line">id_rsa_new.pub     //第二个公钥</span><br></pre></td></tr></table></figure>
<p>###2.git服务器设置公钥</p>
<p>(1)命令行拷贝公钥内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>(2)登录git服务器，配置公钥。</p>
<p>以github为例,进入到Personal settings－SSH Keys - Add Key, 粘贴公钥内容即可。</p>
<p><img src="http://img.blog.csdn.net/20160105232245917" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20160105232418300" alt="这里写图片描述"></p>
<p>###3.设置私钥代理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">ssh-add ~/.ssh/id_rsa_new</span><br></pre></td></tr></table></figure>
<p>如果执行ssh-add时提示”Could not open a connection to your authentication agent”，可以先执行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-agent bash</span><br></pre></td></tr></table></figure>
<p>再执行ssh-add命令。执行完成后，可通过下面两个命令进行修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#显示私钥列表</span><br><span class="line">$ ssh-add -l   </span><br><span class="line"></span><br><span class="line">#清空私钥列表</span><br><span class="line">$ ssh-add -D</span><br></pre></td></tr></table></figure>
<p>###4.增加/修改.ssh/config配置文件</p>
<p>将config文件修改成如下样式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#自建服务器</span><br><span class="line">Host gitlab</span><br><span class="line">HostName your.company.com</span><br><span class="line">Port 5555</span><br><span class="line">User test1</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_new</span><br><span class="line"></span><br><span class="line">#github服务器</span><br><span class="line">Host github</span><br><span class="line">HostName github.com</span><br><span class="line">User test2</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>
<p>###5.验证结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>若输出如下结果,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi ****! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>
<p>则ssh-key配置成功。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ListView聊天窗口与输入法键盘冲突解决方法(聊天框在viewpager里)]]></title>
      <url>http://czhzero.com/2017/03/10/listview-chat-view/</url>
      <content type="html"><![CDATA[<p>在使用listView显示聊天窗口时，弹出输入法，我们期待的效果是输入框上移动，listview自动定位到最后的聊天内容。<br>但是项目中遇到了这样的情况，</p>
<a id="more"></a>
<p><img src="http://img.blog.csdn.net/20160514114854249" alt="这里写图片描述"></p>
<p>聊天框底下有tab,我们就需要解决三件事。</p>
<blockquote>
<p>1.输入法弹出时候ListView聊天内容不被遮挡</p>
<p>2.输入法弹出的时候，底部tab隐藏</p>
<p>3.输入法弹出的时候，聊天内容自动定位到最后一行。</p>
</blockquote>
<p>###1.在manifest的activity中设置输入法属性。</p>
<p>android:windowSoftInputMode</p>
<p>这个是Android1.5后的一个新特性。activity主窗口与软键盘的交互模式，可以用来避免输入法面板遮挡问题，<br>这个属性能影响两件事情：<br>【一】当有焦点产生时，软键盘是隐藏还是显示<br>【二】是否减少活动主窗口大小以便腾出空间放软键盘</p>
<p>各值的含义：</p>
<ul>
<li>【A】stateUnspecified：软键盘的状态并没有指定，系统将选择一个合适的状态或依赖于主题的设置</li>
<li>【B】stateUnchanged：当这个activity出现时，软键盘将一直保持在上一个activity里的状态，无论是隐藏还是显示</li>
<li>【C】stateHidden：用户选择activity时，软键盘总是被隐藏</li>
<li>【D】stateAlwaysHidden：当该Activity主窗口获取焦点时，软键盘也总是被隐藏的</li>
<li>【E】stateVisible：软键盘通常是可见的</li>
<li>【F】stateAlwaysVisible：用户选择activity时，软键盘总是显示的状态</li>
<li>【G】adjustUnspecified：默认设置，通常由系统自行决定是隐藏还是显示</li>
<li>【H】adjustResize：该Activity总是调整屏幕的大小以便留出软键盘的空间</li>
<li>【I】adjustPan：当前窗口的内容将自动移动以便当前焦点从不被键盘覆盖和用户能总是看到输入内容的部分</li>
</ul>
<p>分别尝试了下面两种组合，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:windowSoftInputMode=&quot;adjustPan|stateAlwaysHidden&quot;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20160514114956946" alt="这里写图片描述"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:windowSoftInputMode=&quot;adjustResize|stateAlwaysHidden&quot;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20160514115015384" alt="这里写图片描述"></p>
<p>第一种情况，底部tab是看不见了，但是顶部的标题栏也被顶掉了，<br>第二种情况是标题栏还在，但是底部tab也可以看见。<br>针对第一情况，可以采取当标题被顶掉时，弹出一个popupwindow代替，但是这种方法需要考虑，弹出位置和tab直接之间切换的影响，比较麻烦。因此本人针对第二钟情况隐藏底部tab。</p>
<p>###2.监听键盘弹出事件，隐藏底部tab</p>
<p>因为resize模式会改变布局的大小，所以我们可以监听布局尺寸的变化,从而监听键盘是否弹出。</p>
<ul>
<li>方法一：重新onSizeChanged</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</span><br><span class="line">       super.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">       //计算尺寸，判断变大还是变小。</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>方法二：增加addOnGlobalLayoutListener</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vpContent.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class="line">	    @Override</span><br><span class="line">	    public void onGlobalLayout() &#123;</span><br><span class="line">	        if(vpContent.getRootView().getHeight() - vpContent.getHeight() &gt; 500) &#123;</span><br><span class="line">	            //隐藏tab</span><br><span class="line">	        &#125; else &#123;</span><br><span class="line">	            //显示tab</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure>
<p>###3.键盘弹出时，listview定位到最后一行</p>
<ul>
<li>方法一：增加listview的transcriptMode属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:transcriptMode=&quot;alwaysScroll&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>方法二：调用setSelection()方法 (这种方法不会有屏幕跳动) </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listview.setSelection(mData.size()-1);</span><br></pre></td></tr></table></figure>
<p>   不过，隐藏底部tab时，listview会重绘，出现了数据抖动效果，这个问题还有待解决。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式学习笔记-六大原则]]></title>
      <url>http://czhzero.com/2017/03/09/design-pattern-rule/</url>
      <content type="html"><![CDATA[<p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的；设计模式使代码编制真正工程化；设计模式是软件工程的基石脉络，如同大厦的结构一样。</p>
<a id="more"></a>
<p>设计模式(面向对象)有六大原则：</p>
<h2 id="单一职责模式"><a href="#单一职责模式" class="headerlink" title="单一职责模式"></a>单一职责模式</h2><p>定义：不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。<br>问题由来：类T负责两个不同的职责：职责P1，职责P2。当由于职责P1需求发生改变而需要修改类T时，有可能会导致原本运行正常的职责P2功能发生故障。</p>
<p>解决方案：遵循单一职责原则。分别建立两个类T1、T2，使T1完成职责P1功能，T2完成职责P2功能。这样，当修改类T1时，不会使职责P2发生故障风险；同理，当修改T2时，也不会使职责P1发生故障风险。</p>
<p>说到单一职责原则，很多人都会不屑一顾。因为它太简单了。稍有经验的程序员即使从来没有读过设计模式、从来没有听说过单一职责原则，在设计软件时也会自觉的遵守这一重要原则，因为这是常识。在软件编程中，谁也不希望因为修改了一个功能导致其他的功能发生故障。而避免出现这一问题的方法便是遵循单一职责原则。虽然单一职责原则如此简单，并且被认为是常识，但是即便是经验丰富的程序员写出的程序，也会有违背这一原则的代码存在。为什么会出现这种现象呢？因为有职责扩散。所谓职责扩散，就是因为某种原因，职责P被分化为粒度更细的职责P1和P2。</p>
<p>比如：类T只负责一个职责P，这样设计是符合单一职责原则的。后来由于某种原因，也许是需求变更了，也许是程序的设计者境界提高了，需要将职责P细分为粒度更细的职责P1，P2，这时如果要使程序遵循单一职责原则，需要将类T也分解为两个类T1和T2，分别负责P1、P2两个职责。但是在程序已经写好的情况下，这样做简直太费时间了。所以，简单的修改类T，用它来负责两个职责是一个比较不错的选择，虽然这样做有悖于单一职责原则。（这样做的风险在于职责扩散的不确定性，因为我们不会想到这个职责P，在未来可能会扩散为P1，P2，P3，P4……Pn。所以记住，在职责扩散到我们无法控制的程度之前，立刻对代码进行重构。）</p>
<p>遵循单一职责原的优点有：</p>
<p>可以降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单的多；<br>提高类的可读性，提高系统的可维护性；<br>变更引起的风险降低，变更是必然的，如果单一职责原则遵守的好，当修改一个功能时，可以显著降低对其他功能的影响。<br>需要说明的一点是单一职责原则不只是面向对象编程思想所特有的，只要是模块化的程序设计，都适用单一职责原则。</p>
<h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p>肯定有不少人跟我刚看到这项原则的时候一样，对这个原则的名字充满疑惑。其实原因就是这项原则最早是在1988年，由麻省理工学院的一位姓里的女士（Barbara Liskov）提出来的。</p>
<p>定义1：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。</p>
<p>定义2：所有引用基类的地方必须能透明地使用其子类的对象。</p>
<p>问题由来：有一功能P1，由类A完成。现需要将功能P1进行扩展，扩展后的功能为P，其中P由原有功能P1与新功能P2组成。新功能P由类A的子类B来完成，则子类B在完成新功能P2的同时，有可能会导致原有功能P1发生故障。</p>
<p>解决方案：当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法。</p>
<p>继承包含这样一层含义：父类中凡是已经实现好的方法（相对于抽象方法而言），实际上是在设定一系列的规范和契约，虽然它不强制要求所有的子类必须遵从这些契约，但是如果子类对这些非抽象方法任意修改，就会对整个继承体系造成破坏。而里氏替换原则就是表达了这一层含义。</p>
<p>继承作为面向对象三大特性之一，在给程序设计带来巨大便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加了对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能会产生故障。</p>
<p>里氏替换原则通俗的来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。它包含以下4层含义：</p>
<p>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。<br>子类中可以增加自己特有的方法。<br>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。<br>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。<br>看上去很不可思议，因为我们会发现在自己编程中常常会违反里氏替换原则，程序照样跑的好好的。所以大家都会产生这样的疑问，假如我非要不遵循里氏替换原则会有什么后果？</p>
<p>后果就是：你写的代码出问题的几率将会大大增加。</p>
<h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p>定义：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。</p>
<p>问题由来：类A直接依赖类B，假如要将类A改为依赖类C，则必须通过修改类A的代码来达成。这种场景下，类A一般是高层模块，负责复杂的业务逻辑；类B和类C是低层模块，负责基本的原子操作；假如修改类A，会给程序带来不必要的风险。</p>
<p>解决方案：将类A修改为依赖接口I，类B和类C各自实现接口I，类A通过接口I间接与类B或者类C发生联系，则会大大降低修改类A的几率。</p>
<p>依赖倒置原则基于这样一个事实：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建起来的架构比以细节为基础搭建起来的架构要稳定的多。在java中，抽象指的是接口或者抽象类，细节就是具体的实现类，使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。</p>
<p>传递依赖关系有三种方式，以上的例子中使用的方法是接口传递，另外还有两种传递方式：构造方法传递和setter方法传递，相信用过Spring框架的，对依赖的传递方式一定不会陌生。</p>
<p>在实际编程中，我们一般需要做到如下3点：</p>
<p>低层模块尽量都要有抽象类或接口，或者两者都有。<br>变量的声明类型尽量是抽象类或接口。<br>使用继承时遵循里氏替换原则。<br>依赖倒置原则的核心就是要我们面向接口编程，理解了面向接口编程，也就理解了依赖倒置。</p>
<h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>定义：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。 </p>
<p>问题由来：类A通过接口I依赖类B，类C通过接口I依赖类D，如果接口I对于类A和类B来说不是最小接口，则类B和类D必须去实现他们不需要的方法。</p>
<p>解决方案：将臃肿的接口I拆分为独立的几个接口，类A和类C分别与他们需要的接口建立依赖关系。也就是采用接口隔离原则。</p>
<p>举例来说明接口隔离原则：</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/021/2012110231.jpg" alt=""></p>
<p>（图1 未遵循接口隔离原则的设计）</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/021/2012110232.jpg" alt=""></p>
<p>（图2 遵循接口隔离原则的设计）</p>
<p>接口隔离原则的含义是：建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。也就是说，我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。本文例子中，将一个庞大的接口变更为3个专用的接口所采用的就是接口隔离原则。在程序设计中，依赖几个专用的接口要比依赖一个综合的接口更灵活。接口是设计时对外部设定的“契约”，通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</p>
<p>说到这里，很多人会觉的接口隔离原则跟之前的单一职责原则很相似，其实不然。其一，单一职责原则原注重的是职责；而接口隔离原则注重对接口依赖的隔离。其二，单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口接口，主要针对抽象，针对程序整体框架的构建。</p>
<p>采用接口隔离原则对接口进行约束时，要注意以下几点：</p>
<p>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。<br>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。<br>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。<br>运用接口隔离原则，一定要适度，接口设计的过大或过小都不好。设计接口的时候，只有多花些时间去思考和筹划，才能准确地实践这一原则。</p>
<h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><p>定义：一个对象应该对其他对象保持最少的了解。</p>
<p>问题由来：类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。</p>
<p>解决方案：尽量降低类与类之间的耦合。</p>
<p>自从我们接触编程开始，就知道了软件编程的总的原则：低耦合，高内聚。无论是面向过程编程还是面向对象编程，只有使各个模块之间的耦合尽量的低，才能提高代码的复用率。低耦合的优点不言而喻，但是怎么样编程才能做到低耦合呢？那正是迪米特法则要去完成的。</p>
<p>迪米特法则又叫最少知道原则，最早是在1987年由美国Northeastern University的Ian Holland提出。通俗的来讲，就是一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类来说，无论逻辑多么复杂，都尽量地的将逻辑封装在类的内部，对外除了提供的public方法，不对外泄漏任何信息。迪米特法则还有一个更简单的定义：只与直接的朋友通信。首先来解释一下什么是直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖、关联、组合、聚合等。其中，我们称出现成员变量、方法参数、方法返回值中的类为直接的朋友，而出现在局部变量中的类则不是直接的朋友。也就是说，陌生的类最好不要作为局部变量的形式出现在类的内部。</p>
<p>迪米特法则的初衷是降低类之间的耦合，由于每个类都减少了不必要的依赖，因此的确可以降低耦合关系。但是凡事都有度，虽然可以避免与非直接的类通信，但是要通信，必然会通过一个“中介”来发生联系，例如本例中，总公司就是通过分公司这个“中介”来与分公司的员工发生联系的。过分的使用迪米特原则，会产生大量这样的中介和传递类，导致系统复杂度变大。所以在采用迪米特法则时要反复权衡，既做到结构清晰，又要高内聚低耦合。</p>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>定义：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。</p>
<p>问题由来：在软件的生命周期内，因为变化、升级和维护等原因需要对软件原有代码进行修改时，可能会给旧代码中引入错误，也可能会使我们不得不对整个功能进行重构，并且需要原有代码经过重新测试。</p>
<p>解决方案：当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</p>
<p>开闭原则是面向对象设计中最基础的设计原则，它指导我们如何建立稳定灵活的系统。开闭原则可能是设计模式六项原则中定义最模糊的一个了，它只告诉我们对扩展开放，对修改关闭，可是到底如何才能做到对扩展开放，对修改关闭，并没有明确的告诉我们。以前，如果有人告诉我“你进行设计的时候一定要遵守开闭原则”，我会觉的他什么都没说，但貌似又什么都说了。因为开闭原则真的太虚了。</p>
<p>在仔细思考以及仔细阅读很多设计模式的文章后，终于对开闭原则有了一点认识。其实，我们遵循设计模式前面5大原则，以及使用23种设计模式的目的就是遵循开闭原则。也就是说，只要我们对前面5项原则遵守的好了，设计出的软件自然是符合开闭原则的，这个开闭原则更像是前面五项原则遵守程度的“平均得分”，前面5项原则遵守的好，平均分自然就高，说明软件设计开闭原则遵守的好；如果前面5项原则遵守的不好，则说明开闭原则遵守的不好。</p>
<p>其实笔者认为，开闭原则无非就是想表达这样一层意思：用抽象构建框架，用实现扩展细节。因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节，我们用从抽象派生的实现类来进行扩展，当软件需要发生变化时，我们只需要根据需求重新派生一个实现类来扩展就可以了。当然前提是我们的抽象要合理，要对需求的变更有前瞻性和预见性才行。</p>
<p>说到这里，再回想一下前面说的5项原则，恰恰是告诉我们用抽象构建框架，用实现扩展细节的注意事项而已：单一职责原则告诉我们实现类要职责单一；里氏替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们要面向接口编程；接口隔离原则告诉我们在设计接口的时候要精简单一；迪米特法则告诉我们要降低耦合。而开闭原则是总纲，他告诉我们要对扩展开放，对修改关闭。</p>
<p>最后说明一下如何去遵守这六个原则。对这六个原则的遵守并不是是和否的问题，而是多和少的问题，也就是说，我们一般不会说有没有遵守，而是说遵守程度的多少。任何事都是过犹不及，设计模式的六个设计原则也是一样，制定这六个原则的目的并不是要我们刻板的遵守他们，而需要根据实际情况灵活运用。对他们的遵守程度只要在一个合理的范围内，就算是良好的设计。我们用一幅图来说明一下。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/021/2012110233.jpg" alt=""></p>
<p>图中的每一条维度各代表一项原则，我们依据对这项原则的遵守程度在维度上画一个点，则如果对这项原则遵守的合理的话，这个点应该落在红色的同心圆内部；如果遵守的差，点将会在小圆内部；如果过度遵守，点将会落在大圆外部。一个良好的设计体现在图中，应该是六个顶点都在同心圆中的六边形。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/021/2012110234.jpg" alt=""></p>
<p>在上图中，设计1、设计2属于良好的设计，他们对六项原则的遵守程度都在合理的范围内；设计3、设计4设计虽然有些不足，但也基本可以接受；设计5则严重不足，对各项原则都没有很好的遵守；而设计6则遵守过渡了，设计5和设计6都是迫切需要重构的设计。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.uml.org.cn/sjms/201211023.asp" target="_blank" rel="external">设计模式六大原则</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设计模式学习笔记-单例模式]]></title>
      <url>http://czhzero.com/2017/03/09/design-pattern-singleinstance/</url>
      <content type="html"><![CDATA[<p>单例模式是23种设计模式中最为简单的一种。通常情况下，单例模式实现有两类方式，饿汉式单例和懒汉式单例。</p>
<a id="more"></a>
<h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><blockquote>
<p>Ensure a class has only one instance, and provide a global point of access to it.<br>(确保某一个类只有实例，并向整个系统提供这是实例)</p>
</blockquote>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h2><ul>
<li>由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁的创建和销毁时，优势十分明显。</li>
<li>由于单例模式只生成一个实例，所以减少了重复的性能开销，如读取配置等。</li>
<li>单例模式可以避免对资源的多重占用，例如一个写文件动作，由于只有一个实例存在在内存中，避免对同一个资源文件进行写动作。</li>
<li>单例模式可以在系统设置全局的访问点，优化和共享资源访问。</li>
</ul>
<h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><ul>
<li>单例模式一般没有接口，扩展很困难，若要扩展，除了修改代码基本没有其他方途径。</li>
<li>单例模式对测试不利，在并行开发环境中，如果单例模式没有完成，是不能进行测试的，没有接口也不能使用mock的方式虚拟一个对象。</li>
</ul>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景:"></a>使用场景:</h2><ul>
<li>要求生成唯一序列号的环境</li>
<li>在整个项目中需要一个共享访问点或共享数据</li>
<li>创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源</li>
<li>需要定义大量的静态常量和静态方法的环境</li>
</ul>
<h2 id="常见实例"><a href="#常见实例" class="headerlink" title="常见实例:"></a>常见实例:</h2><ul>
<li>Android常见的ImageLoader图片加载库</li>
<li>Android系统的LayoutInflater类布局加载类</li>
</ul>
<hr>
<p>具体实现根据实际情况不同，分为以下几种。</p>
<ol>
<li>懒汉式单例(非线程安全)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">    if (instance == null) &#123;  </span><br><span class="line">        instance = new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种懒汉式是最通俗易懂的写法，一般非多线程环境下，可直接使用。</p>
<p>2.懒汉式单例（线程安全）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static synchronized Singleton getInstance() &#123;  </span><br><span class="line">    if (instance == null) &#123;  </span><br><span class="line">        instance = new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过synchronized关键字可以保证多线程模式下，内存中实例也会只有一个。但是大部分情况下，并不需要同步，影响效率。</p>
<p>3.饿汉式单例</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static Singleton instance = new Singleton();  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static Singleton getInstance() &#123;  </span><br><span class="line">    return instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过classloader,在类加载的时候，就会在内存中创建一个实例。不管你需不需要使用这个实例。若在某个逻辑条件下，并需要这个单例实例，就会造成内存的浪费。</p>
<p>4.静态内部类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;  </span><br><span class="line">    private static class SingletonHolder &#123;  </span><br><span class="line">    private static final Singleton INSTANCE = new Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    private Singleton ()&#123;&#125;  </span><br><span class="line">    public static final Singleton getInstance() &#123;  </span><br><span class="line">    return SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方式与第3种方式都是利用classloader进行控制。不同的是第四种方式在装载Singleton类时，并不会去实例化单例。只有在调用getInstance方法后，才会进行加载，实现了懒加载。</p>
<p>5.枚举式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Resource&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public enum SomeThing &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    private Resource instance;</span><br><span class="line">    SomeThing() &#123;</span><br><span class="line">        instance = new Resource();</span><br><span class="line">    &#125;</span><br><span class="line">    public Resource getInstance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的类Resource是我们要应用单例模式的资源，具体可以表现为网络连接，数据库连接，线程池等等。<br>获取资源的方式很简单，只要 SomeThing.INSTANCE.getInstance() 即可获得所要实例。</p>
<p>这种方式是Effective Java作者Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</p>
<p>总结：<br>个人而言，如果实例对象不是很大的话，一般用第三种就可以了。<br>如果考虑运行时内存大小，推荐第三种，也是比较常用的一种用法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android性能优化(五)－ 安装包大小优化]]></title>
      <url>http://czhzero.com/2017/03/08/performance-optimization-5/</url>
      <content type="html"><![CDATA[<p>应用安装包大小对应用的使用没有影响，但是如果安装包过大，用户每次更新下载的门槛就会越高，影响用户体验和使用意愿。</p>
<a id="more"></a>
<p>性能优化系列:</p>
<ul>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-1/" target="_blank" rel="external">Android性能优化(一)－UI优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-2/" target="_blank" rel="external">Android性能优化(二)－数据库优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-3/" target="_blank" rel="external">Android性能优化(三)－ 移动网络优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-4/" target="_blank" rel="external">Android性能优化(四)－ 代码优化</a></li>
<li><a href="">Android性能优化(五)－ 安装包大小优化</a></li>
<li><a href="">Android性能优化(六)－ 省电优化</a></li>
<li><a href="">Android性能优化(七)－ 内存优化</a></li>
<li><a href="">Android性能优化(八)－ 稳定性优化</a></li>
</ul>
<h2 id="应用安装包构成"><a href="#应用安装包构成" class="headerlink" title="应用安装包构成"></a>应用安装包构成</h2><h3 id="1-assets"><a href="#1-assets" class="headerlink" title="1.assets"></a>1.assets</h3><p>assets可以存放一些不需要编译的资源，如果配置文件，Webview本地资源，图片资源等等。代码中通过AssetManager进行资源的饮用。</p>
<h3 id="2-lib"><a href="#2-lib" class="headerlink" title="2.lib"></a>2.lib</h3><p>存放native文件，该目录会根据Cpu类型不同而分为不同的目录，从而加载不同的so库。通常分为这四种目录,ARM,ARM-v7a,ARM64-v8a,MIPS,X86等等。</p>
<h3 id="3-res"><a href="#3-res" class="headerlink" title="3.res"></a>3.res</h3><p>存放资源，这个目录的资源均会被映射到R.java中。</p>
<h3 id="4-META-INF"><a href="#4-META-INF" class="headerlink" title="4.META-INF"></a>4.META-INF</h3><p>保存应用的签名信息</p>
<h3 id="5-AndroidManifest-xml"><a href="#5-AndroidManifest-xml" class="headerlink" title="5.AndroidManifest.xml"></a>5.AndroidManifest.xml</h3><p>Android应用程序的配置文件。</p>
<h3 id="6-classes-dex"><a href="#6-classes-dex" class="headerlink" title="6.classes.dex"></a>6.classes.dex</h3><p>Java字节码class文件合并组合的文件。</p>
<h3 id="7-proguard-cfg"><a href="#7-proguard-cfg" class="headerlink" title="7.proguard.cfg"></a>7.proguard.cfg</h3><p>代码混淆配置文件</p>
<h3 id="8-resources-arsc"><a href="#8-resources-arsc" class="headerlink" title="8.resources.arsc"></a>8.resources.arsc</h3><p>记录资源文件和资源ID的映射关系。</p>
<blockquote>
<p>一般Apk大小中的大头是，classes.dex,lib和资源文件。</p>
</blockquote>
<h2 id="常用方案"><a href="#常用方案" class="headerlink" title="常用方案"></a>常用方案</h2><h3 id="1-代码混淆"><a href="#1-代码混淆" class="headerlink" title="1.代码混淆"></a>1.代码混淆</h3><p>按照代码混淆规则，对代码进行混淆，压缩和优化。</p>
<ul>
<li>proguard-rules.pro编辑</li>
<li>配置gradle文件，增加<code>minifyEnabled true</code>属性</li>
</ul>
<h3 id="2-资源优化"><a href="#2-资源优化" class="headerlink" title="2.资源优化"></a>2.资源优化</h3><h4 id="Android-Lint去冗余"><a href="#Android-Lint去冗余" class="headerlink" title="Android Lint去冗余"></a>Android Lint去冗余</h4><h4 id="资源文件最小化"><a href="#资源文件最小化" class="headerlink" title="资源文件最小化"></a>资源文件最小化</h4><ul>
<li>尽量使用一套图片</li>
<li>使用轻量级的第三方库</li>
<li>减少apk中预置图片，改为从服务端下载</li>
</ul>
<h4 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h4><ul>
<li>降低图片色彩位数</li>
<li>图片压缩</li>
</ul>
<h3 id="3-其他优化"><a href="#3-其他优化" class="headerlink" title="3.其他优化"></a>3.其他优化</h3><ul>
<li>避免使用重复的第三方库</li>
<li>插件化</li>
<li>使用WebP图片格式 </li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SurfaceView和View的区别]]></title>
      <url>http://czhzero.com/2017/03/07/surfaceview-view-diff/</url>
      <content type="html"><![CDATA[<p>Android的显示过程可以简单的概括为：Android应用程序把经过测量、布局、绘制后的surface缓存数据，通过SurfaceFlinger把数据渲染到显示屏幕上，通过Android但刷新机制来刷新数据。</p>
<a id="more"></a>
<h2 id="View简介"><a href="#View简介" class="headerlink" title="View简介"></a>View简介</h2><p>View一般在onDraw方法里面绘图，onDraw在UI主线程执行。onDraw默认只在View初始化的时候调用一遍，所以View不会自动刷新画面，一般要调用invalidate或者postInvalidate来重新执行。</p>
<p>onDraw里面的代码进行刷新画面。UI主线程一般用来渲染组件、处理组件与用户之间的交互事件，比如说按钮的点击事件、文本框的输入事件。</p>
<p>如果的画图任务相当繁重，那么onDraw方法里面的代码要执行好长一段时间，就可能会造成UI主线程阻塞。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/023/20160811221917915.png" alt=""></p>
<h2 id="SurfaceView简介"><a href="#SurfaceView简介" class="headerlink" title="SurfaceView简介"></a>SurfaceView简介</h2><p>Surfaceview是视图（view）的一个继承类，这个视图里内嵌了一个专门用于绘制的Surface。你可以控制这个这个Surface的格式和尺寸，Surfaceview控制这个Surface的绘制位置。</p>
<p>Surfaceview也可以在onDraw里面绘图，即直接在UI主线程绘图并渲染，因为Surfaceview是View的子类。我们可以考虑这样的方案：在后台线程执行繁重的绘图任务，把所有绘制的东西缓存起来；绘制完毕后，再回到UI线程，一次性把所绘制的东西渲染到屏幕上（本质：就是后台线程绘制，UI主线程渲染）</p>
<p>只使用View的onDraw方法是无法实现这种方案的，而Surfaceview可以实现这种方案。先看看Surfaceview的工作原理图：</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/023/20160811222116554" alt=""></p>
<h3 id="SurfaceHolder"><a href="#SurfaceHolder" class="headerlink" title="SurfaceHolder"></a>SurfaceHolder</h3><ol>
<li>Canvas lockCanvas():锁定整个SurfaceView对象，获取该Surface上的Canvas</li>
<li>Canvas lockCanvas(Rect dirty):锁定SurfaceView上Rect划分的区域，获取该Surface上的Canvas</li>
<li>unlockCanvasAndPost(canvas):释放绘图、提交所绘制的图形，需要注意，当调用SurfaceHolder上的unlockCanvasAndPost方法之后，该方法之前所绘制的图形还处于缓冲之中，下一次lockCanvas()方法锁定的区域可能会“遮挡”它。</li>
</ol>
<p>使用的SurfaceView的时候，一般情况下要对其进行创建，销毁，改变时的情况进行监视，这就要用到 SurfaceHolder.Callback。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class XxxView extends SurfaceView implements SurfaceHolder.Callback &#123; </span><br><span class="line"></span><br><span class="line">public void surfaceChanged(SurfaceHolder holder,int format,int width,int height)&#123;&#125; </span><br><span class="line">//看其名知其义，在surface的大小发生改变时激发 </span><br><span class="line">public void surfaceCreated(SurfaceHolder holder)&#123;&#125; </span><br><span class="line">//同上，在创建时激发，一般在这里调用画图的线程。 </span><br><span class="line">public void surfaceDestroyed(SurfaceHolder holder) &#123;&#125; </span><br><span class="line">//同上，销毁时激发，一般在这里将画图的线程停止、释放。 </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul>
<li>View缺乏双缓冲机制，SurfaceView有双缓冲</li>
<li>当程序需要更新View上的图像时，程序必须重绘View上显示的整张图片</li>
<li>SurfaceView是在一个新起的单独线程中可以重新绘制画面，而View必须在UI的主线程中更新画面</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[设置Activity退出动画无效问题的解决]]></title>
      <url>http://czhzero.com/2017/03/07/activity-exit-animation-invalid/</url>
      <content type="html"><![CDATA[<p>Activity系统默认的进入动画是从右侧进入到左侧停止，退出动画是从左到右移动直到完全退出界面。如果要修改Activity进入和退出动画有两种方式。</p>
<a id="more"></a>
<h2 id="第一种方式-overridePendingTransition方法"><a href="#第一种方式-overridePendingTransition方法" class="headerlink" title="第一种方式:overridePendingTransition方法"></a>第一种方式:overridePendingTransition方法</h2><ul>
<li>startActivity()方法之前调用overridePendingTransition方法。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">startActivity(intent);</span><br><span class="line">overridePendingTransition(R.anim.fade_in, R.anim.fade_out);</span><br></pre></td></tr></table></figure>
<ul>
<li>重写Activity的finish方法, 并调用overridePendingTransition方法。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void finish() &#123;</span><br><span class="line">    super.finish();</span><br><span class="line">    overridePendingTransition(R.anim.fade_in, R.anim.fade_out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第二种方式-设置Activity的theme属性"><a href="#第二种方式-设置Activity的theme属性" class="headerlink" title="第二种方式:设置Activity的theme属性"></a>第二种方式:设置Activity的theme属性</h2><p>在<code>values</code>文件夹的<code>styles.xml</code>中增加样式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;Anim_fade parent=&quot;android:Theme.Light.NoTitleBar.Fullscreen&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:windowAnimationStyle&quot;&gt;@style/fade&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;style name=&quot;fade&quot; parent=&quot;@android:style/Animation.Activity&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android:activityOpenEnterAnimation&quot;&gt;@anim/fade_in&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:activityOpenExitAnimation&quot;&gt;@anim/fade_out&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:activityCloseEnterAnimation&quot;&gt;@anim/fade_in&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:activityCloseExitAnimation&quot;&gt;@anim/fade_out&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>在AndroidManifest.xml文件中设置Activity的样式,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity</span><br><span class="line">    Android:name=&quot;.TestActivity&quot;</span><br><span class="line">    android:theme=&quot;@style/Anim_fade&quot; &gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>为了简洁通用，推荐使用第二种方式进行设置动画。使用第二种方式，有的机器虽然进入的动画是可用的，但是退出的动画无效，你必须使用第一种方式的重写finish方法实现退出动画。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HashMap vs. LinkedHashMap vs. TreeMap vs. HashTable 四种容器对比]]></title>
      <url>http://czhzero.com/2017/03/02/four-map-diff/</url>
      <content type="html"><![CDATA[<p>Java为数据结构中的映射定义了一个接口<code>java.util.Map</code>,它有四个实现类,分别是HashMap Hashtable LinkedHashMap 和TreeMap。</p>
<a id="more"></a>
<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>根据键的HashCode 值存储数据,根据键可以直接获取它的值，具有很快的访问速度。</p>
<p><img src="https://camo.githubusercontent.com/8565fd90daccb7f62375f2164a5eaf5b88b6e2b1/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f32303134303730313139313430333736343f77617465726d61726b2f322f746578742f6148523063446f764c324a736232637559334e6b626935755a585176626e4e665932396b5a513d3d2f666f6e742f3561364c354c32542f666f6e7473697a652f3430302f66696c6c2f49304a42516b46434d413d3d2f646973736f6c76652f37302f677261766974792f536f75746845617374" alt=""></p>
<ul>
<li>遍历时，取得数据的顺序是完全随机的</li>
<li>不支持线程的同步</li>
<li>最多只允许一条记录的键为Null</li>
<li>允许多条记录的值为Null</li>
<li>在插入、删除和定位元素，速度较快。</li>
</ul>
<p>更多内容请查看<a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/HashMap%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90.md" target="_blank" rel="external">HashMap源码剖析</a></p>
<h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><p>LinkedHashMap是HashMap的子类，与HashMap有着同样的存储结构，但它加入了一个双向链表的头结点，将所有put到LinkedHashmap的节点一一串成了一个双向循环链表，因此它保留了节点插入的顺序，可以使节点的输出顺序与输入顺序相同。</p>
<p>LinkedHashMap可以用来实现LRU算法。</p>
<p>LinkedHashMap同样是非线程安全的，只在单线程环境下使用。<br>在遍历的时候会比HashMap慢，不过有种情况例外，当HashMap容量很大，实际数据较少时，遍历起来可能会 比LinkedHashMap慢，因为LinkedHashMap的遍历速度只和实际数据有关，和容量无关。</p>
<p>更多内容请查看<a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/LinkedHashMap%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90.md" target="_blank" rel="external">LinkedHashMap源码剖析</a></p>
<h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>TreeMap实现SortMap接口，能够把它保存的记录根据键排序,默认是按键值的升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。</p>
<p>TreeMap取出来的是排序后的键值对。但如果您要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。</p>
<h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><p>HashMap和Hashtable都实现了Map接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步(synchronization)，以及速度。Hashtable的方法是同步的，而HashMap的方法不是。所以有人一般都建议如果是涉及到多线程同步时采用HashTable，没有涉及就采用HashMap。</p>
<p>更多内容请查看<a href="https://github.com/GeniusVJR/LearningNotes/blob/master/Part2/JavaSE/HashTable%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90.md" target="_blank" rel="external">HashTable源码剖析</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android后台进程保活策略汇总]]></title>
      <url>http://czhzero.com/2017/02/26/how-to-keep-service-alive/</url>
      <content type="html"><![CDATA[<p>后台常驻一直是Android开发者研究的课题，一方面是为了实现即时通信的长连接，一方面也是为了背地里做一些黑暗的事情。网上后台保活的方案也很多，但是有可执行效果的也不多，尤其是面对国内小米，魅族等深度定制的Android系统。本文也会持续更新，动态收集一些新的方案。</p>
<a id="more"></a>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>一般来说，后台进程回收分为三种情况，第三种是最霸道的，他们权限最高，后台进程被杀死后，连系统广播都无法让你监听。</p>
<ul>
<li>系统内存不够时的回收</li>
<li>360等安全软件的回收</li>
<li>厂商后台管理程序的回收</li>
</ul>
<p>Android系统进程状态分为五个等级，具体每种进程含义这边不细说了。</p>
<ul>
<li>前台进程</li>
<li>可见进程</li>
<li>服务进程</li>
<li>后台进程</li>
<li>空进程</li>
</ul>
<p>这五种状态的进程相对于系统来说的重要性从上至下排列，空进程容易被杀死，其次是后台进程，然后是服务进程甚至是可见进程，而前台进程一般则不会被轻易干掉。</p>
<p>Android进程有两个比较重要的概念，一个是Importance等级，一个是adj值。Importance等级与adj值在ActivityManagerService中被关联起来，相较于Importance等级而言adj值可以赋予我们更多的参考价值。adj值越小，则越不容易回收，这个值会随着进程的状态转换而变化。</p>
<p>我们可以通过adb shell命令实时查看这个adj值。</p>
<blockquote>
<p>adb shell</p>
<p>ps | grep &lt;关键字&gt;</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">USER     PID   PPID  VSIZE  RSS     WCHAN    PC         NAME</span><br><span class="line">root      1     0     812    668   ffffffff 00000000 S /init</span><br><span class="line">root      2     0     0      0     ffffffff 00000000 S kthreadd</span><br></pre></td></tr></table></figure>
<blockquote>
<p>adb shell</p>
<p>cat /proc/PID/oom_adj</p>
</blockquote>
<p>cat命令执行后，会得到一个adj整数数值。</p>
<h2 id="策略选择"><a href="#策略选择" class="headerlink" title="策略选择"></a>策略选择</h2><p>后台保活两个目标，一是轻易不让系统回收，二是杀死后可以重启。最好的方式当然系统白名单，让系统为你这个进程开个后门，这种方式不再讨论范围。</p>
<h3 id="1-Service的onStartCommand函数返回START-STICKY"><a href="#1-Service的onStartCommand函数返回START-STICKY" class="headerlink" title="1.Service的onStartCommand函数返回START_STICKY"></a>1.Service的onStartCommand函数返回START_STICKY</h3><p><code>START_STICKY</code>是官方提供的参数，意思是当service被内存回收了，系统会对service进行重启。面对360等内存回收，并没什么作用。</p>
<h3 id="2-在service-的onDestory里面重启服务"><a href="#2-在service-的onDestory里面重启服务" class="headerlink" title="2.在service 的onDestory里面重启服务"></a>2.在service 的onDestory里面重启服务</h3><p>onDestroy()方法只有在service正常停止的时候才会被调用，面对上述回收的第二与第三种方法没有效果。</p>
<h3 id="3-守护线程相互监听"><a href="#3-守护线程相互监听" class="headerlink" title="3.守护线程相互监听"></a>3.守护线程相互监听</h3><p>AB两个进程，A进程里面轮询检查B进程是否存活，没存活的话将其拉起，同样B进程里面轮询检查A进程是否存活，没存活的话也将其拉起，而我们的后台逻辑则随便放在某个进程里执行即可。</p>
<p>这种方法面对回收的时候，其实作用也不大，而且很消耗性能。另外，也有人提到过使用两个native进程监控，那种方法没试过。</p>
<h3 id="4-AlarmManager-or-JobScheduler循环触发"><a href="#4-AlarmManager-or-JobScheduler循环触发" class="headerlink" title="4.AlarmManager or JobScheduler循环触发"></a>4.AlarmManager or JobScheduler循环触发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class AlarmService extends Service &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">        initAlarm(this);</span><br><span class="line">        Log.d(&quot;czh&quot;, &quot;AlarmService onStartCommand&quot;);</span><br><span class="line">        return super.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initAlarm(Context context) &#123;</span><br><span class="line">        Intent intent = new Intent(context, AlarmReceiver.class);</span><br><span class="line">        intent.setAction(&quot;repeating&quot;);</span><br><span class="line">        PendingIntent sender = PendingIntent.getBroadcast(context, 0, intent, 0);</span><br><span class="line"></span><br><span class="line">        //开始时间</span><br><span class="line">        long firsTime = SystemClock.elapsedRealtime();</span><br><span class="line">        AlarmManager am = (AlarmManager) getSystemService(ALARM_SERVICE);</span><br><span class="line">        am.setRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP, firsTime, 5 * 1000, sender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-与系统service绑定"><a href="#5-与系统service绑定" class="headerlink" title="5.与系统service绑定"></a>5.与系统service绑定</h3><p><a href="http://blog.csdn.net/aigestudio/article/details/51348408" target="_blank" rel="external">论Android应用进程长存的可行性</a> 一文中，提到用NotificationListenerService代替普通service，从而达到保活的作用。 原理是没有问题，在小米4上亲测过后，发现并没什么用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)</span><br><span class="line">public class SimulateNotificationService extends NotificationListenerService &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onNotificationPosted(StatusBarNotification sbn) &#123;</span><br><span class="line">        super.onNotificationPosted(sbn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onNotificationRemoved(StatusBarNotification sbn) &#123;</span><br><span class="line">        super.onNotificationRemoved(sbn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;service android:name=&quot;.service.SimulateNotificationService&quot;</span><br><span class="line">        android:permission=&quot;android.permission.BIND_NOTIFICATION_LISTENER_SERVICE&quot;</span><br><span class="line">        android:process=&quot;:test5&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;intent-filter&gt;</span><br><span class="line">            &lt;action android:name=&quot;android.service.notification.NotificationListenerService&quot; /&gt;</span><br><span class="line">        &lt;/intent-filter&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/service&gt;</span><br></pre></td></tr></table></figure>
<h3 id="6-监听系统Receiver保活"><a href="#6-监听系统Receiver保活" class="headerlink" title="6.监听系统Receiver保活"></a>6.监听系统Receiver保活</h3><p>使用Receiver来检测目标进程是否存活不失为一个好方法，静态注册一系列广播，什么开机启动、网络状态变化、时区地区变化、充电状态变化等等等等，这听起来好像很6，而且在大部分手机中都是可行的方案，但是对于深度定制的ROM，是的，又是深度定制，你没有看错，而且代表性人物还是魅族、小米，这两个业界出了名的喜欢“深度定制”系统。<br>自从Android 3.1开始系统对我们的应用增加了一种叫做STOPPED的状态，什么叫STOPPED？就是安装了之后从未启动过的，大家可能经常在网上看到对开机广播的解释，说要想应用正确接收到开机广播那么就得先启动一下应用，这个说法的技术支持就来源于此，因为自Android 3.1后所有的系统广播都会在Intent添加一个叫做FLAG_EXCLUDE_STOPPED_PACKAGES的标识，说白了就是所有处于STOPPED状态的应用都不可以接收到系统广播。</p>
<h3 id="7-提高进程优先级-Notification提权"><a href="#7-提高进程优先级-Notification提权" class="headerlink" title="7.提高进程优先级, Notification提权"></a>7.提高进程优先级, Notification提权</h3><p>这种保活手段是应用范围最广泛。它是利用系统的漏洞来启动一个前台的Service进程，与普通的启动方式区别在于，它不会在系统通知栏处出现一个Notification，看起来就如同运行着一个后台Service进程一样。这样做带来的好处就是，用户无法察觉到你运行着一个前台进程（因为看不到Notification）,但你的进程优先级又是高于普通后台进程的。</p>
<p>这种方法面对第二种回收方式有效，但是面对小米之类的后台回收，还是无能为力。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public class NotificationService extends Service &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private final static int SERVICE_ID = 1001;</span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line"></span><br><span class="line">        if (Build.VERSION.SDK_INT &lt; 18) &#123;</span><br><span class="line">            startForeground(SERVICE_ID, new Notification());</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Intent innerIntent = new Intent(this, InnerService.class);</span><br><span class="line">            startService(innerIntent);</span><br><span class="line">            startForeground(SERVICE_ID, new Notification());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return super.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 给 API &gt;= 18</span><br><span class="line">     */</span><br><span class="line">    public static class InnerService extends Service &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">            startForeground(SERVICE_ID, new Notification());</span><br><span class="line">            stopForeground(true);</span><br><span class="line">            stopSelf();</span><br><span class="line">            return super.onStartCommand(intent, flags, startId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Nullable</span><br><span class="line">        @Override</span><br><span class="line">        public IBinder onBind(Intent intent) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-不同的app进程，用广播相互唤醒"><a href="#8-不同的app进程，用广播相互唤醒" class="headerlink" title="8.不同的app进程，用广播相互唤醒"></a>8.不同的app进程，用广播相互唤醒</h3><p>如果你手机安装了各种app,或者应用了各种第三方代sdk,即可互相唤醒。<br>假如你手机里装了支付宝、淘宝、天猫、UC等阿里系的app，那么你打开任意一个阿里系的app后，有可能就顺便把其他阿里系的app给唤醒了。</p>
<p>这个方法针对内存回收的三种方式均有效，只要有一个活着，其他的就会活下来。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前相对靠谱的方法就是6、7、8。第6种方法，要看手机，很多手机会屏蔽系统广播，第7种方法还是那句话，有条件就干。第8种方法在一定程度上保活，面对小米手机rom到系统回收还是没有办法的。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://blog.csdn.net/aigestudio/article/details/51348408" target="_blank" rel="external">论Android应用进程长存的可行性</a></li>
<li><a href="http://www.jianshu.com/p/63aafe3c12af" target="_blank" rel="external">关于 Android 进程保活，你所需要知道的一切</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用Android学习资源汇总(四) - 便捷开发工具]]></title>
      <url>http://czhzero.com/2017/02/24/android-study-resource-4/</url>
      <content type="html"><![CDATA[<p>常用Android学习资源汇总为Android技术开发相关的资源索引，以供学习查找之用。总共分为四个部分，本篇为第四篇便捷开发工具。</p>
<ul>
<li><a href="http://czhzero.com/2016/07/19/android-study-resource/">常用Android学习资源汇总(一)-优秀网站博客</a></li>
<li><a href="http://www.czhzero.com/2017/02/24/android-study-resource-2/" target="_blank" rel="external">常用Android学习资源汇总(二)-优秀开源框架</a></li>
<li><a href="http://www.czhzero.com/2017/02/24/android-study-resource-3/" target="_blank" rel="external">常用Android学习资源汇总(三)-高频技术专题</a></li>
<li><a href="http://www.czhzero.com/2017/02/24/android-study-resource-4/" target="_blank" rel="external">常用Android学习资源汇总(四)-便捷开发工具</a></li>
</ul>
<a id="more"></a>
<h2 id="开发资源"><a href="#开发资源" class="headerlink" title="开发资源"></a>开发资源</h2><ul>
<li><a href="http://www.androiddevtools.cn/" target="_blank" rel="external">Android Dev</a> —— android各种工具，资源，我不信你不知道</li>
<li><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">Android 开源项目分类汇总</a> —— 史上最全的Android开源项目汇总</li>
<li><a href="http://www.oschina.net/project/tag/11/devtools" target="_blank" rel="external">2702款 开发工具开源软件</a> —— 如题</li>
<li><a href="http://app.memect.com/doc/android.html" target="_blank" rel="external">Android 资源库列表</a> —— 一个超级棒的安卓资源库列表</li>
<li><a href="http://www.oschina.net/question/2285044_219206?fromerr=gEGePPMG" target="_blank" rel="external">最强开发资源平台大合集</a> —— 各种UI图标库、工具集</li>
<li><a href="http://www.materialpalette.com" target="_blank" rel="external">MD 调色板</a></li>
<li><a href="https://icomoon.io/app/#/select" target="_blank" rel="external">icon 图标</a> —— 各种icon图标</li>
<li><a href="http://www.flaticon.com" target="_blank" rel="external">图标下载库</a> —— 160,428 vector icons grouped in 2,409 packs</li>
<li><a href="https://github.com/l123456789jy/Lazy" target="_blank" rel="external">一些常用的开发工具类</a></li>
</ul>
<h2 id="性能检测工具"><a href="#性能检测工具" class="headerlink" title="性能检测工具"></a>性能检测工具</h2><p>TODO</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用Android学习资源汇总(三)-高频技术专题]]></title>
      <url>http://czhzero.com/2017/02/24/android-study-resource-3/</url>
      <content type="html"><![CDATA[<p>常用Android学习资源汇总为Android技术开发相关的资源索引，以供学习查找之用。总共分为四个部分，本篇为第三篇高频技术专题。</p>
<ul>
<li><a href="http://czhzero.com/2016/07/19/android-study-resource/">常用Android学习资源汇总(一)-优秀网站博客</a></li>
<li><a href="http://www.czhzero.com/2017/02/24/android-study-resource-2/" target="_blank" rel="external">常用Android学习资源汇总(二)-优秀开源框架</a></li>
<li><a href="http://www.czhzero.com/2017/02/24/android-study-resource-3/" target="_blank" rel="external">常用Android学习资源汇总(三)-高频技术专题</a></li>
<li><a href="http://www.czhzero.com/2017/02/24/android-study-resource-4/" target="_blank" rel="external">常用Android学习资源汇总(四)-便捷开发工具</a><a id="more"></a>
</li>
</ul>
<h3 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h3><ul>
<li><a href="http://www.cnblogs.com/starstone/p/4890409.html" target="_blank" rel="external">HTTP 必知必会</a></li>
<li><a href="https://realm.io/news/droidcon-jake-wharton-simple-http-retrofit-2/" target="_blank" rel="external">Retrofit 2 用法解析</a></li>
<li><a href="http://www.jianshu.com/p/aad5aacd79bf" target="_blank" rel="external">OkHttp3 源码分析</a></li>
<li><a href="http://blog.csdn.net/nugongahou110/article/details/46829605" target="_blank" rel="external">Volley 源码分析</a></li>
<li><a href="https://drakeet.me/retrofit-2-0-okhttp-3-0-config" target="_blank" rel="external">Retrofit 2.0 + OkHttp 3.0 配置</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/restful" target="_blank" rel="external">理解 RESTful架构</a></li>
<li><a href="http://blog.csdn.net/efan006/article/details/50543990" target="_blank" rel="external">Retrofit + RxJava实战日志</a></li>
<li><a href="http://www.jianshu.com/p/9c3b4ea108a7" target="_blank" rel="external">使用 Retrofit 和 Okhttp 实现网络缓存</a> —— 无网读缓存，有网根据过期时间重新请求</li>
<li><a href="http://www.jianshu.com/p/7e28c8216c7d" target="_blank" rel="external">RxJava 处理网络连接失败</a></li>
<li><a href="http://www.jianshu.com/p/584707554ed7" target="_blank" rel="external">Android 推送技术研究</a></li>
<li><a href="http://www.jianshu.com/p/77d418e7b5d6" target="_blank" rel="external">OkHttp, Retrofit, Volley 应该选择哪一个？</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-okhttp/" target="_blank" rel="external">OkHttp：Java 平台上的新一代 HTTP 客户端</a> —— 来自IBM的技术文章</li>
<li><a href="http://blog.csdn.net/qq_21430549/article/details/51212977" target="_blank" rel="external">Retrofit 文件上传下载</a></li>
<li><a href="http://blog.csdn.net/evan_man/article/details/51320408" target="_blank" rel="external">Retrofit 的使用与深入学习</a></li>
<li><a href="http://www.jianshu.com/p/93153b34310e" target="_blank" rel="external">Android Retrofit 2.0 使用-补充篇</a></li>
<li><a href="http://www.jianshu.com/p/90b1f20b123d" target="_blank" rel="external">Retrofit 笔记</a></li>
</ul>
<h3 id="视图绘制与事件分发"><a href="#视图绘制与事件分发" class="headerlink" title="视图绘制与事件分发"></a>视图绘制与事件分发</h3><ul>
<li><a href="http://blog.csdn.net/huangjijie123456/article/details/51365097c" target="_blank" rel="external">Activity是如何接收到touch事件的</a></li>
<li><a href="http://www.jianshu.com/p/e99b5e8bd67b" target="_blank" rel="external">图解 Android 事件分发机制</a></li>
<li><a href="http://www.jianshu.com/p/5a71014e7b1b" target="_blank" rel="external">Android View的绘制流程</a></li>
</ul>
<h3 id="RxJava相关"><a href="#RxJava相关" class="headerlink" title="RxJava相关"></a>RxJava相关</h3><ul>
<li><a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">Rxjava 详解</a> —— 抛物线出品经典Rxjava详解</li>
<li><a href="http://blog.csdn.net/lzyzsd/article/details/41833541" target="_blank" rel="external">深入浅出 Rxjava</a> —— rx教父大头鬼出品深入浅出rxjava</li>
<li><a href="https://github.com/mcxiaoke/RxDocs" target="_blank" rel="external">RxDocs - RxJava 文档中文版</a></li>
<li><a href="https://github.com/lzyzsd/Awesome-RxJava" target="_blank" rel="external">RxJava resources</a> —— rx教父大头鬼整理的Rxjava学习集合</li>
<li><a href="http://wangxinghe.me/blog/2016-03-27/rxjava-basis/" target="_blank" rel="external">RxJava 学习总结</a></li>
<li><a href="https://medium.com/@diolor/improving-ux-with-rxjava-4440a13b157f#.9mc2oeyzo" target="_blank" rel="external">Improving UX with RxJava</a></li>
<li><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/index.html" target="_blank" rel="external">ReactiveX 文档中文翻译</a></li>
<li><a href="https://github.com/richardradics/RxAndroidBootstrap" target="_blank" rel="external">RxJava + Dagger2 + LAMBDA 的一个 MVP demo</a></li>
<li><a href="http://mrfu.me/2016/01/10/RxWeekend/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">RxJava 的周末狂欢</a></li>
<li><a href="http://www.jianshu.com/p/c2c7c46e6b97" target="_blank" rel="external">使用 RxBinding 响应控件的异步事件</a></li>
<li><a href="http://www.jianshu.com/p/6d1ef9f43cdc" target="_blank" rel="external">详细解析 RxAndroid 的使用方式</a></li>
<li><a href="http://www.jianshu.com/p/f3f0eccbcd6f" target="_blank" rel="external">RxJava简洁封装之道</a></li>
</ul>
<h3 id="MVP-MVVM架构相关"><a href="#MVP-MVVM架构相关" class="headerlink" title="MVP/MVVM架构相关"></a>MVP/MVVM架构相关</h3><ul>
<li><a href="http://www.jianshu.com/p/1f21e1d375aa" target="_blank" rel="external">不容错过，最全的 Android 架构合集</a></li>
<li><a href="http://www.jianshu.com/p/0590f530c617" target="_blank" rel="external">Android MVP 详解</a></li>
<li><a href="http://www.judymax.com/archives/1141?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">Google官方 MVP 案例 todoAPP 解析</a></li>
<li><a href="http://www.jianshu.com/p/6872b699879d" target="_blank" rel="external">Android MVVM 框架</a></li>
<li><a href="http://www.jianshu.com/p/269c3f70ec1e" target="_blank" rel="external">Dagger2 详解</a></li>
<li><a href="http://www.jianshu.com/collection/b838b070d6de?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=collection&amp;utm_source=weibo" target="_blank" rel="external">Android Dagger2 系列</a></li>
<li><a href="http://www.jianshu.com/p/01d3c014b0b1" target="_blank" rel="external">Google官方 MVP + Dagger2 架构详解</a></li>
</ul>
<h3 id="插件化开发"><a href="#插件化开发" class="headerlink" title="插件化开发"></a>插件化开发</h3><ul>
<li><a href="http://www.androidblog.cn/index.php/Index/detail/id/16" target="_blank" rel="external">插件化开发专栏</a> —— 有关插件化的资料这里全都有</li>
<li><a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">DroidPlugin</a> —— 360手机助手插件机制</li>
<li><a href="https://github.com/limpoxe/Android-Plugin-Framework" target="_blank" rel="external">Android-Plugin-Framework</a></li>
<li><a href="https://github.com/wequick/Small" target="_blank" rel="external">Small</a> —— Small，做最轻巧的跨平台插件化框架</li>
<li><a href="https://github.com/singwhatiwanna/dynamic-load-apk" target="_blank" rel="external">dynamic-load-apk</a> —— Android 使用动态加载框架DL进行插件化开发</li>
<li><a href="https://github.com/CtripMobile/DynamicAPK" target="_blank" rel="external">DynamicAPK</a> —— 携程动态加载技术</li>
<li><a href="https://github.com/houkx/android-pluginmgr" target="_blank" rel="external">android-pluginmgr</a></li>
<li><a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">AndFix</a> —— 阿里动态加载</li>
</ul>
<h3 id="单元测试系列"><a href="#单元测试系列" class="headerlink" title="单元测试系列"></a>单元测试系列</h3><ul>
<li><a href="http://rexstjohn.com/unit-testing-with-android-studio/" target="_blank" rel="external">unit-testing-with-android-studio</a></li>
<li><a href="http://www.jianshu.com/p/9d988a2f8ff7" target="_blank" rel="external">Robolectric3.0 介绍</a></li>
<li><a href="http://www.jianshu.com/p/b2717dc245da" target="_blank" rel="external">Android 单元测试: 首先，从是什么开始</a></li>
<li><a href="http://www.jianshu.com/p/4b03123b4f81" target="_blank" rel="external">在 Android 中同时使用 unit test 和 instrument test 作为单元测试</a></li>
<li><a href="http://www.jianshu.com/p/fa76b126a7e7" target="_blank" rel="external">Android 单元测试——辅助工具介绍</a></li>
<li><a href="http://www.jianshu.com/p/00ab03f3d394" target="_blank" rel="external">Android 单元测试实践</a></li>
<li><a href="http://www.jianshu.com/p/cf446be43ae8" target="_blank" rel="external">解读 Android 官方 MVP 项目单元测试</a></li>
<li><a href="http://tech.meituan.com/Android_unit_test.html" target="_blank" rel="external">美团 Android 单元测试研究与实践</a></li>
</ul>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li><a href="http://www.stormzhang.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">Android 学习之路</a> —— stormzhang的Android学习之路</li>
<li><a href="https://github.com/tangqi92/Android-Tips" target="_blank" rel="external">Android-Tips</a> —— 作者收集了大量Android开发Tip</li>
<li><a href="https://github.com/ZhaoKaiQiang/AndroidDifficultAnalysis" target="_blank" rel="external">AndroidDifficultAnalysis</a> —— 安卓开发中遇到的重难点解析，也包括平常的读书笔记和知识点整理</li>
<li><a href="https://will_he.gitbooks.io/android/content/" target="_blank" rel="external">Android 知识整理 GitBook</a></li>
<li><a href="https://github.com/bboyfeiyu/android-tech-frontier/wiki" target="_blank" rel="external">Android wiki 周刊</a></li>
<li><a href="https://github.com/bboyfeiyu/Worth-Reading-the-Android-technical-articles" target="_blank" rel="external">值得阅读的 Android 技术文章</a> </li>
<li><a href="http://bxbxbai.github.io/2014/10/07/android-develop-resource/" target="_blank" rel="external">整理一些比较好的 Android 开发教程</a> —— 这些都是该作者在学习Android开发过程中觉得比较好的教程和博客</li>
<li><a href="http://zhuanlan.zhihu.com/kaede/20326073" target="_blank" rel="external">Android 应用性能调优的技术点</a></li>
<li><a href="https://segmentfault.com/a/1190000004063006" target="_blank" rel="external">Segmentfault 上回答较好的一些问题</a></li>
<li><a href="http://www.woshipm.com/ucd/243897.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">Android 界面设计视觉规范</a></li>
<li><a href="http://bugly.qq.com/bbs/forum.php?mod=forumdisplay&amp;fid=39" target="_blank" rel="external">腾讯 bugly 社区</a> —— 腾讯技术大牛写的博客文章</li>
<li><a href="http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p1/" target="_blank" rel="external">从零开始的 Android 新项目</a> —— 从架构搭建、到数据层之Retrofit与Realm</li>
<li><a href="http://www.cloudchou.com/android/post-788.html" target="_blank" rel="external">深入理解 Activity 启动流程</a> </li>
<li><a href="http://www.jianshu.com/p/f269bcda335f" target="_blank" rel="external">你需要知道的 Android 拍照适配方案</a></li>
<li><a href="http://www.jianshu.com/p/94e0f9ab3f1d" target="_blank" rel="external">Context 都没弄明白，还怎么做 Android 开发？</a></li>
<li><a href="http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=1022&amp;extra=page%3D1%26filter%3Dauthor%26orderby%3Ddateline" target="_blank" rel="external">Android 性能优化典范之多线程篇</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用Android学习资源汇总(二)-优秀开源框架]]></title>
      <url>http://czhzero.com/2017/02/24/android-study-resource-2/</url>
      <content type="html"><![CDATA[<p>常用Android学习资源汇总为Android技术开发相关的资源索引，以供学习查找之用。总共分为四个部分，本篇为第二篇优秀开源框架。</p>
<ul>
<li><a href="http://czhzero.com/2016/07/19/android-study-resource/">常用Android学习资源汇总(一)-优秀网站博客</a></li>
<li><a href="http://www.czhzero.com/2017/02/24/android-study-resource-2/" target="_blank" rel="external">常用Android学习资源汇总(二)-优秀开源框架</a></li>
<li><a href="http://www.czhzero.com/2017/02/24/android-study-resource-3/" target="_blank" rel="external">常用Android学习资源汇总(三)-高频技术专题</a></li>
<li><a href="http://www.czhzero.com/2017/02/24/android-study-resource-4/" target="_blank" rel="external">常用Android学习资源汇总(四)-便捷开发工具</a></li>
</ul>
<a id="more"></a>
<h2 id="图片加载框架"><a href="#图片加载框架" class="headerlink" title="图片加载框架"></a>图片加载框架</h2><ul>
<li><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">UniversalImageLoader</a> —— 老牌最火的图片加载库</li>
<li><a href="https://github.com/square/picasso" target="_blank" rel="external">Picasso</a> —— Picasso是Square公司开源的一个Android平台上的图片加载框架，简单易用，一句话搞定项目中的图片加载，好用到令人发指。</li>
<li><a href="https://github.com/bumptech/glide" target="_blank" rel="external">Glide</a> —— Glide 是 Google 一位员工的大作，他完全是基于 Picasso 的，沿袭了 Picasso 的简洁风格，但是在此做了大量优化与改进。</li>
<li><a href="https://github.com/facebook/fresco" target="_blank" rel="external">Fresco</a> —— Fresco 是 Facebook 出品</li>
</ul>
<h2 id="网络加载框架"><a href="#网络加载框架" class="headerlink" title="网络加载框架"></a>网络加载框架</h2><h2 id="数据库框架"><a href="#数据库框架" class="headerlink" title="数据库框架"></a>数据库框架</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java类初始化顺序]]></title>
      <url>http://czhzero.com/2017/02/24/java-init-sequence-sample/</url>
      <content type="html"><![CDATA[<p>Java程序在它运行之前，并非完全加载，其各个部分是在必需时才加载。Java类的初始化顺序，是先静态对象，而后是非静态对象。类加载器加载class文件时，初始化静态对象。new操作符时，初始化非静态对象。</p>
<p>在类的内部，变量定义的先后决定了初始化的顺序。即使变量定义散布于方法定义之间，它们仍旧会在任何方法(包括构造方法)被调用之前得到初始化。</p>
<a id="more"></a>
<hr>
<h3 id="1-无继承类初始化"><a href="#1-无继承类初始化" class="headerlink" title="1.无继承类初始化"></a>1.无继承类初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public static class Person &#123;</span><br><span class="line">		public Person(String str) &#123;</span><br><span class="line">			System.out.println(str);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public static class Test &#123;</span><br><span class="line">		</span><br><span class="line">		//静态成员变量 A</span><br><span class="line">		public static Person sPersonA = new Person(&quot;A 静态成员变量初始化&quot;);</span><br><span class="line">		</span><br><span class="line">		//静态初始化代码块 B</span><br><span class="line">		static &#123;</span><br><span class="line">			System.out.println(&quot;B 静态初始化块&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		//成员变量 C</span><br><span class="line">		public Person mPersonC = new Person(&quot;C 成员变量初始化&quot;);</span><br><span class="line">	</span><br><span class="line">		//初始化代码 D</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(&quot;D 初始化代码块&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		//构造函数 E</span><br><span class="line">		public Test() &#123;</span><br><span class="line">			System.out.println(&quot;E 构造函数&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		//静态成员变量 F</span><br><span class="line">		public static Person sPersonF = new Person(&quot;F 静态成员变量初始化&quot;);</span><br><span class="line">		</span><br><span class="line">		//静态初始化代码块 G</span><br><span class="line">		static &#123;</span><br><span class="line">			System.out.println(&quot;G 静态初始化块&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		//成员变量 H</span><br><span class="line">		public Person mPersonH = new Person(&quot;H 成员变量初始化&quot;);</span><br><span class="line">	</span><br><span class="line">		//初始化代码 I</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(&quot;I 初始化代码块&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Test test = new Test();</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A 静态成员变量初始化</span><br><span class="line">B 静态初始化块</span><br><span class="line">F 静态成员变量初始化</span><br><span class="line">G 静态初始化块</span><br><span class="line">C 成员变量初始化</span><br><span class="line">D 初始化代码块</span><br><span class="line">H 成员变量初始化</span><br><span class="line">I 初始化代码块</span><br><span class="line">E 构造函数</span><br></pre></td></tr></table></figure>
<p>由此可以得出以下结论：</p>
<blockquote>
<p><strong>初始化顺序: 静态变量/静态代码块 -&gt;  成员变量/代码块 -&gt; 构造函数</strong><br>其中，静态变量与静态代码块，成员变量与代码块的初始化顺序只取决于定义顺序。</p>
</blockquote>
<h3 id="2-子类初始化顺序"><a href="#2-子类初始化顺序" class="headerlink" title="2. 子类初始化顺序"></a>2. 子类初始化顺序</h3><p>创建一个TestSub类继承Test类，    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">public static class TestSub extends Test &#123;</span><br><span class="line">	</span><br><span class="line">	//静态成员变量 a</span><br><span class="line">	public static Person sPersonA = new Person(&quot;a 静态成员变量初始化&quot;);</span><br><span class="line">	</span><br><span class="line">	//静态初始化代码块 b</span><br><span class="line">	static &#123;</span><br><span class="line">		System.out.println(&quot;b 静态初始化块&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//成员变量 c</span><br><span class="line">	public Person mPersonC = new Person(&quot;c 成员变量初始化&quot;);</span><br><span class="line"></span><br><span class="line">	//初始化代码 d</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;d 初始化代码块&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//构造函数 e</span><br><span class="line">	public TestSub() &#123;</span><br><span class="line">		System.out.println(&quot;e 构造函数&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	//静态成员变量 f</span><br><span class="line">	public static Person sPersonF = new Person(&quot;f 静态成员变量初始化&quot;);</span><br><span class="line">	</span><br><span class="line">	//静态初始化代码块 g</span><br><span class="line">	static &#123;</span><br><span class="line">		System.out.println(&quot;g 静态初始化块&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//成员变量 h</span><br><span class="line">	public Person mPersonH = new Person(&quot;h 成员变量初始化&quot;);</span><br><span class="line"></span><br><span class="line">	//初始化代码 i</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(&quot;i 初始化代码块&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	//Test test = new Test();</span><br><span class="line">	TestSub sub = new TestSub();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">A 静态成员变量初始化</span><br><span class="line">B 静态初始化块</span><br><span class="line">F 静态成员变量初始化</span><br><span class="line">G 静态初始化块</span><br><span class="line">a 静态成员变量初始化</span><br><span class="line">b 静态初始化块</span><br><span class="line">f 静态成员变量初始化</span><br><span class="line">g 静态初始化块</span><br><span class="line">C 成员变量初始化</span><br><span class="line">D 初始化代码块</span><br><span class="line">H 成员变量初始化</span><br><span class="line">I 初始化代码块</span><br><span class="line">E 构造函数</span><br><span class="line">c 成员变量初始化</span><br><span class="line">d 初始化代码块</span><br><span class="line">h 成员变量初始化</span><br><span class="line">i 初始化代码块</span><br><span class="line">e 构造函数</span><br></pre></td></tr></table></figure>
<p>由此可以得出以下结论：</p>
<blockquote>
<p><strong>子类初始化顺序：</strong><br><strong>父类静态变量/父类静态方法块 -&gt; 子类静态变量/子类静态方法块 -&gt; 父类成员变量/方法块 -&gt; 父类构造函数 -&gt;  子类成员变量/方法块 -&gt; 子类构造函数</strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android性能优化(四)－ 代码优化]]></title>
      <url>http://czhzero.com/2017/02/07/performance-optimization-4/</url>
      <content type="html"><![CDATA[<p>主要介绍Java代码中性能优化方法，包括缓存、异步、延迟、数据存储等方式。</p>
<a id="more"></a>
<p>性能优化系列:</p>
<ul>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-1/" target="_blank" rel="external">Android性能优化(一)－UI优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-2/" target="_blank" rel="external">Android性能优化(一)－数据库优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-3/" target="_blank" rel="external">Android性能优化(三)－ 移动网络优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-4/" target="_blank" rel="external">Android性能优化(四)－ 代码优化</a></li>
</ul>
<h2 id="缓存优化"><a href="#缓存优化" class="headerlink" title="缓存优化"></a>缓存优化</h2><p>缓存主要包括对象缓存、IO缓存、网络缓存、DB缓存，对象缓存能减少内存的分配，IO缓存减少磁盘的读写次数，网络缓存减少网络传输，DB缓存较少Database的访问次数。<br>在内存、文件、数据库、网络的读写速度中，内存都是最优的，且速度数量级差别，所以尽量将需要频繁访问或访问一次消耗较大的数据存储在缓存中</p>
<p>Android常用缓存如下,</p>
<p>(1) 线程池<br>(2) 大文件/图片缓存<br>(3) 消息缓存(handler.obtainMessage)<br>(4) view缓存(ListView的contentView)<br>(5) 网络缓存(Http缓存)</p>
<p>数据库缓存http response，根据http头信息中的Cache-Control域确定缓存过期时间。</p>
<p>(6) 文件IO缓存</p>
<p>使用具有缓存策略的输入流，BufferedInputStream替代InputStream，BufferedReader替代Reader，BufferedReader替代BufferedInputStream.对文件、网络IO皆适用。</p>
<ul>
<li><p>数据存储优化</p>
<ul>
<li><p>数据类型选择</p>
<p>  字符串拼接用StringBuilder代替String，在非并发情况下用StringBuilder代替StringBuffer。如果你对字符串的长度有大致了解，如100字符左右，可以直接new StringBuilder(128)指定初始大小，减少空间不够时的再次分配。<br>  64位类型如long double的处理比32位如int慢<br>  使用SoftReference、WeakReference相对正常的强应用来说更有利于系统垃圾回收<br>  final类型存储在常量区中读取效率更高<br>  LocalBroadcastManager代替普通BroadcastReceiver，效率和安全性都更高</p>
</li>
<li><p>数据结构选择</p>
<p>  常见的数据结构选择如：<br>  ArrayList和LinkedList的选择，ArrayList根据index取值更快，LinkedList更占内存、随机插入删除更快速、扩容效率更高。一般推荐ArrayList。<br>  ArrayList、HashMap、LinkedHashMap、HashSet的选择，hash系列数据结构查询速度更优，ArrayList存储有序元素，HashMap为键值对数据结构，LinkedHashMap可以记住加入次序的hashMap，HashSet不允许重复元素。<br>  HashMap、WeakHashMap选择，WeakHashMap中元素可在适当时候被系统垃圾回收器自动回收，所以适合在内存紧张型中使用。<br>  Collections.synchronizedMap和ConcurrentHashMap的选择，ConcurrentHashMap为细分锁，锁粒度更小，并发性能更优。Collections.synchronizedMap为对象锁，自己添加函数进行锁控制更方便。</p>
<p>  Android也提供了一些性能更优的数据类型，如SparseArray、SparseBooleanArray、SparseIntArray、Pair。<br>  Sparse系列的数据结构是为key为int情况的特殊处理，采用二分查找及简单的数组存储，加上不需要泛型转换的开销，相对Map来说性能更优。不过我不太明白为啥默认的容量大小是10，是做过数据统计吗，还是说现在的内存优化不需要考虑这些东西，写16会死吗，还是建议大家根据自己可能的容量设置初始值。</p>
</li>
</ul>
</li>
</ul>
<h2 id="异步，利用多线程提高TPS"><a href="#异步，利用多线程提高TPS" class="headerlink" title="异步，利用多线程提高TPS"></a>异步，利用多线程提高TPS</h2><p>充分利用多核Cpu优势，利用线程解决密集型计算、IO、网络等操作。<br>关于多线程可参考：Java线程池<br>在Android应用程序中由于系统ANR的限制，将可能造成主线程超时操作放入另外的工作线程中。在工作线程中可以通过handler和主线程交互。</p>
<h2 id="提前或延迟操作，错开时间段提高TPS"><a href="#提前或延迟操作，错开时间段提高TPS" class="headerlink" title="提前或延迟操作，错开时间段提高TPS"></a>提前或延迟操作，错开时间段提高TPS</h2><p>(1) 延迟操作<br>不在Activity、Service、BroadcastReceiver的生命周期等对响应时间敏感函数中执行耗时操作，可适当delay。<br>Java中延迟操作可使用ScheduledExecutorService，不推荐使用Timer.schedule;<br>Android中除了支持ScheduledExecutorService之外，还有一些delay操作，如<br>handler.postDelayed，handler.postAtTime，handler.sendMessageDelayed，View.postDelayed，AlarmManager定时等。</p>
<p>(2) 提前操作<br>对于第一次调用较耗时操作，可统一放到初始化中，将耗时提前。如得到壁纸wallpaperManager.getDrawable();</p>
<h2 id="其他方面"><a href="#其他方面" class="headerlink" title="其他方面"></a>其他方面</h2><ul>
<li>用位操作代替乘除法</li>
<li>合理利用浮点数，浮点数比整形慢两倍</li>
<li><p>不要重复初始化变量，默认情况下，调用类的构造函数时，Java会把变量初始化成确定的值：所有的对象被设置成null，整数变量（byte、short、int、long）设置成0，float和double设置成0.0，逻辑值设置成false。所有尽量不要重复初始化变量。</p>
</li>
<li><p>尽量使用局部变量，调用方法时传递的参数以及在调用中创建的临时变量都保存在栈（stack）中，速度较快，并且随所在线程的死亡而自动销毁。其他变量，如静态变量、实例变量等，都在堆（heap）中创建，速度较慢，垃圾回收是的耗能会导致APP出现卡顿现象。</p>
</li>
<li><p>尽量指定类的final修饰符。带有final修饰符的类是不可派生的。另外，如果指定一个类为final，则该类所有的方法都是final。Java编译器会寻找机会内联（inline）所有的final方法。此举能够使性能平均提高50%。</p>
</li>
<li><p>私有内部类要访问外部类的field或方法时，其成员变量不要用private，因为在编译时会生成setter/getter影响性能。可以把外部类的field或者方法声明为包访问权限。</p>
</li>
<li><p>如果方法用不到成员变量，可以把方法申明为static，性能会提高到15%到20%。</p>
</li>
<li><p>异常对性能不利。抛出异常首先要创建一个新的对象。Throwable接口的构造函数调用名为fillnStackTrace()的本地(Native)方法，fillnStackTrace()方法检查堆栈，收集调用跟踪信息。只要有异常被抛出，VM就必须调整调用堆栈，因为在处理过程中创建了一个新的对象。异常只能用于错误处理，不应该用来控制程序流程。</p>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://www.trinea.cn/android/java-android-performance/" target="_blank" rel="external">性能优化之Java(Android)代码优化</a></li>
<li><a href="http://blog.csdn.net/wtyvhreal/article/details/44172125" target="_blank" rel="external">Android性能优化 浅析</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android性能优化(三)－ 移动网络优化]]></title>
      <url>http://czhzero.com/2017/02/07/performance-optimization-3/</url>
      <content type="html"><![CDATA[<p>本篇文章介绍了移动端开发基本的网络优化方式，包括连接服务器策略，获取数据策略等等。</p>
<a id="more"></a>
<p>性能优化系列:</p>
<ul>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-1/" target="_blank" rel="external">Android性能优化(一)－UI优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-2/" target="_blank" rel="external">Android性能优化(一)－数据库优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-3/" target="_blank" rel="external">Android性能优化(三)－ 移动网络优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-4/" target="_blank" rel="external">Android性能优化(四)－ 代码优化</a></li>
</ul>
<h2 id="连接服务器优化"><a href="#连接服务器优化" class="headerlink" title="连接服务器优化"></a>连接服务器优化</h2><ul>
<li>IP直连</li>
</ul>
<p>不用域名，用IP直接连接，省去DNS解析时间。一般为了安全，这个ip会设置成动态Ip列表。</p>
<ul>
<li>服务器合理部署</li>
</ul>
<p>服务器多运营商多地部署，一般至少含三大运营商、南中北三地部署。</p>
<p>配合上面说到的动态 IP 列表，支持优先级，每次根据地域、网络类型等选择最优的服务器 IP 进行连接。</p>
<h2 id="获取数据优化"><a href="#获取数据优化" class="headerlink" title="获取数据优化"></a>获取数据优化</h2><ul>
<li>连接复用</li>
</ul>
<p>节省连接建立时间，如开启 keep-alive。</p>
<p>Http 1.1 默认启动了 keep-alive。对于 Android 来说默认情况下 HttpURLConnection 和 HttpClient 都开启了 keep-alive。只是 2.2 之前 HttpURLConnection 存在影响连接池的 Bug，具体可见：<a href="http://www.trinea.cn/android/android-http-api-compare/" target="_blank" rel="external">Android HttpURLConnection 及 HttpClient 选择</a></p>
<ul>
<li>请求合并</li>
</ul>
<p>即将多个请求合并为一个进行请求，比较常见的就是网页中的 CSS Image Sprites。 如果某个页面内请求过多，也可以考虑做一定的请求合并。</p>
<p>具体业务的网络请求，能够合并的也尽量合并。</p>
<ul>
<li>压缩数据</li>
</ul>
<p>(1) 对于 POST 请求，Body 可以做 Gzip 压缩，如日志。<a href="http://www.cnblogs.com/tinyclear/p/6109792.html" target="_blank" rel="external">GZIP压缩与解压</a>。</p>
<p>(2) 对请求头进行压缩<br>这个 Http 1.1 不支持，SPDY 及 Http 2.0 支持。 Http 1.1 可以通过服务端对前一个请求的请求头进行缓存，后面相同请求头用 md5 之类的 id 来表示即可。</p>
<ul>
<li>CDN 缓存静态资源</li>
</ul>
<p>缓存常见的图片、JS、CSS 等静态资源。</p>
<ul>
<li>减小每次返回数据的大小</li>
</ul>
<p>(1) 压缩<br>一般 API 数据使用 Gzip 压缩，下图是之前测试的 Gzip 压缩前后对比图。 </p>
<p>(2) 精简数据格式</p>
<p>如 JSON 代替 XML，WebP 代替其他图片格式。</p>
<p>(3) 对于不同的设备不同网络返回不同的内容 如不同分辨率图片大小。</p>
<p>(4) 增量更新</p>
<p>需要数据更新时，可考虑增量更新。如常见的服务端进行 bsdiff，客户端进行 bspatch。</p>
<p>(5) 大文件下载<br>支持断点续传，并缓存 Http Resonse 的 ETag 标识，下次请求时带上，从而确定是否数据改变过，未改变则直接返回 304。</p>
<ul>
<li>数据缓存</li>
</ul>
<p>Http缓存获取到的数据，在一定的有效时间内再次请求可以直接从缓存读取数据。</p>
<h2 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h2><ul>
<li><p>预取<br>包括预连接、预取数据。</p>
</li>
<li><p>分优先级、延迟部分请求<br>将不重要的请求延迟，这样既可以削峰减少并发、又可以和后面类似的请求做合并。</p>
</li>
<li><p>多连接<br>对于较大文件，如大图片、文件下载可考虑多连接。 需要控制请求的最大并发量，毕竟移动端网络受限。</p>
</li>
<li><p>wifi传输</p>
</li>
</ul>
<p>wifi比蜂窝数据，包括2G(GPRS)、3G更省电)尽量在Wi-Fi下传输数据。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android性能优化(二)－ 数据库性能优化]]></title>
      <url>http://czhzero.com/2017/02/07/performance-optimization-2/</url>
      <content type="html"><![CDATA[<p>本文为性能优化的第二篇——数据库性能优化，主要包括索引，事务，异步线程等几个方面。</p>
<a id="more"></a>
<p>性能优化系列:</p>
<ul>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-1/" target="_blank" rel="external">Android性能优化(一)－UI优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-2/" target="_blank" rel="external">Android性能优化(一)－数据库优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-3/" target="_blank" rel="external">Android性能优化(三)－ 移动网络优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-4/" target="_blank" rel="external">Android性能优化(四)－ 代码优化</a></li>
</ul>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>简单的说，索引就像书本的目录，目录可以快速找到所在页数，数据库中索引可以帮助快速找到数据，而不用全表扫描，合适的索引可以大大提高数据库查询的效率。</p>
<p>优点是加快了数据库点检索速度，但是缺点也很明显，索引但创建和维护存在消耗，索引会占用物理空间，且随着数据量的增加而增加。在对数据库进行增删改时需要维护索引，所以会对增删改的性能存在影响。</p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>使用事务的两大好处是原子提交和更优性能。</p>
<p>Sqlite默认会为每个插入、更新操作创建一个事务，并且在每次插入、更新后立即提交。<br>这样如果连续插入100次数据实际是创建事务-&gt;执行语句-&gt;提交这个过程被重复执行了100次。如果我们显示的创建事务-&gt;执行100条语句-&gt;提交会使得这个创建事务和提交这个过程只做一次，通过这种一次性事务可以使得性能大幅提升。尤其当数据库位于sd卡时，时间上能节省两个数量级左右。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void insertWithOneTransaction() &#123;</span><br><span class="line">    SQLiteDatabase db = sqliteOpenHelper.getWritableDatabase();</span><br><span class="line">    // Begins a transaction</span><br><span class="line">    db.beginTransaction();</span><br><span class="line">    try &#123;</span><br><span class="line">        // your sqls</span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            db.insert(yourTableName, null, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // marks the current transaction as successful</span><br><span class="line">        db.setTransactionSuccessful();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        // process it</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        // end a transaction</span><br><span class="line">        db.endTransaction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="异步线程"><a href="#异步线程" class="headerlink" title="异步线程"></a>异步线程</h2><p>Android中数据不多时表查询可能耗时不多，不会导致anr，不过大于100ms时同样会让用户感觉到延时和卡顿，可以放在线程中运行，但sqlite在并发方面存在局限，多线程控制较麻烦，这时候可使用单线程池，在任务中执行db操作，通过handler返回结果和ui线程交互，既不会影响UI线程，同时也能防止并发带来的异常。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line">singleThreadExecutor.execute(new Runnable() &#123;</span><br><span class="line"> </span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		// db operetions, u can use handler to send message after</span><br><span class="line">		db.insert(yourTableName, null, value);</span><br><span class="line">		handler.sendEmptyMessage(xx);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h2><ul>
<li><p>有些能用文件操作的，尽量使用文件操作，文件操作的速度比数据库的操作要快10倍左右。</p>
</li>
<li><p>Cursor的使用，管理好cursor，不要每次打开关闭cursor，因为打开关闭cursor非常耗时。Cursor.require用于刷cursor。同时由于SQLiteDatabase对象较为耗费资源，所以我们在使用完SQLiteDatabase对象之后，必须立即关闭它，避免它继续占用资源，否则我们继续程序可能会导致OOM或者其他异常。</p>
</li>
<li><p>查询时返回更少的结果集及更少的字段。</p>
</li>
<li><p>少用cursor.getColumnIndex(可以在建表的时候用static变量记住某列的index，直接调用相应index而不是每次查询。)</p>
</li>
<li><p>优化sql语句字符串等，语句的拼接使用StringBuilder代替String。</p>
</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://www.trinea.cn/android/database-performance/" target="_blank" rel="external">性能优化之数据库优化</a></li>
<li><a href="http://blog.csdn.net/wtyvhreal/article/details/44172125" target="_blank" rel="external">Android性能优化 浅析</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android性能优化(一)－UI优化]]></title>
      <url>http://czhzero.com/2017/02/07/performance-optimization-1/</url>
      <content type="html"><![CDATA[<p>本文为Android性能优化的第一篇——UI优化，主要介绍使用抽象布局标签(include, viewstub, merge)、去除不必要的嵌套和View节点、减少不必要的infalte及其他Layout方面可调优点，顺带提及布局调优相关工具。</p>
<a id="more"></a>
<p>性能优化系列:</p>
<ul>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-1/" target="_blank" rel="external">Android性能优化(一)－UI优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-2/" target="_blank" rel="external">Android性能优化(一)－数据库优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-3/" target="_blank" rel="external">Android性能优化(三)－ 移动网络优化</a></li>
<li><a href="http://www.czhzero.com/2017/02/07/performance-optimization-4/" target="_blank" rel="external">Android性能优化(四)－ 代码优化</a></li>
</ul>
<h2 id="性能问题指标"><a href="#性能问题指标" class="headerlink" title="性能问题指标"></a>性能问题指标</h2><ul>
<li>响应时间</li>
</ul>
<p>指从用户操作开始到系统给用户以正确反馈的时间。一般包括逻辑处理时间,网络传输时间,展现时间。对于非网络类应用不包括网络传输时间。展现时间即网页或App界面渲染时间。响应时间是用户对性能最直接的感受。</p>
<ul>
<li>TPS(Transaction Per Second)</li>
</ul>
<p>TPS为每秒处理的事务数，是系统吞吐量的指标，在搜索系统中也用QPS(Query Per Second)衡量。TPS一般与响应时间反相关。通常所说的性能问题就是指响应时间过长、系统吞吐量过低。</p>
<ul>
<li>系统内存占用</li>
</ul>
<p>每个Android应用程序都执行在自己的虚拟机中，那了解Java的一定明白，每个虚拟机必定会有堆内存阈值限制（值得一提的是这个阈值一般都由厂商依据硬件配置及设备特性自己设定，没有统一标准，可以为64M，也可以为128M等；它的配置是在Android的属性系统的/system/build.prop中配置dalvik.vm.heapsize=128m即可，若存在dalvik.vm.heapstartsize则表示初始申请大小），也即一个应用进程同时存在的对象必须小于阈值规定的内存大小才可以正常运行。</p>
<p>接着我们运行的App在自己的虚拟机中内存管理基本就是遵循Java的内存管理机制了，系统在特定的情况下主动进行垃圾回收。但是要注意的一点就是在Android系统中执行垃圾回收（GC）操作时所有线程（包含UI线程）都必须暂停，等垃圾回收操作完成之后其他线程才能继续运行。</p>
<ul>
<li>耗电量</li>
</ul>
<p>在移动设备开发中耗电量是一个非常重要的指标，如果用户一旦发现我们的应用非常耗电，不好意思，他们大多会选择卸载来解决此类问题，所以耗电量是一个十分重要的问题。其实我们一款应用耗电量最大的部分不是UI绘制显示等，常见耗电量最大原因基本都是因为网络数据交互、GPS定位、大量内存性能问题、冗余的后台线程和Service等造成。</p>
<h2 id="UI优化"><a href="#UI优化" class="headerlink" title="UI优化"></a>UI优化</h2><h3 id="1-抽象布局标签"><a href="#1-抽象布局标签" class="headerlink" title="1.抽象布局标签"></a>1.抽象布局标签</h3><ul>
<li><code>&lt;include&gt;</code>标签</li>
</ul>
<p>include标签常用于将布局中的公共部分提取出来供其他layout共用，以实现布局模块化，这在布局编写方便提供了大大的便利。<br>下面以在一个布局main.xml中用include引入另一个布局foot.xml为例。main.mxl代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/tv_text&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:layout_marginBottom=&quot;@dimen/dp_80&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;include layout=&quot;@layout/foot.xml&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>
<p>其中include引入的foot.xml为公用的页面底部，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot; &gt;</span><br><span class="line"> </span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;@dimen/dp_40&quot;</span><br><span class="line">        android:layout_above=&quot;@+id/text&quot;/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/text&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;@dimen/dp_40&quot;</span><br><span class="line">        android:layout_alignParentBottom=&quot;true&quot;</span><br><span class="line">        android:text=&quot;@string/app_name&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>
<p><include>标签唯一需要的属性是layout属性，指定需要包含的布局文件。可以定义android:id和android:layout_*属性来覆盖被引入布局根节点的对应属性值。注意重新定义android:id后，子布局的顶结点i就变化了。</include></p>
<ul>
<li><code>&lt;viewstub&gt;</code>标签 </li>
</ul>
<p>viewstub标签同include标签一样可以用来引入一个外部布局，不同的是，viewstub引入的布局默认不会扩张，即既不会占用显示也不会占用位置，从而在解析layout时节省cpu和内存。<br>viewstub常用来引入那些默认不会显示，只在特殊情况下显示的布局，如进度布局、网络失败显示的刷新布局、信息出错出现的提示布局等。<br>下面以在一个布局main.xml中加入网络错误时的提示页面network_error.xml为例。main.mxl代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot; &gt;</span><br><span class="line"> </span><br><span class="line">	……</span><br><span class="line">    &lt;ViewStub</span><br><span class="line">        android:id=&quot;@+id/network_error_layout&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        android:layout=&quot;@layout/network_error&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>
<p>其中network_error.xml为只有在网络错误时才需要显示的布局，默认不会被解析，示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot; &gt;</span><br><span class="line"> </span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/network_setting&quot;</span><br><span class="line">        android:layout_width=&quot;@dimen/dp_160&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_centerHorizontal=&quot;true&quot;</span><br><span class="line">        android:text=&quot;@string/network_setting&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/network_refresh&quot;</span><br><span class="line">        android:layout_width=&quot;@dimen/dp_160&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_below=&quot;@+id/network_setting&quot;</span><br><span class="line">        android:layout_centerHorizontal=&quot;true&quot;</span><br><span class="line">        android:layout_marginTop=&quot;@dimen/dp_10&quot;</span><br><span class="line">        android:text=&quot;@string/network_refresh&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>
<p>在java中通过(ViewStub)findViewById(id)找到ViewStub，通过stub.inflate()展开ViewStub，然后得到子View，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private View networkErrorView;</span><br><span class="line"> </span><br><span class="line">private void showNetError() &#123;</span><br><span class="line">	// not repeated infalte</span><br><span class="line">	if (networkErrorView != null) &#123;</span><br><span class="line">		networkErrorView.setVisibility(View.VISIBLE);</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	ViewStub stub = (ViewStub)findViewById(R.id.network_error_layout);</span><br><span class="line">	networkErrorView = stub.inflate();</span><br><span class="line">	Button networkSetting = (Button)networkErrorView.findViewById(R.id.network_setting);</span><br><span class="line">	Button refresh = (Button)findViewById(R.id.network_refresh);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">private void showNormal() &#123;</span><br><span class="line">	if (networkErrorView != null) &#123;</span><br><span class="line">		networkErrorView.setVisibility(View.GONE);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面showNetError()中展开了ViewStub，同时我们对networkErrorView进行了保存，这样下次不用继续inflate。这就是后面第三部分提到的减少不必要的infalte。<br>viewstub标签大部分属性同include标签类似。</p>
<p>viewstub标签大部分属性同include标签类似。</p>
<p>上面展开ViewStub部分代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ViewStub stub = (ViewStub)findViewById(R.id.network_error_layout);</span><br><span class="line">networkErrorView = stub.inflate();</span><br></pre></td></tr></table></figure>
<p>也可以写成下面的形式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">View viewStub = findViewById(R.id.network_error_layout);</span><br><span class="line">viewStub.setVisibility(View.VISIBLE);   // ViewStub被展开后的布局所替换</span><br><span class="line">networkErrorView =  findViewById(R.id.network_error_layout); // 获取展开后的布局</span><br></pre></td></tr></table></figure>
<p>效果一致，只是不用显示的转换为ViewStub。通过viewstub的原理我们可以知道将一个view设置为GONE不会被解析，从而提高layout解析速度，而VISIBLE和INVISIBLE这两个可见性属性会被正常解析。</p>
<ul>
<li><code>&lt;merge&gt;</code>标签</li>
</ul>
<p>在使用了include后可能导致布局嵌套过多，多余不必要的layout节点，从而导致解析变慢，不必要的节点和嵌套可通过hierarchy viewer(下面布局调优工具中有具体介绍)或设置-&gt;开发者选项-&gt;显示布局边界查看。</p>
<p>merge标签可用于两种典型情况：</p>
<p>a.布局顶结点是FrameLayout且不需要设置background或padding等属性，可以用merge代替，因为Activity内容试图的parent view就是个FrameLayout，所以可以用merge消除只剩一个。</p>
<p>b.某布局作为子布局被其他布局include时，使用merge当作该布局的顶节点，这样在被引入时顶结点会自动被忽略，而将其子节点全部合并到主布局中。</p>
<h3 id="2-去除不必要的嵌套和View节点"><a href="#2-去除不必要的嵌套和View节点" class="headerlink" title="2.去除不必要的嵌套和View节点"></a>2.去除不必要的嵌套和View节点</h3><p>(1) 首次不需要使用的节点设置为GONE或使用viewstub</p>
<p>(2) 使用RelativeLayout代替LinearLayout大约在Android4.0之前，新建工程的默认main.xml中顶节点是LinearLayout，而在之后已经改为RelativeLayout，因为RelativeLayout性能更优，且可以简单实现LinearLayout嵌套才能实现的布局。</p>
<h3 id="3-减少不必要的infalte"><a href="#3-减少不必要的infalte" class="headerlink" title="3.减少不必要的infalte"></a>3.减少不必要的infalte</h3><p>(1) 对于inflate的布局可以直接缓存，用全部变量代替局部变量，避免下次需再次inflate<br>如上面ViewStub示例中的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (networkErrorView != null) &#123;</span><br><span class="line">	networkErrorView.setVisibility(View.VISIBLE);</span><br><span class="line">	return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2) ListView提供了item缓存，adapter getView的标准写法，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public View getView(int position, View convertView, ViewGroup parent) &#123;</span><br><span class="line">	ViewHolder holder;</span><br><span class="line">	if (convertView == null) &#123;</span><br><span class="line">		convertView = inflater.inflate(R.layout.list_item, null);</span><br><span class="line">		holder = new ViewHolder();</span><br><span class="line">		……</span><br><span class="line">		convertView.setTag(holder);</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		holder = (ViewHolder)convertView.getTag();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * ViewHolder</span><br><span class="line"> * </span><br><span class="line"> * @author trinea@trinea.cn 2013-08-01</span><br><span class="line"> */</span><br><span class="line">private static class ViewHolder &#123;</span><br><span class="line"> </span><br><span class="line">	ImageView appIcon;</span><br><span class="line">	TextView  appName;</span><br><span class="line">	TextView  appInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-其他建议"><a href="#4-其他建议" class="headerlink" title="4.其他建议"></a>4.其他建议</h3><p>(1) 用SurfaceView或TextureView代替普通View<br>SurfaceView或TextureView可以通过将绘图操作移动到另一个单独线程上提高性能。<br>普通View的绘制过程都是在主线程(UI线程)中完成，如果某些绘图操作影响性能就不好优化了，这时我们可以考虑使用SurfaceView和TextureView，他们的绘图操作发生在UI线程之外的另一个线程上。<br>因为SurfaceView在常规视图系统之外，所以无法像常规试图一样移动、缩放或旋转一个SurfaceView。TextureView是Android4.0引入的，除了与SurfaceView一样在单独线程绘制外，还可以像常规视图一样被改变。</p>
<p>(2) 使用RenderJavascript<br>RenderScript是Adnroid3.0引进的用来在Android上写高性能代码的一种语言，语法给予C语言的C99标准，他的结构是独立的，所以不需要为不同的CPU或者GPU定制代码代码。</p>
<p>(3) 使用OpenGL绘图<br>Android支持使用OpenGL API的高性能绘图，这是Android可用的最高级的绘图机制，在游戏类对性能要求较高的应用中得到广泛使用。<br>Android 4.3最大的改变，就是支持OpenGL ES 3.0。相比2.0，3.0有更多的缓冲区对象、增加了新的着色语言、增加多纹理支持等等，将为Android游戏带来更出色的视觉体验。</p>
<p>(4)尽量为所有分辨率创建资源<br>减少不必要的硬件缩放，这会降低UI的绘制速度。</p>
<p>(5)尽量减少不必要的背景设置，图片尽量压缩处理显示，尽量避免频繁内存抖动等问题出现。</p>
<p>(6)尽量避免在draw、measure、layout中做过于耗时及耗内存操作，尤其是draw方法中，尽量减少draw、measure、layout等执行次数。</p>
<p>(7)将Activity中的window的背景图设置为空，默认的背景不为空getWindow().setBackgroundDrawable(null)。</p>
<p>(8)View中设置缓存属性.setDrawingCache为true。</p>
<h3 id="5-布局调优工具"><a href="#5-布局调优工具" class="headerlink" title="5.布局调优工具"></a>5.布局调优工具</h3><ul>
<li>Hierarchy viewer</li>
<li>Android Lint</li>
<li>使用GPU过度绘制分析UI性能</li>
<li>使用GPU呈现模式图及FPS</li>
<li>使用Memory监测及GC打印与Allocation Tracker进行UI卡顿分析</li>
<li>使用Traceview和dmtracedump进行分析优化</li>
<li>使用Systrace进行分析优化</li>
<li>通过Android SDK中tools目录下的layoutopt命令</li>
</ul>
<p>详细内容具体参考<a href="http://blog.csdn.net/christopher_411524/article/details/50582740" target="_blank" rel="external">Android性能优化总结</a></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://blog.csdn.net/christopher_411524/article/details/50582740" target="_blank" rel="external">Android性能优化总结</a></li>
<li><a href="http://www.trinea.cn/android/layout-performance/" target="_blank" rel="external">性能优化之布局优化</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vim常用快捷键总结]]></title>
      <url>http://czhzero.com/2017/01/17/vim-key-shortcut/</url>
      <content type="html"><![CDATA[<p>vi命令是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。</p>
<a id="more"></a>
<h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><p>Vim编辑器共有两种工作模式，一个是插入模式，一个是命令模式。</p>
<ul>
<li>插入模式</li>
</ul>
<p>用来编写文本内容。在命令模式下, 按<code>字母i键</code>即可进入到插入模式。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/020/insertmodel.png" alt=""></p>
<ul>
<li>命令模式</li>
</ul>
<p>是用来编辑文本，如上下翻页等，复制粘贴，跳转到指定行等操作。在插入模式下，按<code>Esc键</code>，再按<code>冒号:键</code>即可进入命令模式。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/020/commandmodel.png" alt=""></p>
<p>当前编辑的顶部或者底部会显示vim处于何种模式下。如：mode：COMMAND!</p>
<blockquote>
<p>所有命令都必须在英文输入法下面输入<br>命令对大小写敏感</p>
</blockquote>
<h2 id="打开-保存-退出"><a href="#打开-保存-退出" class="headerlink" title="打开/保存/退出"></a>打开/保存/退出</h2><ul>
<li>进入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//filename，若已经存在则打开已存在的文件，不存在则新建一个文件</span><br><span class="line">//默认开始进入的模式是命令模式</span><br><span class="line">$ vi filename</span><br></pre></td></tr></table></figure>
<ul>
<li>保存/退出</li>
</ul>
<p>进入命令模式，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">:wq              保存修改并退出</span><br><span class="line">ZZ               快捷键，保存修改并退出(前面没有冒号)</span><br><span class="line">:q!              不保存退出</span><br><span class="line">:wq!             强行保存退出，(文件所属者科忽略文件的制度属性)</span><br><span class="line">:w               保存不退出</span><br><span class="line">:wqa             保存所有文件</span><br><span class="line">:w new_filename  另存为指定文件</span><br></pre></td></tr></table></figure>
<h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><ul>
<li>插入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a                     在光标后附加文本</span><br><span class="line">A                     在本行行末附加文本</span><br><span class="line">i                     在光标前插入文本</span><br><span class="line">I                     在本行开始插入文本</span><br><span class="line">o (字母)               在光标下插入新行</span><br><span class="line">O (字母)               在光标上插入新行</span><br></pre></td></tr></table></figure>
<ul>
<li>剪切复制粘贴</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yy、Y                         复制当前行</span><br><span class="line">nyy，nY                       复制当前行一下n行(包括当前行)</span><br><span class="line">p、P                          粘贴在当前光标所在行下或行上</span><br><span class="line">ddp                          交换当前行和其下一行</span><br><span class="line">dd                           剪切当前行</span><br><span class="line">ndd                          剪切当前行一下n行(包括当前行)</span><br><span class="line">:1,10d                       将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。</span><br><span class="line">:1, 10 m 20                  将第1-10行移动到第20行之后。</span><br></pre></td></tr></table></figure>
<ul>
<li>删除</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x                     删除后面的字符 </span><br><span class="line">X                     删除前一个字符  删除3个字符就是3x  </span><br><span class="line">dd                    删除一行   </span><br><span class="line">D                     删除到行尾 </span><br><span class="line">dw                    删除一个单词（光标后部分）  　　　　</span><br><span class="line">d4w                   删除4个单词　　　　</span><br><span class="line">d$                    删除当前光标到行尾　　　　</span><br><span class="line">d^                    删除当前光标至行首</span><br><span class="line">J                     删除换行符，使下一行并上来。     </span><br><span class="line">nJ                    连接后面的n行</span><br></pre></td></tr></table></figure>
<ul>
<li>撤销</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">u                         取消上一步操作(最多连续取消500次)</span><br><span class="line">Ctrl+r                    恢复上一步被撤销的操作</span><br><span class="line">U                         撤销当前一行的操作</span><br><span class="line">:e!                       返回上次保存后的状态</span><br></pre></td></tr></table></figure>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">h、方向左键              左移一个字符</span><br><span class="line">j、 方向下键             下移一行</span><br><span class="line">k、方向上键              上移一行</span><br><span class="line">l、 方向右键             右移一个字符</span><br><span class="line">$                       移至行尾</span><br><span class="line">0                       移至行首</span><br><span class="line">^(尖角号)                移至行首</span><br><span class="line"></span><br><span class="line">H                       移至屏幕上端</span><br><span class="line">M                       移至屏幕中央</span><br><span class="line">L                       移至屏幕下端</span><br><span class="line">(                        (左小括号)移动到上一个句子首</span><br><span class="line">)                        (右小括号)移动到下一个句子首</span><br><span class="line">&#123;                        (左大括号)移动到上一个段落首</span><br><span class="line">&#125;                        (右大括号)移动到下一个段落首</span><br><span class="line"></span><br><span class="line">&apos;&apos;                       (连续输入法两个单引号)光标跳转到上次停靠处</span><br><span class="line">W                        移动到下一个单词的首位置</span><br><span class="line">w                        将光标右移一个单词的首位置。光标停留在下一个单词的首位置</span><br><span class="line">e                        移动到单词末尾。</span><br><span class="line">E                        和小写用法一样，只是以空格字符作为字的分隔符</span><br><span class="line">b                        移动到单词的头部</span><br><span class="line">B                        和小写用法一样，只是以空格字符作为字的分隔符</span><br><span class="line"></span><br><span class="line">//w W e E b B 都可以与n结合使用, n为数量单位， 如nw nW ne nE nb nB</span><br><span class="line"></span><br><span class="line">:set nu                      设置行号为显示</span><br><span class="line">:set nonu                    设置行号为隐藏</span><br><span class="line">:set nu!                     设置行号为显示/隐藏</span><br><span class="line">gg                           光标移动到第一行</span><br><span class="line">G                            光标移动到最后一行</span><br><span class="line">nG                           光标跳转到指定行    </span><br><span class="line">:n                           光标跳转到指定行</span><br><span class="line"></span><br><span class="line">Ctrl + e                 向下滚动一行</span><br><span class="line">Ctrl + y                 向上滚动一行</span><br><span class="line">Ctrl + d                 向下滚动半屏</span><br><span class="line">Ctrl + u                 向上滚动半屏</span><br><span class="line">Ctrl + f                 向下滚动一屏</span><br><span class="line">Ctrl + b                 向上滚动一屏</span><br><span class="line"></span><br><span class="line">zz:将当前行滚动于屏幕中间，方便查看上下文  zt置顶，zb置尾</span><br></pre></td></tr></table></figure>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//在command模式下，通过按  f 或者 F   快速定位内容。(不需要输入冒号)</span><br><span class="line"></span><br><span class="line">f                            向后查找</span><br><span class="line">F                            向前查找</span><br><span class="line"></span><br><span class="line">//可以结合数字来进行多次查找，如按下  3fq   ,就会放下查找第三个q</span><br><span class="line">//如果不加数字，如fq,就会向后查找第一个q</span><br><span class="line"></span><br><span class="line">*                            向后查找, 查找与光标下的词组相同的词组。</span><br><span class="line">#                            向前查找, 查找与光标下的词组相同的词组。</span><br><span class="line"></span><br><span class="line">//举例：假设光标停留在第一个if处</span><br><span class="line">//if  we are god   if you are human</span><br><span class="line">//我们在command模式下，输入  *  ，光标就会跳到“if you are human”的那个if上去</span><br><span class="line"></span><br><span class="line">//查找string，回车后，按n键可以跳到下一个，N上一个，</span><br><span class="line">//?另外按/键后，按上下键可以找到以前查找的记录，同样的 ：也有记录</span><br><span class="line"></span><br><span class="line">/string  </span><br><span class="line">   </span><br><span class="line">//同上，默认向上查找</span><br><span class="line">    </span><br><span class="line">?string  </span><br><span class="line"></span><br><span class="line">:set ignorecase          大小写无关</span><br><span class="line"></span><br><span class="line">:set noignorecase        大小写敏感</span><br><span class="line"></span><br><span class="line">:set hlsearch            高亮显示查找结果</span><br><span class="line"></span><br><span class="line">:set nohlsearch          取消高亮</span><br><span class="line"></span><br><span class="line">:nohlsearch              去掉当前显示的高亮（一次性）</span><br></pre></td></tr></table></figure>
<h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r                         (小写)替换光标所在处一个字符</span><br><span class="line">R                         (大写)开始替换,直到按ESC键退出替换,</span><br><span class="line">cc                        (小写)取代光标所在整行</span><br><span class="line">S                         (大写)与ss(小写)效果相同</span><br><span class="line">C                         (大写)取代到行尾,包括光标处字符</span><br><span class="line">c0                        (小写,数字0)取代到行首,不包括光标处字符</span><br><span class="line">c^                        (小写)与c0(小写,数字0)效果相同</span><br></pre></td></tr></table></figure>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://www.dabu.info/vim-shortcut-key-operation.html" target="_blank" rel="external">我个人精心收集的必须熟悉的vim快捷键操作</a></li>
<li><a href="http://www.cnblogs.com/tianyajuanke/archive/2012/04/25/2470002.html" target="_blank" rel="external">vim 常用快捷键</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入理解Java虚拟机学习笔记(一) - 运行时数据区域]]></title>
      <url>http://czhzero.com/2017/01/15/jvm-learning-1/</url>
      <content type="html"><![CDATA[<p>Java运行时数据区域(JVM RuntimeArea)其实就是指Java虚拟机在运行期间，其对Java虚拟机内存空间的划分和分配。Java虚拟机管理的内存包括几个运行时数据内存：方法区、虚拟机栈、本地方法栈、堆、程序计数器，其中方法区和堆是由线程共享的数据区，其他几个是线程隔离的数据区。</p>
<a id="more"></a>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/017/20160819150110871.png" alt=""></p>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器(PC寄存器)是一块较小的内存，他可以看做是当前线程所执行的行号指示器。字节码解释器工作的时候就是通过改变这个计数器的值来选取下一条需要执行的字节码的指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器则为空。</p>
<ul>
<li>每条线程都需要一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，生命周期与线程相同，我们称这类内存区域为<strong>线程私有</strong>的内存</li>
<li>唯一一个在Java虚拟机规范中没有规定任何OutOfMemotyError情况的区域</li>
</ul>
<h2 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h2><p>虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧用于储存局部变量表、操作数栈、动态链接、方法出口等信息。每个方法从调用直至完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p>
<p>栈内存就是虚拟机栈，或者说是虚拟机栈中局部变量表的部分</p>
<p>局部变量表存放了编辑期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（refrence）类型和returnAddress类型（指向了一条字节码指令的地址）</p>
<p>其中64位长度的long和double类型的数据会占用两个局部变量空间，其余的数据类型只占用1个。</p>
<p>Java虚拟机规范对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常。如果虚拟机扩展时无法申请到足够的内存，就会跑出OutOfMemoryError异常</p>
<ul>
<li>每个线程创建的同时都会创建Java虚拟机栈，生命周期与线程相同，<strong>线程私有</strong></li>
<li>内存分配高效，并且当线程运行完毕后，这些内存将被自动回收。</li>
</ul>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法栈和虚拟机栈发挥的作用是非常类似的，他们的区别是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务</p>
<p>本地方法栈区域也会抛出StackOverflowError和OutOfMemoryErroy异常</p>
<h2 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h2><p>堆是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动的时候创建，此内存区域的唯一目的是存放对象实例，几乎所有的对象实例都在这里分配内存。所有的对象实例和数组都在堆上分配</p>
<p>Java堆是垃圾收集器管理的主要区域。Java堆细分为新生代和老年代</p>
<p>不管怎样，划分的目的都是为了更好的回收内存，或者更快地分配内存</p>
<p>Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。如果在堆中没有完成实例分配，并且堆也无法在扩展时将会抛出OutOfMemoryError异常</p>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区它用于储存已被虚拟机加载的类信息（包括类的名称、方法信息、字段信息）、常量、静态变量、即时编译器编译后的代码等数据</p>
<p>除了Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载</p>
<p>当方法区无法满足内存分配需求时，将抛出OutOfMemoryErroy异常。</p>
<ul>
<li><p>方法区域全局共享</p>
</li>
<li><p>由于使用反射机制的原因，虚拟机很难推测哪个类信息不再使用，因此这块区域的回收很难！另外，对这块区域主要是针对常量池回收，值得注意的是JDK1.7已经把常量池转移到堆里面了。</p>
</li>
</ul>
<h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>它是方法区的一部分。Class文件中除了有关的版本、字段、方法、接口等描述信息外、还有一项信息是常量池，用于存放编辑期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p>
<p>Java语言并不要求常量一定只有编辑期才能产生，也就是可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是<a href="http://blog.csdn.net/seu_calvin/article/details/52291082" target="_blank" rel="external">String类的intern()方法</a>。</p>
<p>当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java多线程(一) - 多线程的入门和使用]]></title>
      <url>http://czhzero.com/2017/01/15/java-multi-thread-1/</url>
      <content type="html"><![CDATA[<p>多线程可以减轻系统性能方面的瓶颈，提高CPU的处理器的效率，在多线程中，通过优先级管理，可以使重要的程序优先操作，提高了任务管理的灵活性；另一方面，在多CPU系统中，可以把不同的线程在不同的CPU中执行，真正做到同时处理多任务。</p>
<a id="more"></a>
<p>先明确几个基本的概念:</p>
<ul>
<li>进程</li>
</ul>
<p>运行中的应用程序称为进程，拥有系统资源（cpu、内存）</p>
<ul>
<li>线程</li>
</ul>
<p>进程中的一段代码，一个进程中可以有多段代码。本身不拥有资源（共享所在进程的资源）。</p>
<p>线程主要特点是，</p>
<p>①、不能以一个文件名的方式独立存在在磁盘中。</p>
<p>②、不能单独执行，只有在进程启动后才可启动。</p>
<p>③、线程可以共享进程相同的内存（代码与数据）。</p>
<p>线程的主要用途是，</p>
<p>①、利用它可以完成重复性的工作（如实现动画、声音等的播放）。</p>
<p>②、从事一次性较费时的初始化工作（如网络连接、声音数据文件的加载）。</p>
<p>③、并发执行的运行效果（一个进程多个线程）以实现更复杂的功能。</p>
<ul>
<li>多进程</li>
</ul>
<p>在操作系统中能同时运行多个任务(程序)</p>
<ul>
<li>多线程</li>
</ul>
<p>指的是这个程序（一个进程）运行时产生了不止一个线程，有多个功能流同时执行。</p>
<ul>
<li>并行</li>
</ul>
<p>多个cpu实例或者多台机器同时执行一段处理逻辑，是真正的同时。</p>
<ul>
<li>并发</li>
</ul>
<p>通过cpu调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时。并发往往在场景中有公用的资源，那么针对这个公用的资源往往产生瓶颈，我们会用TPS或者QPS来反应这个系统的处理能力。</p>
<ul>
<li>线程安全</li>
</ul>
<p>经常用来描绘一段代码。指在并发的情况之下，该代码经过多线程使用，线程的调度顺序不影响任何结果。这个时候使用多线程，我们只需要关注系统的内存，cpu是不是够用即可。反过来，线程不安全就意味着线程的调度顺序会影响最终结果。</p>
<ul>
<li>同步</li>
</ul>
<p>Java中的同步指的是通过人为的控制和调度，保证共享资源的多线程访问成为线程安全，来保证结果的准确。如上面的代码简单加入@synchronized关键字。在保证结果准确的同时，提高性能，才是优秀的程序。线程安全的优先级高于性能。</p>
<h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p>关于Java中线程的生命周期，首先看一下下面这张较为经典的图：</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/019/232002051747387.jpg" alt=""></p>
<h3 id="状态（New）"><a href="#状态（New）" class="headerlink" title="状态（New）"></a>状态（New）</h3><p>当线程对象对创建后，即进入了新建状态，如：Thread t = new MyThread()。</p>
<h3 id="就绪状态（Runnable）"><a href="#就绪状态（Runnable）" class="headerlink" title="就绪状态（Runnable）"></a>就绪状态（Runnable）</h3><p>当调用线程对象的start()方法（t.start();），线程即进入就绪状态。处于就绪状态的线程，只是说明此线程已经做好了准备，随时等待CPU调度执行，并不是说执行了t.start()此线程立即就会执行。</p>
<h3 id="运行状态（Running）"><a href="#运行状态（Running）" class="headerlink" title="运行状态（Running）"></a>运行状态（Running）</h3><p>当CPU开始调度处于就绪状态的线程时，此时线程才得以真正执行，即进入到运行状态。注：就绪状态是进入到运行状态的唯一入口，也就是说，线程要想进入运行状态执行，首先必须处于就绪状态中。</p>
<h3 id="阻塞状态（Blocked）"><a href="#阻塞状态（Blocked）" class="headerlink" title="阻塞状态（Blocked）"></a>阻塞状态（Blocked）</h3><p>处于运行状态中的线程由于某种原因，暂时放弃对CPU的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才 有机会再次被CPU调用以进入到运行状态。根据阻塞产生的原因不同，阻塞状态又可以分为三种：</p>
<ul>
<li>等待阻塞</li>
</ul>
<p>运行状态中的线程执行wait()方法，使本线程进入到等待阻塞状态；</p>
<ul>
<li>同步阻塞 </li>
</ul>
<p>线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态；</p>
<ul>
<li>其他阻塞 </li>
</ul>
<p>通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。</p>
<h3 id="死亡状态（Dead）"><a href="#死亡状态（Dead）" class="headerlink" title="死亡状态（Dead）"></a>死亡状态（Dead）</h3><p>线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</p>
<h3 id="线程状态转换"><a href="#线程状态转换" class="headerlink" title="线程状态转换"></a>线程状态转换</h3><p>就绪状态转换为运行状态：当此线程得到处理器资源；</p>
<p>运行状态转换为就绪状态：当此线程主动调用yield()方法或在运行过程中失去处理器资源。</p>
<p>运行状态转换为死亡状态：当此线程线程执行体执行完毕或发生了异常。</p>
<p>此处需要特别注意的是：当调用线程的yield()方法时，线程从运行状态转换为就绪状态，但接下来CPU调度就绪状态中的哪个线程具有一定的随机性，因此，可能会出现A线程调用了yield()方法后，接下来CPU仍然调度了A线程的情况。</p>
<p>由于实际的业务需要，常常会遇到需要在特定时机终止某一线程的运行，使其进入到死亡状态。目前最通用的做法是设置一boolean型的变量，当条件满足时，使线程执行体快速执行完毕。</p>
<h2 id="基本线程类"><a href="#基本线程类" class="headerlink" title="基本线程类"></a>基本线程类</h2><p>基本线程类指的是Thread类，Runnable接口，Callable接口，其中Thread类实现了Runnable接口。</p>
<h3 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class MyThread extends Thread &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">     	//线程执行体</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ThreadTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">		Thread myThread1 = new MyThread();</span><br><span class="line">		//调用start()方法使得线程进入就绪状态,并不一定立即执行                                                                		myThread1.start();                             </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>关于中断</strong></p>
<p>它并不像stop方法那样会中断一个正在运行的线程。线程会不时地检测中断标识位，以判断线程是否应该被中断（中断标识值是否为true）。终端只会影响到wait状态、sleep状态和join状态。被打断的线程会抛出InterruptedException。<br>Thread.interrupted()检查当前线程是否发生中断，返回boolean<br>synchronized在获锁的过程中是不能被中断的。</p>
<p>中断是一个状态！interrupt()方法只是将这个状态置为true而已。所以说正常运行的程序不去检测状态，就不会终止，而wait等阻塞方法会去检查并抛出异常。如果在正常运行的程序中添加while(!Thread.interrupted()) ，则同样可以在中断后离开代码体</p>
<h3 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable"></a>Runnable</h3><p>实现Runnable接口，并重写该接口的run()方法，该run()方法同样是线程执行体，创建Runnable实现类的实例，并以此实例作为Thread类的target来创建Thread对象，该Thread对象才是真正的线程对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class MyRunnable implements Runnable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">		//线程执行体</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ThreadTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    	// 创建一个Runnable实现类的对象</span><br><span class="line"> 		Runnable myRunnable = new MyRunnable();</span><br><span class="line"> 		// 将myRunnable作为Thread target创建新的线程                 		Thread thread1 = new Thread(myRunnable); </span><br><span class="line"> 		// 调用start()方法使得线程进入就绪状态</span><br><span class="line">       thread1.start(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Thread类本身也是实现了Runnable接口。若Thread类和Runnable类均实现了run方法，start之后，会优先执行Runnable里面的run方法，而不会走Thread里面的run方法。</p>
<p>我们看一下Thread类中对Runnable接口中run()方法的实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">    if (target != null) &#123;</span><br><span class="line">        target.run(); //target即是传入Thread的Runnable对象</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在程序开发中只要是多线程肯定永远以实现Runnable接口为主，因为实现Runnable接口相比继承Thread类有如下好处：</p>
<ul>
<li>避免点继承的局限，一个类可以继承多个接口。</li>
<li>适合于资源的共享</li>
</ul>
<p>以卖票程序为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public static class MyThread extends Thread &#123;</span><br><span class="line">        private int ticket = 10;</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                if (ticket &gt; 0) &#123;</span><br><span class="line">                    System.out.println(&quot;卖票：ticket&quot; + this.ticket--);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    System.out.println(&quot;票卖完了&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class MyRunnable implements Runnable &#123;</span><br><span class="line">        private int ticket = 10;</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                if (ticket &gt; 0) &#123;</span><br><span class="line">                    System.out.println(&quot;卖票：ticket&quot; + this.ticket--);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    System.out.println(&quot;票卖完了&quot;);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line"></span><br><span class="line">        MyThread mt1=new MyThread();</span><br><span class="line">        MyThread mt2=new MyThread();</span><br><span class="line">        MyThread mt3=new MyThread();</span><br><span class="line">        mt1.start();//每个线程都各卖了10张，共卖了30张票</span><br><span class="line">        mt2.start();//但实际只有10张票，每个线程都卖自己的票</span><br><span class="line">        mt3.start();//没有达到资源共享</span><br><span class="line"></span><br><span class="line">        MyRunnable mr=new MyRunnable();</span><br><span class="line">        new Thread(mr).start(); //三个线程共享了10张票</span><br><span class="line">        new Thread(mr).start();</span><br><span class="line">        new Thread(mr).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h3><p>使用Callable和Future接口创建线程。具体是创建Callable接口的实现类，并实现clall()方法。并使用FutureTask类来包装Callable实现类的对象，且以此FutureTask对象作为Thread对象的target来创建线程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public static class MyCallable implements Callable&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">        private int i = 0;</span><br><span class="line"></span><br><span class="line">        // 与run()方法不同的是，call()方法具有返回值</span><br><span class="line">        @Override</span><br><span class="line">        public Integer call() &#123;</span><br><span class="line">            int sum = 0;</span><br><span class="line">            for (; i &lt; 100; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + &quot; &quot; + i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            return sum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        // 创建MyCallable对象</span><br><span class="line">        Callable&lt;Integer&gt; myCallable = new MyCallable();</span><br><span class="line">        //使用FutureTask来包装MyCallable对象</span><br><span class="line">        FutureTask&lt;Integer&gt; ft = new FutureTask&lt;&gt;(myCallable);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot; &quot; + i);</span><br><span class="line">            if (i == 30) &#123;</span><br><span class="line">                Thread thread = new Thread(ft);   //FutureTask对象作为Thread对象的target创建新的线程</span><br><span class="line">                thread.start();                   //线程进入到就绪状态</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;主线程for循环执行完毕..&quot;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            int sum = ft.get();            //取得新创建的新线程中的call()方法返回的结果</span><br><span class="line">            System.out.println(&quot;sum = &quot; + sum);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>首先，我们发现，在实现Callable接口中，此时不再是run()方法了，而是call()方法，此call()方法作为线程执行体，同时还具有返回值！在创建新的线程时，是通过FutureTask来包装MyCallable对象，同时作为了Thread对象的target。那么看下FutureTask类的定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class FutureTask&lt;V&gt; implements RunnableFuture&lt;V&gt; &#123;</span><br><span class="line">     </span><br><span class="line">     //....</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">public interface RunnableFuture&lt;V&gt; extends Runnable, Future&lt;V&gt; &#123;</span><br><span class="line">     </span><br><span class="line">     void run();</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>于是，我们发现FutureTask类实际上是同时实现了Runnable和Future接口，由此才使得其具有Future和Runnable双重特性。通过Runnable特性，可以作为Thread对象的target，而Future特性，使得其可以取得新创建线程中的call()方法的返回值。</p>
<p>执行下此程序，我们发现sum = 4950永远都是最后输出的。而“主线程for循环执行完毕..”则很可能是在子线程循环中间输出。由CPU的线程调度机制，我们知道，“主线程for循环执行完毕..”的输出时机是没有任何问题的，那么为什么sum =4950会永远最后输出呢？</p>
<p>原因在于通过ft.get()方法获取子线程call()方法的返回值时，当子线程此方法还未执行完毕，ft.get()方法会一直阻塞，直到call()方法执行完毕才能取到返回值。</p>
<p>future模式：并发模式的一种，可以有两种形式，即无阻塞和阻塞，分别是isDone和get。其中Future对象用来存放该线程的返回值以及状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService e = Executors.newFixedThreadPool(3);</span><br><span class="line"> //submit方法有多重参数版本，及支持callable也能够支持runnable接口类型.</span><br><span class="line">Future future = e.submit(new myCallable());</span><br><span class="line">future.isDone() //return true,false 无阻塞</span><br><span class="line">future.get() // return 返回值，阻塞直到该线程运行结束</span><br></pre></td></tr></table></figure>
<p>上述主要讲解了三种常见的线程创建方式，对于线程的启动而言，都是调用线程对象的start()方法，需要特别注意的是：<strong>不能对同一线程对象两次调用start()方法</strong>。</p>
<h2 id="高级线程控制类简介"><a href="#高级线程控制类简介" class="headerlink" title="高级线程控制类简介"></a>高级线程控制类简介</h2><p>Java1.5提供了一个非常高效实用的多线程包:java.util.concurrent, 提供了大量高级工具,可以帮助开发者编写高效、易维护、结构清晰的Java多线程程序。</p>
<h3 id="ThreadLocal类"><a href="#ThreadLocal类" class="headerlink" title="ThreadLocal类"></a>ThreadLocal类</h3><p>用处：保存线程的独立变量。对一个线程类（继承自Thread)<br>当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。常用于用户登录控制，如记录session信息。</p>
<p>实现：每个Thread都持有一个TreadLocalMap类型的变量（该类是一个轻量级的Map，功能与map一样，区别是桶里放的是entry而不是entry的链表。功能还是一个map。）以本身为key，以目标为value。<br>主要方法是get()和set(T a)，set之后在map里维护一个threadLocal -&gt; a，get时将a返回。ThreadLocal是一个特殊的容器。</p>
<h3 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h3><p>如果使用atomic wrapper class如atomicInteger，或者使用自己保证原子的操作，则等同于synchronized</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//返回值为boolean</span><br><span class="line">AtomicInteger.compareAndSet(int expect,int update)</span><br></pre></td></tr></table></figure>
<p>该方法可用于实现乐观锁，考虑文中最初提到的如下场景：a给b付款10元，a扣了10元，b要加10元。此时c给b2元，但是b的加十元代码约为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(b.value.compareAndSet(old, value))&#123;</span><br><span class="line">   return ;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   //try again</span><br><span class="line">   // if that fails, rollback and log</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AtomicReference</p>
<p>对于AtomicReference 来讲，也许对象会出现，属性丢失的情况，即oldObject == current，但是oldObject.getPropertyA != current.getPropertyA。<br>这时候，AtomicStampedReference就派上用场了。这也是一个很常用的思路，即加上版本号</p>
<h3 id="Lock类"><a href="#Lock类" class="headerlink" title="Lock类"></a>Lock类</h3><p>lock: 在java.util.concurrent包内。共有三个实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ReentrantLock</span><br><span class="line">ReentrantReadWriteLock.ReadLock</span><br><span class="line">ReentrantReadWriteLock.WriteLock</span><br></pre></td></tr></table></figure>
<p>主要目的是和synchronized一样， 两者都是为了解决同步问题，处理资源争端而产生的技术。功能类似但有一些区别。</p>
<p>lock更灵活，可以自由定义多把锁的枷锁解锁顺序（synchronized要按照先加的后解顺序）<br>提供多种加锁方案，lock 阻塞式, trylock 无阻塞式, lockInterruptily 可打断式， 还有trylock的带超时时间版本。<br>本质上和监视器锁（即synchronized是一样的）<br>能力越大，责任越大，必须控制好加锁和解锁，否则会导致灾难。<br>和Condition类的结合。</p>
<h3 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h3><ul>
<li>BlockingQueue</li>
</ul>
<p>阻塞队列。该类是java.util.concurrent包下的重要类，通过对Queue的学习可以得知，这个queue是单向队列，可以在队列头添加元素和在队尾删除或取出元素。类似于一个管　　道，特别适用于先进先出策略的一些应用场景。普通的queue接口主要实现有PriorityQueue（优先队列），有兴趣可以研究</p>
<ul>
<li>ConcurrentHashMap</li>
</ul>
<p>高效的线程安全哈希map。请对比hashTable , concurrentHashMap, HashMap</p>
<h3 id="管理类"><a href="#管理类" class="headerlink" title="管理类"></a>管理类</h3><ul>
<li>ThreadPoolExecutor</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://www.cnblogs.com/wxd0108/p/5479442.html" target="_blank" rel="external">Java中的多线程你只要看这一篇就够了</a></li>
<li><a href="http://www.cnblogs.com/lwbqqyumidi/p/3804883.html" target="_blank" rel="external">Java总结篇系列：Java多线程（一）</a></li>
<li><a href="http://blog.csdn.net/column/details/concurrency.html" target="_blank" rel="external">Java并发编程系列</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[新年开篇 | 总结一个技术总监的教训和经验]]></title>
      <url>http://czhzero.com/2017/01/09/technical-director-experience/</url>
      <content type="html"><![CDATA[<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/018/640" alt=""></p>
<a id="more"></a>
<blockquote>
<p>本文系腾讯Bugly独家内容，转载请在文章开头显眼处注明作者和出处“腾讯Bugly(<a href="http://bugly.qq.com)”" target="_blank" rel="external">http://bugly.qq.com)”</a></p>
</blockquote>
<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>2017年来了，新年开篇，就不跟大家聊技术啦，给大家分享一篇鹅厂技术总监在多年工作中总结出的教训和经验。</p>
<p>这篇文章自从在腾讯内部论坛发表后，精神哥每年都会拿出来重新研读一番，每次都有新的感悟和收获，所以强烈推荐给大家。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>资深程序员是团队中最强大的生产力，但往往被不合理的工作安排浪费掉。因此作为一个团队的技术的“头”，必须要有明确清晰的认识，把主要的事务性工作剥离出来，并且放弃大量的管理“权力”，以提高团队开发质量和效率为最主要的目标去安排自己的工作。</p>
<blockquote>
<p>一般来说技术总监其实会被要求做事实上是2个职位的工作：主程、项目经理（技术化）</p>
</blockquote>
<p>因此必须明确此两个职位的工作任务分割，然后把项目经理的工作，安排给另外一个人做。当然其职称可能同样也得叫“技术总监”或“主程”，总之听起来越牛X越好。而真正的主程（技术总监）则应该投身于尽量多的技术工作中，其中最重要的工作则是开发———生产代码和文档。</p>
<h2 id="主程的工作"><a href="#主程的工作" class="headerlink" title="主程的工作"></a>主程的工作</h2><h3 id="一、开发"><a href="#一、开发" class="headerlink" title="一、开发"></a>一、开发</h3><p>从来没有一个资深的外科医生会放下手术刀，而转到手术室外面指手画脚。一个资深的程序员也不应该离开代码和文档的编写，而只是做做架构图。作为对一个复杂系统的负责人，必须亲手领导和参与建造，才能有足够的能力去负担起这个责任。因此需要至少使用60%的时间来参与开发的工作，并且建议从一开始上班就开始，虽然早上的效率很低，但是跟任何艰巨工作都一样：万事开头难。</p>
<p>在你好不容易等待电脑慢吞吞的打开了所有的IDE、需求文档、参考资料、工作计划这堆要命的东西之后，你就迈出了最重要的一步，你会发现你不在需要在网上看微博和聊QQ来提振开始工作的激情，而会被某一个优化代码的灵感而激励，或者被一个复杂而有趣的问题所吸引，从而更快的能投入到开发中。坚持打开电脑做的第一件事是打开IDE软件，是这一切最重要的一步。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%281%29" alt=""></p>
<p>开发的工作内容包括：</p>
<h4 id="1-提出非功能性需求"><a href="#1-提出非功能性需求" class="headerlink" title="1.提出非功能性需求"></a>1.提出非功能性需求</h4><p>一般来说功能需求总是让开发人员焦头烂额的主要原因。但实际上，很多项目死在发布之后，却是因为性能、产品质量、扩展性、二次开发效率等非功能性需求没认真去解决而导致的。</p>
<p>主程作为经验最丰富的成员，必须要利用自己曾经的经验和教训（在这里教训往往比经验重要），提出那些自己折腾自己的“非功能性需求”，来保障整个项目在发布后不会轰然倒塌。</p>
<p>这是个吃力不讨好的工作，因为老板和客户往往只会抱怨技术人员在玩弄把戏，骗取更多的资源或者杞人忧天。如何说服这些家伙也许不是主程的工作，但是主程必须要以高度的责任心把问题放到台面上来。沟通的工作也许让项目经理去做会更好，他们有一整套如何威逼利诱老板和客户的戏法。</p>
<p>非功能性需求中，其中有三类：</p>
<blockquote>
<p>性能需求</p>
<p>运维需求</p>
<p>开发效率</p>
</blockquote>
<ul>
<li>性能需求</li>
</ul>
<p>最好的性能需求实际上所有没有需求，因为性能优化往往错的。特别是有一定经验的开发人员，更容易产生“执念”。经验不是特别丰富，而又热爱学习的开发者，往往对很多网上的所谓文章、经验没有太多的识别能力，又缺乏动手实际测试的机会，所以道听途说先入为主的观念也是非常多的。这些观念里面最多的就是关于性能的，先不论所谓优化性能的各种说法，就是推荐各种高性能框架、库的文章也很多。这个时候，拨开纷繁的信息迷雾的人，就只能靠主程了。</p>
<ul>
<li>运维需求</li>
</ul>
<p>运维需求的目标是尽量自动化，这里除了最基本的批量启动、停止、重载静态数据（配置）外，还应该包括自动读取本地IP地址，以及自动下载配置文件来启动；等待所有用户退出后才停止的“安全退出”；自动检查进程停止后重启等等功能。</p>
<p>但是运维的工具也要避免过度设计。很多人往往一想到搞运维工具，就想搞一个功能非常大而全，具备漂亮的WEB界面的大平台。实际上真正救命的往往是一些自动化的小型工具，只有这些小工具和小功能都齐备了，耐心额漂亮界面的平台系统真正有意义。所以这主要依赖于经验，但也需要有想象力。</p>
<ul>
<li>开发效率</li>
</ul>
<p>开发效率的需求一般都在代码结构上，而这是最容易产生争吵的地方。实际上所谓的代码结构，是对业务领域抽象的一种表现形式，所以对业务领域的理解能力和经验是第一位的。如何抽象好业务领域的模型，不能照搬别人的经验，但也不能完全靠自己想象。需要自己对业务领域做深入思考，同时也多学习了解其他项目的模型。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%282%29" alt=""></p>
<p>一般来说，比较底层的技术模型，作为开发人员，都是非常熟悉的。比如UNIX系统把所有东西都抽象成文件。而大量的开源项目，作为通用的技术产品，对于比较技术层面的抽象，也都非常优秀。但是，作为业务逻辑开发人员，是绝对不应该被这些模型所困住的，因为我们要解决的问题，并不是去写一个操作系统，或者某个开源框架，而是具体的某一个领域的问题。只有真正深入的去了解业务领域，才能很好的抽象业务领域的模型。</p>
<p>也就是说，如果你是开发游戏的，就要深入的理解游戏产品的概念；如果你是开发电商产品的，就要对商业贸易有深入理解，否则是不配作这些产品的开发领导人的。我们有一些技术人员，并不愿意去深入业务领域做理解，而是希望把所有的业务问题，都抽象成他自己最拿手的某一种技术模型，这样反而是会严重影响开发效率的。</p>
<p>比如说有的人，喜欢把所有的业务逻辑，都看成是一种“输入数据结构”和“输出数据结构”的处理管道，不管写什么程序，都是同样一套类似的代码结构，就是“读输入-解包-处理-写输出”。尽管这样一定可以完成所有的需求，但是其代码结构并不能应对真正的需求变化，开发效率也一定是低的。真正的主程，就是应该在这个时候，挺身而出提出自己的抽象模型，从而带动整个团队，提高开发效率，同时也做好应对需求变化的准备。</p>
<h4 id="2-设计和修正软件架构"><a href="#2-设计和修正软件架构" class="headerlink" title="2. 设计和修正软件架构"></a>2. 设计和修正软件架构</h4><p>软件架构设计至关重要，而且工作繁重。不画图纸就敢开工的技术人员要么是天才要么是笨蛋。对于团队来说，架构在分工合作、避免风险、提高质量等多个方面有无可替代的作用。</p>
<p>架构要避免成为空洞的文档，最重要的一步是有人来掌控和实施。而主程主持设计和修正的架构，并且亲手实施，让团队中的腹诽之徒完全无法避开，否则代码将无法运行！所谓设计和修正架构，并不意味所有的文档应该一个人写，而是指这个架构的每个环节，都是经过主程决策同意的。当然最好这些文档能尽量由他撰写，对于“菜鸟”团队来说，输出这种文档本身就意味着“权势”，有助于主程建立个人威信——这种看起来有点肮脏的“政治”东西，在避免团队内无止境的扯皮，以及稳定那些随时准备跳槽的成员来说，都是相当实用的。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%283%29" alt=""></p>
<p><strong>很多软件架构只有运行时架构，没有代码架构，这是非常可惜的。</strong> 诚然，我们要关注系统的运行效率，运行时架构（进程结构图）是必不可少的。然而，代码架构是更加稳定的设计方案，因为在必定会发生的需求变更下，进程结构往往也会因此变化。代码的结构是对需求的抽象和描述，这种描述是对业务需求的理解，业务需求小的变化非常多，而大的方向却往往不会变化很频繁，因此如果能基于这些大的方向来组织代码，划分模块，那些繁复的小需求，仅仅是对系统局部的修改，而不会影响过多的其他部分；反之，如果我们没有整体的视野去组织代码和模块，仅仅从一开始的细节需求去组织进程代码，一定会因为需求变化而把整个系统改的乱七八糟。</p>
<p>所以，作为主程或技术总监，把控代码结构，往往比把控进程结构更为重要。同样的代码可以组织到不同的进程内来启动，如果进程结构不适应性能需求，还是可以优化的。但反过来就行不通了，一个混乱的代码结构，不管你怎么去用进程结构调整，还是会问题百出。</p>
<h4 id="3-难点代码（关键需求）的开发"><a href="#3-难点代码（关键需求）的开发" class="headerlink" title="3.难点代码（关键需求）的开发"></a>3.难点代码（关键需求）的开发</h4><p>主程必须写代码，写那些大家都认为风险大的代码。</p>
<p>有的系统对于性能要求很高，他就必须去完成容易出性能问题的部分。比如IO操作或者设计数据库索引。有些系统的需求非常飘忽，他就要去想办法完成框架代码或者脚本引擎，以便众多小弟可以跟着产品人员疲于奔命。这种工作内容会让主程不必完全的读过所有代码，而能牢牢的“掌握”代码，以免团队成员甩耙子的时候能充当备胎。因为融入团队的代码开发，也是一个让架构设计从日常工作中真正控制系统的工作。而且主程代码通常会被别人接触，能直接教育其他团队成员，同时也能建立——威信。</p>
<p>在大公司中，由于团队成员普遍素质比较高，所以都这部分的需求会比较少。但是还是有一些部分的代码，应该亲自操刀。如果不能对最核心的实现模块下手，起码也应该对客户使用界面有一定的编码经验。</p>
<p>比如游戏开发中，某个比较复杂的业务逻辑脚本；在发行的产品或库中，编写针对用户演示用的DEMO等等……。究其原因，是因为客户是最重要的，而领导者起码应该直接参与面对客户的部分。店长不迎宾，厂长不进车间，事情是绝对做不好的。</p>
<p>而中小型公司里面，如果编码工作还是放给别人做，到头来还是给自己找麻烦。因为小型公司人力本来就紧张，而质量低下的代码，造成的故障和BUG，会更加消耗不多的时间成本。自己做的越多，项目成功的几率就会越大。</p>
<h4 id="4-救火和杀虫"><a href="#4-救火和杀虫" class="headerlink" title="4.救火和杀虫"></a>4.救火和杀虫</h4><p>这个工作其实和代码开发是一致的，如果没有平日的开发，通常紧急问题的解决也是比较难处理的。但是这个也有一个调试技巧的要求，比如要求会使用各种诊断工具。这些工具一般的开发人员可能会比较少使用。找问题的过程本身也可以提高团队其他人的技术水平。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%284%29" alt=""></p>
<h3 id="二、培训"><a href="#二、培训" class="headerlink" title="二、培训"></a>二、培训</h3><p>培训的工作应该占用30%左右的工作时间。培训是稳定团队人员最重要的手段。也是提高团队开发效率最有效的手段。工具、过程、制度、奖惩，这些都代替不了程序员一行行的去写代码，最直接的方法是让他们做的更快更好，这些需要经验和知识的积累。</p>
<h4 id="1-代码审查"><a href="#1-代码审查" class="headerlink" title="1.代码审查"></a>1.代码审查</h4><p>关于代码审查，有太多的论述。但是代码审查还是一种“强迫”推行某种风格或者技巧的手段，这是最真实的“控制”系统的手段。也是推广知识和经验最直接的手段。一个人写的代码通常应对的问题不会特别“广泛”，因此只要审查其中一部分代码，就能给大部分别的代码带来好处。</p>
<p>代码审查的实施，应该有一定的基础。需要代码作者进行问题描述、代码结构的讲解。而且也需要作者自己来挑选重点代码段。主程序员应该指出自己关心的重点代码应该符合什么特征。</p>
<h4 id="2-技术方案评审"><a href="#2-技术方案评审" class="headerlink" title="2.技术方案评审"></a>2.技术方案评审</h4><p>什么事情应该写一个技术方案，然后进行评审，这是一个关键的问题。一般认为开发时间在2周以上的单项工作应该先做个方案。往往技术方案是系统架构的完善和补充，或者是挑战。所以主程的参与是非常必要的。但是要注意不需要去做的太琐碎，而是要提炼出“关键”的需求和“关键”的解决方案进行评审，而这些“关键”往往不是功能，而是质量上的需求，如这个系统的扩展性，是否能方便后续开发等等。也有可能在这些会议上会发生争吵，但是决策人是主程的地位是不容动摇的。君子和而不同，每个程序员都可以拥有自己的看法，但是代码必须能按方案运行起来，主程必须经常申明这点。</p>
<p>技术方案在差距较大的团队中评审，一般来说可以视为一种培训；而在水平相当的团队中评审，可能会变成各自想法的争执。不同的项目经历，绝对会造成意见的大分歧。其实这就是所谓“非功能需求”没有被明确出来造成的。这个时候主程就应该履行自己的义务，去提炼争论中的“非功能需求”，然后做出决断。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%285%29" alt=""></p>
<h4 id="3-学习与讲座"><a href="#3-学习与讲座" class="headerlink" title="3.学习与讲座"></a>3.学习与讲座</h4><p>如果团队碰到问题，没有新的方法和技术去解决，是不会提高开发效率的。就好像你用牛来耕地，不管用什么管理方法，都不会赶上机械化的速度。而主程承担着不断突破自己的技术上限，介绍和推动团队使用更新的技术来解决问题的责任。抱残守缺，思想僵化，最后会被团队成员所抛弃，而且也会让团队的效能落后于业界，最后直接影响产品的生死。每年学一门新语言，这个说法可能有点激进，但是这也是作为程序员应该有的激情。</p>
<h3 id="三、管理"><a href="#三、管理" class="headerlink" title="三、管理"></a>三、管理</h3><p>管理等于权势？管理等于沟通？管理等于文山会海？多年专业训练出来的技术人员如何去做管理？</p>
<p>管理的目标是提高绩效，如果和这个目标无关，而只是和“管理者”这个头衔有关的事情，最好丢给别人去做，包括那个头衔。管理主要手段是创新：想出新的方法去解决问题，而不是繁杂的事务性工作！——一个专业秘书能比主程做的好一百倍。技术工作的创新，最主要还是在技术工作里面，而不是跳出来说：做这个，做那个。</p>
<p>管理的事情如果超过10%的工作时间，等于说你更像一个项目经理而非主程。</p>
<h4 id="1-绩效评定"><a href="#1-绩效评定" class="headerlink" title="1.绩效评定"></a>1.绩效评定</h4><p>以专业的意见来衡量别人的工作，这个负担是无人能够承担的。这个工作往往是利益分配的一种手段。类似奖惩手段。这种管理方法已经不是新事物了。但是实际上技术人员对于绩效往往持一定保留和暧昧的态度，因为这种事情难以很清晰的界定出来。需要判断而非量度，才是绩效的真正手段。如果一定要打分，一共两项足够了：进度、质量，5分制即可。更重要的事情是，告诉每个人主程的看法，告诉别人，怎样做才是更好。或者告诉团队，怎样做才更有利于我们成功（发财、上市、赢得老板和客户……）——把目标清晰告诉团队，发挥他们的主动性，是绩效评定最重要的目标。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%286%29" alt=""></p>
<p>KPI是一个争论非常多的话题，技术人员的KPI的争议更多。</p>
<p>关于KPI，有几个观点是必须明确的：</p>
<p>难以量化的东西，就不要强行量化；<br>KPI应该以任务是否有去做完为标志，而不是做到的效果为标志；<br>分解和设计KPI是一个非常需要承担风险的工作，基本上等于提出实际的工作方案。<br>以上三点，是互为结合的。技术工作的质量很难量化，或者指导性不强，还不如以工作的数量为标准，指导性反而更强。</p>
<p>那么要怎么设置这些工作任务的数量呢？</p>
<p>应该去设计一些能“保证质量”的工作任务，作为必须要完成的工作数量。那么，问题就更进一步了，要设置些什么样的工作，才能作为指标？这就需要技术总监根据自己的经验和智慧，提出切实可行的方案去要求下属完成，而不是把需求简单的分切后丢给下属去自行了断。</p>
<p>举个例子，有一个部门的业务逻辑开发任务很重，由于需求多变化快，代码质量难以监督，所以各种性能和逻辑故障都层出不穷。如果你只是设置了BUG的数量和需求完成数量作为指标，靠这种KPI是难以推动真正的改进的。反过来，如果你对需求实现模块，设置了必须要完成的单元测试任务指标，设置了运行质量监控系统的开发指标。如果部门完成了这些事情，项目的质量和进度自然就会有提高。——但是这些措施是否真的能奏效，这就是作为技术总监必须自己承担的决策风险。</p>
<h4 id="2-需求评定"><a href="#2-需求评定" class="headerlink" title="2.需求评定"></a>2.需求评定</h4><p>最让技术人员头疼的可能就是和客户谈判。这个事情实际上不应该让技术人员来伤心，有项目经理就可以了。而需求评定更多的是可行性的讨论。主程如果参加每个需求评定，他要三头六臂也搞不定，正确的做法应该是具体开发的团队人员参加，而主程在开会前给与自己的意见，或者会后听取参与者的总结。——这是了解别人做什么事的一个重要手段，但无需陷入太深，因为还有代码评审和项目经理的帮忙。</p>
<h4 id="3-跨部门沟通"><a href="#3-跨部门沟通" class="headerlink" title="3.跨部门沟通"></a>3.跨部门沟通</h4><p>实在没必要参加，能躲就躲，这是扯皮的天堂。让项目经理去吧，他们的专业技巧能让这些事情更加有效。只要回来后让项目经理告诉你发生了什么事情就可以了。</p>
<h4 id="4-进度审核和任务分派"><a href="#4-进度审核和任务分派" class="headerlink" title="4.进度审核和任务分派"></a>4.进度审核和任务分派</h4><p>又是一个很有“权势”的工作，实际上团队成员的情况大家都知道，决定谁应该做什么事情并非需要很多时间去想的事情。所以大可以把方向性的意见告诉项目经理，让他去做。很多优秀的开发者玩EXCELPROJECT之类的水平还不如只有一年工作经验的秘书，别折腾自己了。</p>
<h4 id="5-面试"><a href="#5-面试" class="headerlink" title="5.面试"></a>5.面试</h4><p>如果真想帮忙，准备一份有区分度的笔试题目吧。不靠谱的人太多，老板可不是花钱请你和他们聊天的。让项目经理去聊，不用担心他们技术不强，再不够，也会比大多数面试者要牛X。他们搞不定的人，就是应该雇佣的家伙。毕业生招聘怎么办？只要看看他们课外活动是不是有搞些专业的事情就可以了，上进心比别的东西都重要，HR会比主程看的更准，相信我。</p>
<h4 id="6-各种会议"><a href="#6-各种会议" class="headerlink" title="6.各种会议"></a>6.各种会议</h4><p>饭无好饭，会无好会，超过6个人的会议应该坚决抵制。如果你有一个程序等着你去写，你一定无比痛恨这些会议，顺应你的内心吧！上帝保佑你。</p>
<h2 id="最后说说项目经理的工作"><a href="#最后说说项目经理的工作" class="headerlink" title="最后说说项目经理的工作"></a>最后说说项目经理的工作</h2><p>项目经理就像下水道的清洁工，所有那些主程不愿意去做的事情，他们都弯下腰去认真的把玩，实在是太伟大了。既然如此，为何不让他们拥有更好一点的头衔呢？如果没有他们去处理这些工作，任何一个主程都会被逼疯掉，或者他们自己变成了项目经理，让团队损失了最强力的一台代码发动机。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/018/640%20%287%29" alt=""></p>
<p>在一些公司，有专门的项目经理的岗位，这无疑是幸福的，但也是不幸的。因为项目经理本身是一种既需要专业性，也需要通用技能的岗位。项目经理由于专业定义不清晰，导致了大量的误解，这就是不幸的原因。有的团队会说我们不需要项目经理，又有的团队会认为项目经理无比重要，这两种观点的争论一直没有平息过。因此比较实际的做法是，不要轻易的去评价“是否需要项目经理”，而是努力把工作细分，专业化，然后再看应该安排谁去做。不同的项目和不同的团队，也许项目经理的工作都是不同的。</p>
<p>根据经验，项目经理大概的工作内容方向包含以下这些：</p>
<h3 id="一、进度"><a href="#一、进度" class="headerlink" title="一、进度"></a>一、进度</h3><ul>
<li><p>指定工作计划</p>
</li>
<li><p>进度检查和进度延迟的预警</p>
</li>
<li><p>工作总结和统计</p>
</li>
</ul>
<h3 id="二、资源"><a href="#二、资源" class="headerlink" title="二、资源"></a>二、资源</h3><p>整合提供各种资源，如找DBA，IT，运维人员，硬件，SVN权限，测试环境，福利，周末的活动……<br>面试：人员是最重要的资源，不是吗？<br>资源谈判：往往是和老板谈判，让别人明白现在的真实情况。又一个吃力不讨好的差事，但是总需要人做。</p>
<h3 id="三、沟通"><a href="#三、沟通" class="headerlink" title="三、沟通"></a>三、沟通</h3><p>需求评审：和需求方讨价还价，项目经理真是命苦啊……<br>组织会议或者用其他方式通知信息给所有人：小喇叭、大喇叭、全服广播、世界频道……<br>总结</p>
<p>对于一个小型公司，职权，头衔，收益，往往会更加敏感。但是这些都不是让项目失败的理由。一颗叫程序员的种子说：长大了我就是叫管理者的树。这个错误的观念只会让这个种子永远无法发芽。软件开发是类似外科医生的行业，而不是血汗工厂，所以不需要手持皮鞭的经理，而需要仁心仁术的神医。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 基础命令操作指引]]></title>
      <url>http://czhzero.com/2016/12/26/git-basic-kill/</url>
      <content type="html"><![CDATA[<p>Git是一个分布式版本管理系统，是为了更好地管理Linux内核开发而创立的。Git与Svn相比，不光有远程代码库，也有本地代码库，方便多人协作。</p>
<p>另外，Git中分支的活用，也极大的方便了开发人员开发过程中的多版本同时开发。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/016/Git-start3.png" alt=""></p>
<a id="more"></a>
<h1 id="Git-初始化项目"><a href="#Git-初始化项目" class="headerlink" title="Git 初始化项目"></a>Git 初始化项目</h1><h2 id="Create-a-new-repository"><a href="#Create-a-new-repository" class="headerlink" title="Create a new repository"></a>Create a new repository</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone git@*******/test.git</span><br><span class="line">cd test</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;add README&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h2 id="Existing-folder-or-Git-repository"><a href="#Existing-folder-or-Git-repository" class="headerlink" title="Existing folder or Git repository"></a>Existing folder or Git repository</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd existing_folder</span><br><span class="line">git init</span><br><span class="line">git remote add origin git@@*******/test.git</span><br><span class="line">git add .</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure>
<h1 id="Git-参数配置"><a href="#Git-参数配置" class="headerlink" title="Git 参数配置"></a>Git 参数配置</h1><h2 id="config-配置文件位置"><a href="#config-配置文件位置" class="headerlink" title="config 配置文件位置"></a>config 配置文件位置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">All User : /etc/gitconfig</span><br><span class="line">Current User : ~/.gitconfig</span><br></pre></td></tr></table></figure>
<h2 id="config-查看所有配置信息"><a href="#config-查看所有配置信息" class="headerlink" title="config 查看所有配置信息"></a>config 查看所有配置信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>
<h2 id="config-设置基本用户信息"><a href="#config-设置基本用户信息" class="headerlink" title="config 设置基本用户信息"></a>config 设置基本用户信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot;</span><br><span class="line">git config --global user.email &quot;xxxx@163.com&quot;</span><br></pre></td></tr></table></figure>
<p>增加 <code>--global</code> 表示该设置对当前系统登录用户生效，配置完成后，可以在<code>~/.gitconfig</code>中查看结果。否则，表示只对当前git项目生效，在项目的<code>.git/config</code>中查看结果。</p>
<h2 id="config-设置命令别名"><a href="#config-设置命令别名" class="headerlink" title="config 设置命令别名"></a>config 设置命令别名</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.co checkout      //git co 代替 git checkout 命令</span><br><span class="line">$ git config --global alias.ci commit	     //git ci 代替 git commit 命令</span><br><span class="line">$ git config --global alias.br branch        //git br 代替 git branch 命令</span><br></pre></td></tr></table></figure>
<p>别名设置除了可以设置单个命令的缩写外，还可以结合options进行设置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//git unstage 代替 git reset HEAD</span><br><span class="line">$ git config --global alias.unstage &apos;reset HEAD&apos;  </span><br><span class="line">   </span><br><span class="line">//git last 代替 git log -l</span><br><span class="line">$ git config --global alias.last &apos;log -1&apos; </span><br><span class="line">           </span><br><span class="line">//git lg 代替 复杂的git log效果</span><br><span class="line">$ git config --global alias.lg &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure>
<p>别名配置好了之后，如果通过<code>vi ~/.gitconfig</code> 查看结果如下，修改配置文件，则可以修改别名设置效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">        name = 你的姓名</span><br><span class="line">        email = 你的邮箱</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[alias]</span><br><span class="line">      st = status</span><br><span class="line">      ci = commit</span><br><span class="line">      br = branch</span><br><span class="line">      co = checkout</span><br><span class="line">      df = diff</span><br><span class="line">      cp = cherry-pick</span><br><span class="line">      rb = &quot;rebase -i HEAD~10&quot;</span><br><span class="line">      lg = &quot;log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit&quot;</span><br></pre></td></tr></table></figure>
<h1 id="Git-基础命令"><a href="#Git-基础命令" class="headerlink" title="Git 基础命令"></a>Git 基础命令</h1><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><p>查看git仓库文件状态, git文件状态如下所示。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/016/Git-start6.png" alt="git文件状态"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unstaged - git仓库中没有此文件的相关记录 </span><br><span class="line">modified - git仓库中有这个文件的记录，且此文件当前有改动 </span><br><span class="line">staged - 变更的文件被暂存,没有提交到仓库 (git add命令之后)</span><br><span class="line">commited - 文件被提交到本地git仓库 (git commit之后)</span><br></pre></td></tr></table></figure>
<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log             #查看历史commit记录</span><br><span class="line">git log -1          #查看最近一个commit记录</span><br></pre></td></tr></table></figure>
<h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add file/fileDir         #modified或unstaged的文件转换为staged状态</span><br><span class="line">git add -A/--all             #modified或unstaged的所有文件转换为staged状态</span><br></pre></td></tr></table></figure>
<h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm test.java             #从git仓库删除test.java文件，同时删除本地文件</span><br><span class="line">git rm  --cache test.java    #从git仓库删除test.java文件，不删除本地文件</span><br></pre></td></tr></table></figure>
<h2 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;xxx comment&quot;    #staged状态转换为commited状态</span><br></pre></td></tr></table></figure>
<h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git diff                     #查看本次修改的所有文件的改动</span><br><span class="line">git diff file-path           #查看本次修改的指定文件有哪些改动</span><br></pre></td></tr></table></figure>
<h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [remote-name branch-name]  #获取远程服务器数据,并同时与本地数据合并(可能会出现冲突)</span><br></pre></td></tr></table></figure>
<h2 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git fetch"></a>git fetch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch [remote-name]     #(获取仓库的所有更新，但是不自动合并当前分支)</span><br><span class="line">git fetch -p                #(获取仓库的所有更新，且自动删除不需要的分支，更新最新的分支下来)</span><br></pre></td></tr></table></figure>
<h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push [remote-name branch-name]         #上传数据到远程分支，若出现冲突，则上传失败。</span><br><span class="line">git push --force [remote-name branch-name] #强制上传数据到远程分支**，(覆盖远程数据，慎用)**</span><br></pre></td></tr></table></figure>
<h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><p>可用来暂存当前正在进行的工作，比commit简单，而且可以跨分支合并</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git stash                    #暂存更改的内容</span><br><span class="line">git stash save &quot;comment&quot;     #暂存更改的内容,带注释</span><br><span class="line">git stash list               #显示所有暂存的内容 </span><br><span class="line">	</span><br><span class="line">git show stash@&#123;0&#125;           #显示指定stash的更改内容，类似于git diff </span><br><span class="line">	</span><br><span class="line">git stash apply stash@&#123;1&#125;    #应用指定编号的stash, 但不从stash-list中清除</span><br><span class="line">git stash pop                #应用栈顶的stash,并从stash-list清除该记录</span><br><span class="line">git stash clear              #清除stash-list</span><br><span class="line">	</span><br><span class="line">git stash --help             #获取更多的信息</span><br></pre></td></tr></table></figure>
<h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git tag v1.01								        #增加新的tag</span><br><span class="line">git tag -a v1.01 -m &quot;Relase version 1.01&quot;    #增加新的tag -a 表示标签名称 -m 表示标签注释                      </span><br><span class="line">git tag [-l]                                 # 查看所有标签</span><br><span class="line">git push origin -tags                        # 推送tag到远程分支</span><br><span class="line">git tag -d v1.01	                            # 删除本地标签</span><br><span class="line">git push origin :refs/tags/v1.01             # 删除远程标签</span><br></pre></td></tr></table></figure>
<p>tag建立好了后，可以当做 commit-id使用，git reset的时候直接调到tag。</p>
<h1 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h1><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git branch                  #查看本地分支列表</span><br><span class="line">git branch branch-name      #创建新分支</span><br><span class="line">git branch -r               #查看远程分支列表</span><br><span class="line">git branch -a               #查看所有分支</span><br><span class="line">git branch -d branch-name   #删除指定分支</span><br><span class="line">git branch -D branch-name   #强制删除指定分支</span><br></pre></td></tr></table></figure>
<h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout branch-name                         #切换到指定分支 (切换前记得先commit或者stash)</span><br><span class="line">git checkout -b new-branch-name                  #基于当前分支创建一个新分支</span><br><span class="line">git checkout -b branch-name origin/branch-name   #获取远程分支到本地 </span><br><span class="line">git checkout file-name                           #获取远程最新文件</span><br><span class="line">git checkout -- .                                #放弃本地所有的modify文件改动</span><br></pre></td></tr></table></figure>
<h2 id="add-remote-branch"><a href="#add-remote-branch" class="headerlink" title="add remote branch"></a>add remote branch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.git checkout branch-name              #切换到要上传的分支</span><br><span class="line">2.git remote add origin branch-name     #添加远程分支</span><br><span class="line">3.git push origin branch-name            #推送数据到远程分支 (自动创建分支，step2可省去)</span><br></pre></td></tr></table></figure>
<h2 id="delete-remote-branch"><a href="#delete-remote-branch" class="headerlink" title="delete remote branch"></a>delete remote branch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :remote-branch         #删除指定远程分支</span><br></pre></td></tr></table></figure>
<h1 id="Git-分支合并"><a href="#Git-分支合并" class="headerlink" title="Git 分支合并"></a>Git 分支合并</h1><h2 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. git merge branch-name                 #合并指定分支内容到当前分支</span><br><span class="line">2. git add -A                            #手动解决冲突后,重新暂存</span><br><span class="line">3. git commit -m &quot;xxx 解决冲突&quot;           #再次提交</span><br></pre></td></tr></table></figure>
<p>有些情况下我们需要优先选择使用 <code>git merge --squash branch-name</code><br>–squash选项的含义是：本地文件内容与不使用该选项的合并结果相同，<br>但是不提交、不移动HEAD，因此需要一条额外的commit命令。<br>其效果相当于将another分支上的多个commit合并成一个，放在当前分支上，原来的commit历史则没有拿过来。<br>判断是否使用–squash选项最根本的标准是，待合并分支上的历史是否有意义。<br>如果在开发分支上提交非常随意，甚至写成微博体，那么一定要使用–squash选项。</p>
<h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>使用rebase合并代码可以使提交的历史记录显得更简洁</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. git rebase target-branch-name         #合并目标分支内容到当前所在分支</span><br><span class="line">2. git add -A                            #手动解决冲突后, 重新暂存</span><br><span class="line">3. git rebase -- abort                   #放弃rebase操作</span><br><span class="line">4. git rebase -- continue                #解决冲突后，继续rebase操作</span><br></pre></td></tr></table></figure>
<p>暂时取消刚才的合并 (只能回退一个合并的commit)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~</span><br></pre></td></tr></table></figure>
<h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><p>挑选指定的commit-id,一个一个合并，合并速度慢了点，但是合并效果最好。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. git cherry-pick commit-id         #合并指定commit到当前分支</span><br><span class="line">2. git add -A                        #手动解决冲突后, 重新暂存</span><br><span class="line">3. git cherry-pick -- continue       #继续刚才的pick操作，这一步容易忘记</span><br><span class="line">4. git cherry-pick -- abort          #放弃cherry-pick操作</span><br></pre></td></tr></table></figure>
<h2 id="解决自动合并失败的冲突"><a href="#解决自动合并失败的冲突" class="headerlink" title="解决自动合并失败的冲突"></a>解决自动合并失败的冲突</h2><p>由于在同一行进行了修改，合并时候，产生了冲突。内容格式如下显示，然后根据实际需要解决冲突。</p>
<p>冲突解决完成后，先使用 <code>git add -A</code> ，然后根据合并命令，执行<code>git cherry-pick --continue</code><br>或者 <code>git rebase --continue</code>命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line"></span><br><span class="line">冲突内容一</span><br><span class="line"></span><br><span class="line">=======</span><br><span class="line"></span><br><span class="line">冲突内容二</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; commit-id</span><br></pre></td></tr></table></figure>
<h1 id="Git-修改与撤销"><a href="#Git-修改与撤销" class="headerlink" title="Git 修改与撤销"></a>Git 修改与撤销</h1><h2 id="git-commit-–amend"><a href="#git-commit-–amend" class="headerlink" title="git commit –amend"></a>git commit –amend</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend   #编辑工具会显示最近一次提交的提交消息，用来修改消息</span><br></pre></td></tr></table></figure>
<h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD file          #将文件从staged转换为unstaged</span><br><span class="line">git reset HEAD .             #将所有文件从staged转换为unstaged</span><br><span class="line">git reset --mixed commit-id  #默认方式，回退到指定个版本，只保留源码，回退commit和index信息</span><br><span class="line"></span><br><span class="line">git reset --soft commit-id   #回退到某个版本，只回退了commit的信息，</span><br><span class="line">                             #不会恢复到index file级。如果还要提交，直接commit即可   </span><br><span class="line"></span><br><span class="line">git reset --hard commit-id   #彻底回退到某个版本，本地的源码也会变为上一个版本的内容</span><br></pre></td></tr></table></figure>
<h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p>git revert 是生成一个新的提交来撤销某次提交，此次提交之前的commit都会被保留<br>git reset 是回到某次提交，提交及之前的commit都会被保留，但是此次之后的修改都会被退回到暂存区</p>
<p>具体一个例子，假设有三个commit， </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">commit3: add test3.md</span><br><span class="line">commit2: add test2.md</span><br><span class="line">commit1: add test1.md</span><br></pre></td></tr></table></figure>
<p>当执行<code>git revert HEAD~1</code>时， commit2被撤销了, 运行<code>git log</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">revert &quot;commit2&quot;:this reverts commit 5fe21s2...</span><br><span class="line">commit3: add test3.md</span><br><span class="line">commit2: add test2.md</span><br><span class="line">commit1: add test1.md</span><br></pre></td></tr></table></figure>
<p>运行<code>git status</code>， 没有任何暂存。</p>
<p>如果换做执行<code>git reset --soft(默认) HEAD~1</code>后，运行<code>git log</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">commit2: add test2.md</span><br><span class="line">commit1: add test1.md</span><br></pre></td></tr></table></figure>
<p>运行<code>git status</code>， 其中 <code>test3.md</code> 处于暂存区，准备提交。</p>
<p>再如果换做执行<code>git reset --hard HEAD~1</code>后,</p>
<p>显示：<code>HEAD is now at commit2</code>，运行<code>git log</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">commit2: add test2.md</span><br><span class="line">commit1: add test1.md</span><br></pre></td></tr></table></figure>
<p>运行<code>git status</code>， 没有任何暂存。</p>
<p>另外：</p>
<p><code>git revert &lt;commit-id&gt;</code> 是撤消该commit，作为一个新的commit。</p>
<h2 id="git-rebase-1"><a href="#git-rebase-1" class="headerlink" title="git rebase"></a>git rebase</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(1) git rebase -i commit-id   #在vi编辑器中，显示commit-id到最新的所有commit记录</span><br><span class="line">(2) git rebase -i HEAD~10     #在vi编辑器中，显示最新10条commit记录</span><br><span class="line">(3) 在vi编辑器中, 修改commit内容, wq保存</span><br><span class="line">(4) git add -A                #解决冲突后，暂存文件</span><br><span class="line">(5) git rebase --continue     #完成未完成rebase操作</span><br><span class="line">(6) git rebase --abort        #完成未完成rebase操作</span><br></pre></td></tr></table></figure>
<p>假定vim编辑器的初始内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pick 8e5da5f test-comment-1 </span><br><span class="line">pick 627a433 test-comment-2 </span><br><span class="line">pick 627a433 test-comment-3 </span><br><span class="line">pick dcc8310 test-comment-4</span><br></pre></td></tr></table></figure>
<p>git常见的几种操作方式，都是通过vim编辑器来实现的。</p>
<ul>
<li>Scene1 ： 修改commit的message内容</li>
</ul>
<p>修改vim内容结果如下，然后保存。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 修改commit内容</span><br><span class="line">pick 8e5da5f test-comment-1 </span><br><span class="line">pick 627a433 test-comment-2 </span><br><span class="line">r 627a433 修改后的内容 </span><br><span class="line">pick dcc8310 test-comment-4</span><br></pre></td></tr></table></figure>
<ul>
<li>Scene2 ：删除指定commit的提交内容</li>
</ul>
<p>修改vim内容结果如下，然后保存。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># commit-id删除 </span><br><span class="line">pick 8e5da5f test-comment-1 </span><br><span class="line">pick 627a433 test-comment-2 </span><br><span class="line">pick dcc8310 test-comment-4</span><br></pre></td></tr></table></figure>
<ul>
<li>Scene3 ：调换指定commit的提交顺序</li>
</ul>
<p>修改vim内容结果如下，然后保存。若有冲突，先解决冲突，<br>然后使用<code>git add -A</code>添加，再使用<code>git rebase --continue</code>继续。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 调换</span><br><span class="line">pick 8e5da5f test-comment-1 </span><br><span class="line">pick 627a433 test-comment-3 </span><br><span class="line">pick 627a433 test-comment-2 </span><br><span class="line">pick dcc8310 test-comment-4</span><br></pre></td></tr></table></figure>
<ul>
<li>Scene4 ：合并指定的两个commit的内容</li>
</ul>
<p>修改vim内容结果如下，然后保存, 若有冲突，先解决冲突，<br>然后使用<code>git add -A</code>添加，再使用<code>git rebase --continue</code>继续。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># commit-id 3 与 4合并</span><br><span class="line">pick 8e5da5f test-comment-1 </span><br><span class="line">pick 627a433 test-comment-2 </span><br><span class="line">pick 627a433 test-comment-3 </span><br><span class="line">s dcc8310 test-comment-4</span><br></pre></td></tr></table></figure>
<h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h2><p>  显示所有过去commit历史，可使用<code>git reset --hard</code>命令跳转到指定commit-id位置，<br>  用来恢复某些的误操作。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中String数据类型转换与format总结]]></title>
      <url>http://czhzero.com/2016/12/23/java-value-format-and-converter/</url>
      <content type="html"><![CDATA[<p>Java中的String类型与List,数组等格式在日常工作中，经常需要进行相互转换，本文总结了几种常见的格式转换与format例子。</p>
<a id="more"></a>
<h2 id="1-List-与-String数组"><a href="#1-List-与-String数组" class="headerlink" title="1. List 与 String数组"></a>1. List<string> 与 String数组</string></h2><ul>
<li>List<string>转String数组</string></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list = new ArrayList();</span><br><span class="line">list.add(&quot;aaa&quot;);</span><br><span class="line">list.add(&quot;bbb&quot;);</span><br><span class="line">String[] arrString = (String[]) list.toArray(new String[list.size()]);</span><br></pre></td></tr></table></figure>
<ul>
<li>String数组转List<string></string></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String[] s = &#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;5&quot;, &quot;6&quot;&#125;;</span><br><span class="line">List&lt;String&gt; listA = Arrays.asList(s);</span><br><span class="line">listA.add(3, &quot;4&quot;);     //java.lang.UnsupportedOperationException异常</span><br><span class="line"></span><br><span class="line">ArrayList&lt;String&gt; listB = new ArrayList&lt;&gt;(listA);</span><br><span class="line">listB.add(3, &quot;4&quot;);       //正确</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Arrays.asList() 返回的是 <code>java.util.Arrays.ArrayList</code> 而不是 <code>java.util.ArrayList</code> ,<br>这两个类同名，都继承了AbstractList，<br>但是前者并未实现add,remove等方法，所有要进行增删操作，必须先转换成真正的 <code>java.util.ArrayList</code>,<br>否则会报<code>java.lang.UnsupportedOperationException异常</code></p>
</blockquote>
<h2 id="2-String-数组-与-String"><a href="#2-String-数组-与-String" class="headerlink" title="2. String[]数组 与 String"></a>2. String[]数组 与 String</h2><ul>
<li>String[]数组转String</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] s = &#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;&#125;;</span><br><span class="line">String str = Arrays.toString(s);</span><br></pre></td></tr></table></figure>
<ul>
<li>String转String[]数组</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;1,2,3,4&quot;;</span><br><span class="line">String[] s = str.split(&quot;,&quot;);</span><br></pre></td></tr></table></figure>
<h2 id="3-List-与-String"><a href="#3-List-与-String" class="headerlink" title="3. List 与 String"></a>3. List<string> 与 String</string></h2><ul>
<li>List<string>转String</string></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = listA.toString();</span><br></pre></td></tr></table></figure>
<ul>
<li>String转List<string></string></li>
</ul>
<p>String先转换成String数组，再转成List<string>。</string></p>
<h2 id="4-String-与-数值类型互转"><a href="#4-String-与-数值类型互转" class="headerlink" title="4.String 与 数值类型互转"></a>4.String 与 数值类型互转</h2><ul>
<li>String转int</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int i = Integer.parseInt(&quot;1&quot;);</span><br><span class="line">int j = Integer.valueOf(&quot;2&quot;).intValue();</span><br><span class="line">int k = Integer.valueOf(&quot;3&quot;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>字串转成 Double, Float, Long 的方法大同小异。</p>
</blockquote>
<ul>
<li>int转String</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a = String.valueOf(1);</span><br><span class="line">String b = Integer.toString(2);</span><br><span class="line">String c = &quot;&quot; + 3;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Double, Float, Long 转成字串的方法大同小异。</p>
</blockquote>
<h2 id="5-String-format格式化"><a href="#5-String-format格式化" class="headerlink" title="5. String.format格式化"></a>5. String.format格式化</h2><ul>
<li>整数格式format</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int d = Integer.parseInt(&quot;99099&quot;);  </span><br><span class="line">System.out.println(d);  </span><br><span class="line">//格式化为整形型字符串  </span><br><span class="line">System.out.println(String.format(&quot;%d&quot;,d));  </span><br><span class="line">//整数长度为7，如果不到7位就用0填充  </span><br><span class="line">System.out.println(String.format(&quot;%07d&quot;,9909));  </span><br><span class="line">System.out.println(String.format(&quot;%07d&quot;,99099999));  </span><br><span class="line">//长度不满7就用空格填充  </span><br><span class="line">System.out.println(String.format(&quot;% 7d&quot;,9909));  </span><br><span class="line">//使用,对数字分组  </span><br><span class="line">System.out.println(String.format(&quot;%,d&quot;,9909999));  </span><br><span class="line">//显示正负数  </span><br><span class="line">System.out.println(String.format(&quot;%+d&quot;,d));  </span><br><span class="line">System.out.println(String.format(&quot;%+d&quot;,-345));</span><br></pre></td></tr></table></figure>
<ul>
<li>小数点格式format</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">double d = Double.parseDouble(&quot;9909999999.9999&quot;);  </span><br><span class="line">System.out.println(d);  </span><br><span class="line">//格式化为浮点型字符串  </span><br><span class="line">System.out.println(String.format(&quot;%f&quot;,d));  </span><br><span class="line">//整数部分全部显示，小数部分后面保留5位小数  </span><br><span class="line">System.out.println(String.format(&quot;%.5f&quot;,d));  </span><br><span class="line">//使用,对数字分组  </span><br><span class="line">System.out.println(String.format(&quot;%,f&quot;,d));  </span><br><span class="line">//显示正负数  </span><br><span class="line">System.out.println(String.format(&quot;%+f&quot;,d));  </span><br><span class="line">System.out.println(String.format(&quot;%+f&quot;,-345.98));  </span><br><span class="line">//算小数点后面的位数一起时15  </span><br><span class="line">System.out.println(String.format(&quot;%015f&quot;,345.98));  </span><br><span class="line">//小数点后面保留三位小数  </span><br><span class="line">System.out.println(String.format(&quot;%015.3f&quot;,345.98));</span><br></pre></td></tr></table></figure>
<p>除了用<code>String.format</code>之外还有些其他方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//方法一</span><br><span class="line"></span><br><span class="line">java.text.DecimalFormat df = new java.text.DecimalFormat(&quot;#.##&quot;);</span><br><span class="line">double d = 3.14159;</span><br><span class="line">System.out.println(df.format(d));</span><br><span class="line"></span><br><span class="line">//方法二</span><br><span class="line"></span><br><span class="line">BigDecimal bd = new BigDecimal(&quot;3.14159265&quot;);</span><br><span class="line">bd = bd.setScale(2, BigDecimal.ROUND_HALF_UP);</span><br><span class="line"></span><br><span class="line">//方法三</span><br><span class="line"></span><br><span class="line">double value = 1234.5678;</span><br><span class="line">long l1 = Math.round(value * 100);   //四舍五入</span><br><span class="line">double result = l1 / 100.0;          //注意：使用100.0而不是100</span><br><span class="line"></span><br><span class="line">//方法四</span><br><span class="line"></span><br><span class="line">double value = 1234.5678;</span><br><span class="line">value = ((int) (value * 100)) / 100.0;</span><br></pre></td></tr></table></figure>
<ul>
<li>时间格式format</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Date now = new Date();  </span><br><span class="line">System.out.println(&quot;全部日期和时间信息:&quot;+String.format(&quot;%tc&quot;, now));  </span><br><span class="line">System.out.println(&quot;年-月-日格式：&quot;+String.format(&quot;%tF&quot;, now));  </span><br><span class="line">System.out.println(&quot;月/日/年格式:&quot;+String.format(&quot;%tD&quot;, now));  </span><br><span class="line">System.out.println(&quot;HH:MM :&quot;+String.format(&quot;%tR&quot;, now));  </span><br><span class="line">System.out.println(&quot;HH:MM:SS PM格式（12时制）：&quot;+String.format(&quot;%tr&quot;, now));  </span><br><span class="line">System.out.println(&quot;HH:MM:SS格式（24时制）:&quot;+String.format(&quot;%tT&quot;, now));</span><br></pre></td></tr></table></figure>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://hbiao68.iteye.com/blog/1769053" target="_blank" rel="external">String.format格式化</a><br><a href="http://irobot.iteye.com/blog/285537" target="_blank" rel="external">Java中取小数点后两位(四种方法)</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何在Android7.0系统下通过Intent安装apk]]></title>
      <url>http://czhzero.com/2016/12/21/how-to-install-apk-on-Android7-0/</url>
      <content type="html"><![CDATA[<p> Android系统升级到7.0之后，安全性提高了不少，过去我们通常是使用这样的代码进行apk的安装操作。</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = new Intent(Intent.ACTION_VIEW);</span><br><span class="line">intent.setDataAndType(Uri.fromFile(apkFile), &quot;application/vnd.android.package-archive&quot;);</span><br><span class="line">context.startActivity(intent);</span><br></pre></td></tr></table></figure>
<p> 但是在Android7.0的系统上，运行这段代码，会报如下错误。</p>
<blockquote>
<p>Caused by: android.os.FileUriExposedException</p>
</blockquote>
 <a id="more"></a>
<p>原因是，安卓官方为了提高私有文件的安全性，面向 Android 7.0 或更高版本的应用私有目录被限制访问　(0700)。此设置可防止私有文件的元数据泄漏，如它们的大小或存在性.</p>
<p>传递软件包网域外的 file:// URI 可能给接收器留下无法访问的路径。因此，尝试传递 file:// URI 会触发 FileUriExposedException。分享私有文件内容的推荐方法是使用 <a href="https://developer.android.google.cn/reference/android/support/v4/content/FileProvider.html" target="_blank" rel="external">FileProvider</a>。</p>
<h2 id="1-定义一个FileProvider"><a href="#1-定义一个FileProvider" class="headerlink" title="1.定义一个FileProvider"></a>1.定义一个FileProvider</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;application&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;provider</span><br><span class="line">            android:name=&quot;android.support.v4.content.FileProvider&quot;</span><br><span class="line">            android:authorities=&quot;com.mydomain.fileprovider&quot;</span><br><span class="line">            android:exported=&quot;false&quot;</span><br><span class="line">            android:grantUriPermissions=&quot;true&quot;&gt;</span><br><span class="line">            ...</span><br><span class="line">        &lt;/provider&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure>
<h2 id="2-添加可用权限的文件目录"><a href="#2-添加可用权限的文件目录" class="headerlink" title="2.添加可用权限的文件目录"></a>2.添加可用权限的文件目录</h2><p>在res目录下，增加xml文件夹，并新建一个名为 <code>file_paths.xml</code> 的文件。文件内容格式如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;paths xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">   		&lt;files-path name=&quot;name1&quot; path=&quot;test1&quot; /&gt;</span><br><span class="line">    	...</span><br><span class="line">&lt;/paths&gt;</span><br></pre></td></tr></table></figure>
<p><path></path>标签下面必须包含至少包含以下标签中的一个或者多个。</p>
<h3 id="files-path"><a href="#files-path" class="headerlink" title="files-path"></a>files-path</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;files-path name=&quot;name1&quot; path=&quot;test1&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>表示Context.getFilesDir()目录或者其子目录。</p>
<blockquote>
<p>示例 : /data/data/com.chen.gradle/files/test1</p>
</blockquote>
<h3 id="cache-path"><a href="#cache-path" class="headerlink" title="cache-path"></a>cache-path</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache-path name=&quot;name2&quot; path=&quot;test2&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>表示Context.getCacheDir()目录或者其子目录。</p>
<blockquote>
<p>示例 : /data/data/com.chen.gradle/cache/test2</p>
</blockquote>
<h3 id="external-path"><a href="#external-path" class="headerlink" title="external-path"></a>external-path</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;external-path name=&quot;name3&quot; path=&quot;test3&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>表示Environment.getExternalStorageDirectory()目录或者其子目录。</p>
<blockquote>
<p>示例 : /storage/emulated/0/test3</p>
</blockquote>
<h3 id="external-files-path"><a href="#external-files-path" class="headerlink" title="external-files-path"></a>external-files-path</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;external-files-path name=&quot;name4&quot; path=&quot;test4&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>表示Context.getExternalFilesDir(null)目录或者其子目录。</p>
<blockquote>
<p>示例 : /storage/emulated/0/Android/data/com.chen.gradle/files/test4</p>
</blockquote>
<h3 id="external-cache-path"><a href="#external-cache-path" class="headerlink" title="external-cache-path"></a>external-cache-path</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;external-cache-path name=&quot;name5&quot; path=&quot;test5&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>表示Context.getExternalCacheDir()目录或者其子目录。</p>
<blockquote>
<p>示例 : /storage/emulated/0/Android/data/com.chen.gradle/cache/test5</p>
</blockquote>
<h2 id="3-增加到provider"><a href="#3-增加到provider" class="headerlink" title="3.增加到provider"></a>3.增加<path></path>到provider</h2><p>通过<code>&lt;meta-data&gt;</code>标签将上面的filepath添加到provider当中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;provider</span><br><span class="line">    android:name=&quot;android.support.v4.content.FileProvider&quot;</span><br><span class="line">    android:authorities=&quot;com.mydomain.fileprovider&quot;</span><br><span class="line">    android:exported=&quot;false&quot;</span><br><span class="line">    android:grantUriPermissions=&quot;true&quot;&gt;</span><br><span class="line">    &lt;meta-data</span><br><span class="line">        android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</span><br><span class="line">        android:resource=&quot;@xml/file_paths&quot; /&gt;</span><br><span class="line">&lt;/provider&gt;</span><br></pre></td></tr></table></figure>
<h2 id="4-通过provider生成Uri"><a href="#4-通过provider生成Uri" class="headerlink" title="4.通过provider生成Uri"></a>4.通过provider生成Uri</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">File imagePath = new File(Context.getFilesDir(), &quot;test1&quot;);</span><br><span class="line">File newFile = new File(imagePath, &quot;default_image.jpg&quot;);</span><br><span class="line">Uri contentUri = FileProvider.getUriForFile(getContext(), &quot;com.mydomain.fileprovider&quot;, newFile);</span><br></pre></td></tr></table></figure>
<h2 id="5-赋予临时权限给Uri"><a href="#5-赋予临时权限给Uri" class="headerlink" title="5.赋予临时权限给Uri"></a>5.赋予临时权限给Uri</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br></pre></td></tr></table></figure>
<p>最终安装apk的代码变成这样:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void installApk(Context context, String apkPath) &#123;</span><br><span class="line">    if (context == null || TextUtils.isEmpty(apkPath)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    File file = new File(apkPath);</span><br><span class="line">    Intent intent = new Intent(Intent.ACTION_VIEW);</span><br><span class="line"></span><br><span class="line">    //判读版本是否在7.0以上</span><br><span class="line">    if (Build.VERSION.SDK_INT &gt;= 24) &#123;</span><br><span class="line">        //provider authorities</span><br><span class="line">        Uri apkUri = FileProvider.getUriForFile(context, &quot;com.mydomain.fileprovider&quot;, file);</span><br><span class="line">        //Granting Temporary Permissions to a URI</span><br><span class="line">        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class="line">        intent.setDataAndType(apkUri, &quot;application/vnd.android.package-archive&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        intent.setDataAndType(Uri.fromFile(file), &quot;application/vnd.android.package-archive&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    context.startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html" target="_blank" rel="external">Android 7.0 行为变更</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RecycleView实现Android树形列表控件]]></title>
      <url>http://czhzero.com/2016/12/07/treeview/</url>
      <content type="html"><![CDATA[<p>本文主要通过RecycleView实现了任意层次的树形ListView。实现的主要原理是通过保存两份List数据，一份是完整数据，一份是当前展开的数据来实现。再通过点击事件，控制展开数据的内容。同时也可根据需要选择模式，来支持单选和各种多选效果。</p>
<blockquote>
<p><a href="https://github.com/czhzero/MultipleTreeView" target="_blank" rel="external">TreeView项目地址</a></p>
</blockquote>
<a id="more"></a>
<h2 id="TreeView-Demo预览"><a href="#TreeView-Demo预览" class="headerlink" title="TreeView Demo预览"></a>TreeView Demo预览</h2><p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/015/device-2016-12-07-201436.png" alt=""></p>
<h2 id="TreeView主要源码解析"><a href="#TreeView主要源码解析" class="headerlink" title="TreeView主要源码解析"></a>TreeView主要源码解析</h2><ul>
<li><p>Node.java</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">public class Node&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">   public final static int TREE_LEAF = 0;  //树叶节点</span><br><span class="line">   public final static int TREE_NODE = 1;  //普通节点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 节点Id</span><br><span class="line">    */</span><br><span class="line">   private String id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 父节点Id</span><br><span class="line">    */</span><br><span class="line">   private String pId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 节点名称</span><br><span class="line">    */</span><br><span class="line">   private String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 节点类型, 0为树叶节点, 1为普通节点</span><br><span class="line">    */</span><br><span class="line">   private int type;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 节点级别, 根节点level = 0，子节点依次+1</span><br><span class="line">    */</span><br><span class="line">   private int level;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 父Node</span><br><span class="line">    */</span><br><span class="line">   private Node&lt;T&gt; parent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 下一级的子Node</span><br><span class="line">    */</span><br><span class="line">   private List&lt;Node&lt;T&gt;&gt; children;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 是否展开</span><br><span class="line">    */</span><br><span class="line">   private boolean isExpanded;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 是否被选中</span><br><span class="line">    */</span><br><span class="line">   private boolean isChecked;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 节点描述</span><br><span class="line">    */</span><br><span class="line">   private String label;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 节点信息其他内容</span><br><span class="line">    */</span><br><span class="line">   private T content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 节点前面的Icon</span><br><span class="line">    */</span><br><span class="line">   private int headDrawableId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 节点选中的Icon</span><br><span class="line">    */</span><br><span class="line">   private int checkDrawableId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public Node(String id, String pid, String name) &#123;</span><br><span class="line">       this.id = id;</span><br><span class="line">       this.pId = pid;</span><br><span class="line">       this.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ... 省略get set 方法</span><br></pre></td></tr></table></figure>
</li>
<li><p>TreeRecyclerView.java</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">public class TreeRecyclerView extends FrameLayout &#123;</span><br><span class="line"></span><br><span class="line">    public final static int MODE_SINGLE_SELECT = 1;        //单选模式</span><br><span class="line">    public final static int MODE_MULTI_SELECT = 2;         //无限制，多选模式</span><br><span class="line">    public final static int MODE_DEPEND_SELECT = 3;        //父子节点不可同选，多选模式</span><br><span class="line">    public final static int MODE_CLICK_SELECT = 4;         //选中跳转模式</span><br><span class="line"></span><br><span class="line">    private RecyclerView mRecyclerView;</span><br><span class="line">    private TreeRecyclerAdapter mAdapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public TreeRecyclerView(Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">        initView(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public TreeRecyclerView(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">        initView(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public TreeRecyclerView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">        super(context, attrs, defStyleAttr);</span><br><span class="line">        initView(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private void initView(Context context) &#123;</span><br><span class="line">        mRecyclerView = new RecyclerView(context);</span><br><span class="line">        mRecyclerView.setLayoutManager(new LinearLayoutManager(context));</span><br><span class="line">        LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);</span><br><span class="line">        addView(mRecyclerView, lp);</span><br><span class="line">        mAdapter = new TreeRecyclerAdapter&lt;&gt;(mRecyclerView.getContext());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化树形折叠控件数据</span><br><span class="line">     *</span><br><span class="line">     *</span><br><span class="line">     * T 类型 示例</span><br><span class="line">     *</span><br><span class="line">     * public static class TestModel &#123;</span><br><span class="line">     *</span><br><span class="line">     * @NodeId public String id;                    //必填字段</span><br><span class="line">     * @NodeName public String name;                  //必填字段</span><br><span class="line">     * @NodeLabel public String label;</span><br><span class="line">     * @NodePid public String parentId;              //父节点id</span><br><span class="line">     * @NodeChild public List&lt;TestModel&gt; child;        //child用来表示层级关系, child为空，则表示叶子节点</span><br><span class="line">     * ...</span><br><span class="line">     * others</span><br><span class="line">     * ...</span><br><span class="line">     * &#125;</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; void setData(List&lt;T&gt; list, int mode) &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Node&lt;T&gt;&gt; nodeList = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            nodeList = NodeDataConverter.convertToNodeList(list);</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        setMode(mode);</span><br><span class="line">        mAdapter.addAllData(nodeList);</span><br><span class="line">        mRecyclerView.setAdapter(mAdapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置点击事件, MODE_CLICK_SELECT模式下需要使用</span><br><span class="line">     */</span><br><span class="line">    public void setOnItemClickListener(OnNodeItemClickListener listener) &#123;</span><br><span class="line">        mAdapter.setOnItemClickListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取选中的内容</span><br><span class="line">     *</span><br><span class="line">     * @param &lt;T&gt;</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; void getSelectedItems(List&lt;T&gt; list) &#123;</span><br><span class="line">        mAdapter.getSelectedItems(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置折叠控件的选择模式</span><br><span class="line">     *</span><br><span class="line">     * @param mode</span><br><span class="line">     */</span><br><span class="line">    private void setMode(int mode) &#123;</span><br><span class="line">        if (mode != MODE_SINGLE_SELECT</span><br><span class="line">                &amp;&amp; mode != MODE_MULTI_SELECT</span><br><span class="line">                &amp;&amp; mode != MODE_DEPEND_SELECT</span><br><span class="line">                &amp;&amp; mode != MODE_CLICK_SELECT) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        mAdapter.setMode(mode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>TreeRecyclerAdapter.java</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line">class TreeRecyclerAdapter&lt;T&gt; extends RecyclerView.Adapter&lt;TreeBaseViewHolder&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private Context mContext;</span><br><span class="line">    private List&lt;Node&lt;T&gt;&gt; mVisibleNodes;</span><br><span class="line">    private List&lt;Node&lt;T&gt;&gt; mRootNodes;</span><br><span class="line">    private OnNodeItemClickListener mOnNodeItemClickListener;</span><br><span class="line">    private int mSelectMode = TreeRecyclerView.MODE_SINGLE_SELECT;</span><br><span class="line"></span><br><span class="line">    private OnNodeSwitchListener mOnNodeSwitchListener = new OnNodeSwitchListener() &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onExpand(Node node, int position) &#123;</span><br><span class="line">            NodeDataConverter.expandNode(NodeDataConverter.filterNodeById(node.getId(), mRootNodes));</span><br><span class="line">            rearrangeVisibleNodes();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onShrink(Node node, int position) &#123;</span><br><span class="line">            NodeDataConverter.shrinkNode(NodeDataConverter.filterNodeById(node.getId(), mRootNodes));</span><br><span class="line">            rearrangeVisibleNodes();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private OnNodeCheckListener mOnNodeCheckListener = new OnNodeCheckListener() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onCheck(boolean isChecked, int position, Node node) &#123;</span><br><span class="line">            if (mOnNodeItemClickListener != null) &#123;</span><br><span class="line">                mOnNodeItemClickListener.onItemClick(node.getContent());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            NodeDataConverter.checkNode(node.getId(), isChecked, mSelectMode, mVisibleNodes);</span><br><span class="line">            notifyDataSetChanged();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public TreeRecyclerAdapter(Context context) &#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mVisibleNodes = new ArrayList&lt;&gt;();</span><br><span class="line">        mRootNodes = new ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 填充数据</span><br><span class="line">     *</span><br><span class="line">     * @param nodes</span><br><span class="line">     */</span><br><span class="line">    public void addAllData(List&lt;Node&lt;T&gt;&gt; nodes) &#123;</span><br><span class="line"></span><br><span class="line">        if (nodes != null &amp;&amp; !nodes.isEmpty()) &#123;</span><br><span class="line">            mRootNodes.clear();</span><br><span class="line">            mRootNodes.addAll(nodes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (Node&lt;T&gt; item : nodes) &#123;</span><br><span class="line">            filterVisibleNodes(item);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置模式</span><br><span class="line">     *</span><br><span class="line">     * @param mode</span><br><span class="line">     */</span><br><span class="line">    public void setMode(int mode) &#123;</span><br><span class="line">        mSelectMode = mode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置点击事件</span><br><span class="line">     */</span><br><span class="line">    public void setOnItemClickListener(OnNodeItemClickListener listener) &#123;</span><br><span class="line">        mOnNodeItemClickListener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回当前选择数据</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public &lt;T&gt; void getSelectedItems(List&lt;T&gt; list) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Node&lt;T&gt;&gt; resultNodeList = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        for (Node item : mRootNodes) &#123;</span><br><span class="line">            resultNodeList.addAll(NodeDataConverter.filterCheckedNodeList(item));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (Node&lt;T&gt; item : resultNodeList) &#123;</span><br><span class="line">            list.add(item.getContent());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public TreeBaseViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</span><br><span class="line"></span><br><span class="line">        View view;</span><br><span class="line">        switch (viewType) &#123;</span><br><span class="line">            case Node.TREE_NODE:</span><br><span class="line">                view = LayoutInflater.from(mContext).inflate(</span><br><span class="line">                        R.layout.listitem_tree_node, parent, false);</span><br><span class="line">                return new TreeNodeViewHolder&lt;T&gt;(view);</span><br><span class="line">            case Node.TREE_LEAF:</span><br><span class="line">                view = LayoutInflater.from(mContext).inflate(</span><br><span class="line">                        R.layout.listitem_tree_leaf, parent, false);</span><br><span class="line">                return new TreeLeafViewHolder&lt;T&gt;(view);</span><br><span class="line">            default:</span><br><span class="line">                return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onBindViewHolder(TreeBaseViewHolder holder, int position) &#123;</span><br><span class="line"></span><br><span class="line">        switch (getItemViewType(position)) &#123;</span><br><span class="line">            case Node.TREE_NODE:</span><br><span class="line">                TreeNodeViewHolder&lt;T&gt; nodeViewHolder = (TreeNodeViewHolder&lt;T&gt;) holder;</span><br><span class="line">                nodeViewHolder.bindView(mVisibleNodes.get(position),</span><br><span class="line">                        position, mOnNodeSwitchListener, mOnNodeCheckListener);</span><br><span class="line">                break;</span><br><span class="line">            case Node.TREE_LEAF:</span><br><span class="line">                TreeLeafViewHolder&lt;T&gt; leafViewHolder = (TreeLeafViewHolder&lt;T&gt;) holder;</span><br><span class="line">                leafViewHolder.bindView(mVisibleNodes.get(position),</span><br><span class="line">                        position, mOnNodeCheckListener);</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemCount() &#123;</span><br><span class="line">        return mVisibleNodes.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemViewType(int position) &#123;</span><br><span class="line">        return mVisibleNodes.get(position).getType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据visible属性，重新刷新，可视节点</span><br><span class="line">     */</span><br><span class="line">    private void rearrangeVisibleNodes() &#123;</span><br><span class="line"></span><br><span class="line">        if (mRootNodes == null || mRootNodes.size() &lt;= 0) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mVisibleNodes.clear();</span><br><span class="line"></span><br><span class="line">        for (Node&lt;T&gt; node : mRootNodes) &#123;</span><br><span class="line">            filterVisibleNodes(node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将展开节点归结到可视节点中, 递归总是从根节点开始</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private void filterVisibleNodes(Node&lt;T&gt; node) &#123;</span><br><span class="line">        mVisibleNodes.add(node);</span><br><span class="line">        if (node.isExpanded()) &#123;</span><br><span class="line">            if (node.getChildren() != null) &#123;</span><br><span class="line">                for (Node&lt;T&gt; item : node.getChildren()) &#123;</span><br><span class="line">                    filterVisibleNodes(item);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Viewholder</p>
<ul>
<li><p>TreeBaseViewHolder.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class TreeBaseViewHolder extends RecyclerView.ViewHolder &#123;</span><br><span class="line"></span><br><span class="line">   protected int mLevelMargin;</span><br><span class="line"></span><br><span class="line">   protected TreeBaseViewHolder(View itemView) &#123;</span><br><span class="line">       super(itemView);</span><br><span class="line">       mLevelMargin = 30;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   protected void setChecked(View view, boolean isChecked) &#123;</span><br><span class="line">       if (isChecked) &#123;</span><br><span class="line">           view.setVisibility(View.VISIBLE);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           view.setVisibility(View.GONE);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>- TreeLeafViewHolder.java

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public class TreeLeafViewHolder&lt;T&gt; extends TreeBaseViewHolder &#123;</span><br><span class="line"></span><br><span class="line">   private RelativeLayout rl_content;</span><br><span class="line">   private TextView tv_name;</span><br><span class="line">   private TextView tv_label;</span><br><span class="line">   private ImageView iv_checkbox;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public TreeLeafViewHolder(View itemView) &#123;</span><br><span class="line">       super(itemView);</span><br><span class="line">       rl_content = (RelativeLayout) itemView.findViewById(R.id.rl_content);</span><br><span class="line">       tv_name = (TextView) itemView.findViewById(R.id.tv_name);</span><br><span class="line">       tv_label = (TextView) itemView.findViewById(R.id.tv_label);</span><br><span class="line">       iv_checkbox = (ImageView) itemView.findViewById(R.id.iv_checkbox);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public void bindView(final Node&lt;T&gt; node,</span><br><span class="line">                        final int position,</span><br><span class="line">                        final OnNodeCheckListener onNodeCheckListener) &#123;</span><br><span class="line"></span><br><span class="line">       //根据节点层级，进行缩进处理</span><br><span class="line">       RecyclerView.LayoutParams params = (RecyclerView.LayoutParams)</span><br><span class="line">               rl_content.getLayoutParams();</span><br><span class="line">       params.leftMargin = mLevelMargin * node.getLevel();</span><br><span class="line"></span><br><span class="line">       rl_content.setLayoutParams(params);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //设置节点名称</span><br><span class="line">       tv_name.setText(node.getName());</span><br><span class="line"></span><br><span class="line">       //设置节点描述</span><br><span class="line">       tv_label.setText(node.getLabel());</span><br><span class="line"></span><br><span class="line">       //设置节点选中状态</span><br><span class="line">       setChecked(iv_checkbox, node.isChecked());</span><br><span class="line"></span><br><span class="line">       rl_content.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onClick(View v) &#123;</span><br><span class="line">               if (onNodeCheckListener != null) &#123;</span><br><span class="line">                   onNodeCheckListener.onCheck(!node.isChecked(), position, node);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


- TreeNodeViewHolder.java

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">public class TreeNodeViewHolder&lt;T&gt; extends TreeBaseViewHolder &#123;</span><br><span class="line"></span><br><span class="line">   private RelativeLayout rl_content;</span><br><span class="line">   private ImageView iv_icon;</span><br><span class="line">   private TextView tv_name;</span><br><span class="line">   private TextView tv_label;</span><br><span class="line">   private ImageView iv_checkbox;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public TreeNodeViewHolder(View itemView) &#123;</span><br><span class="line">       super(itemView);</span><br><span class="line">       rl_content = (RelativeLayout) itemView.findViewById(R.id.rl_content);</span><br><span class="line">       tv_name = (TextView) itemView.findViewById(R.id.tv_name);</span><br><span class="line">       iv_icon = (ImageView) itemView.findViewById(R.id.iv_icon);</span><br><span class="line">       tv_label = (TextView) itemView.findViewById(R.id.tv_label);</span><br><span class="line">       iv_checkbox = (ImageView) itemView.findViewById(R.id.iv_checkbox);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void bindView(final Node&lt;T&gt; node,</span><br><span class="line">                        final int position,</span><br><span class="line">                        final OnNodeSwitchListener onNodeSwitchListener,</span><br><span class="line">                        final OnNodeCheckListener onNodeCheckListener) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //根据节点层级，进行缩进处理</span><br><span class="line">       RecyclerView.LayoutParams params = (RecyclerView.LayoutParams)</span><br><span class="line">               rl_content.getLayoutParams();</span><br><span class="line">       params.leftMargin = mLevelMargin * node.getLevel();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       rl_content.setLayoutParams(params);</span><br><span class="line"></span><br><span class="line">       //设置节点名称</span><br><span class="line">       tv_name.setText(node.getName());</span><br><span class="line"></span><br><span class="line">       //设置节点描述</span><br><span class="line">       tv_label.setText(node.getLabel());</span><br><span class="line"></span><br><span class="line">       //设置节点选中状态</span><br><span class="line">       setChecked(iv_checkbox, node.isChecked());</span><br><span class="line"></span><br><span class="line">       //设置节点展开状态</span><br><span class="line">       setExpanded(iv_icon, node.isExpanded());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       iv_icon.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onClick(View v) &#123;</span><br><span class="line"></span><br><span class="line">               if (node.isExpanded()) &#123;</span><br><span class="line">                   onNodeSwitchListener.onShrink(node, position);</span><br><span class="line">                   rotationExpandIcon(iv_icon, 0, -90);</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   onNodeSwitchListener.onExpand(node, position);</span><br><span class="line">                   rotationExpandIcon(iv_icon, -90, 0);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       rl_content.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onClick(View v) &#123;</span><br><span class="line">               if (onNodeCheckListener != null) &#123;</span><br><span class="line">                   onNodeCheckListener.onCheck(!node.isChecked(), position, node);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 设置展开图标效果</span><br><span class="line">    *</span><br><span class="line">    * @param view</span><br><span class="line">    * @param isExpanded</span><br><span class="line">    */</span><br><span class="line">   private void setExpanded(View view, boolean isExpanded) &#123;</span><br><span class="line">       if (isExpanded) &#123;</span><br><span class="line">           view.setRotation(0);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           view.setRotation(-90);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * 根据角度选择图标</span><br><span class="line">    *</span><br><span class="line">    * @param view</span><br><span class="line">    * @param from</span><br><span class="line">    * @param to</span><br><span class="line">    */</span><br><span class="line">   private void rotationExpandIcon(final View view, final float from, final float to) &#123;</span><br><span class="line">       if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class="line">           ValueAnimator valueAnimator = ValueAnimator.ofFloat(from, to);</span><br><span class="line">           valueAnimator.setDuration(150);</span><br><span class="line">           valueAnimator.setInterpolator(new DecelerateInterpolator());</span><br><span class="line">           valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">               @Override</span><br><span class="line">               public void onAnimationUpdate(ValueAnimator valueAnimator) &#123;</span><br><span class="line">                   view.setRotation((Float) valueAnimator.getAnimatedValue());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">           valueAnimator.start();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android删除文件"Device or resource busy"错误解决方案]]></title>
      <url>http://czhzero.com/2016/12/02/android-deletefile/</url>
      <content type="html"><![CDATA[<p>Android开发过程中，进行文件操作时，可以通过Java的File类进行文件删除，也可以通过向Runtime发送shell命令进行删除。</p>
<p>当删除一个文件，再重新下载这个同名文件，保存到手机内存储时，可能会出现如下错误。</p>
<blockquote>
<p> EBUSY (Device or resource busy)</p>
</blockquote>
<a id="more"></a>
<p>检查sdcard存储，会发现下载目录下回出现一个时间为<code>1970-01-01</code>的文件。在adb shell 下可以通过<code>ls</code>命令查看到该文件，但是 执行 <code>ls -la</code> 无法查看到该文件。</p>
<p>尝试通过以下两种方法删除该文件，都无法删除该文件。通过一些android文件管理软件，也无法删除。 网上查阅资料，无法删除的原因是有进程在操作该文件，无法释放该文件。</p>
<blockquote>
<p>一旦出现这种文件只有强行 <code>kill -9</code> 或者 重启设备, 才能删除。</p>
</blockquote>
<h2 id="通过File类删除"><a href="#通过File类删除" class="headerlink" title="通过File类删除"></a>通过File类删除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private static boolean deleteDir(File dir) &#123;</span><br><span class="line"></span><br><span class="line">    if (dir.isDirectory()) &#123;</span><br><span class="line"></span><br><span class="line">        String[] children = dir.list();</span><br><span class="line"></span><br><span class="line">        //递归删除</span><br><span class="line">        for (int i = 0; i &lt; children.length; i++) &#123;</span><br><span class="line">            boolean success = deleteDir(new File(dir, children[i]));</span><br><span class="line">            if (!success) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 目录此时为空，可以删除</span><br><span class="line">    return dir.delete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通过Shell命令删除"><a href="#通过Shell命令删除" class="headerlink" title="通过Shell命令删除"></a>通过Shell命令删除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">import android.util.Log;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.DataOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by chenzhaohua on 16/12/1.</span><br><span class="line"> */</span><br><span class="line">public class CommandExecution &#123;</span><br><span class="line"></span><br><span class="line">    public static final String TAG = &quot;czh&quot;;</span><br><span class="line"></span><br><span class="line">    public final static String COMMAND_SU = &quot;su&quot;;</span><br><span class="line">    public final static String COMMAND_SH = &quot;sh&quot;;</span><br><span class="line">    public final static String COMMAND_EXIT = &quot;exit\n&quot;;</span><br><span class="line">    public final static String COMMAND_LINE_END = &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * result</span><br><span class="line">     */</span><br><span class="line">    public static class CommandResult &#123;</span><br><span class="line">        public int result = -1;</span><br><span class="line">        public String errorMsg;</span><br><span class="line">        public String successMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * excute single command</span><br><span class="line">     *</span><br><span class="line">     * @param command      &quot;rm -rf /storage/emulated/legacy/Android/data/test&quot;</span><br><span class="line">     * @param isRoot        </span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static CommandResult execCommand(String command, boolean isRoot) &#123;</span><br><span class="line">        String[] commands = &#123;command&#125;;</span><br><span class="line">        return execCommand(commands, isRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * excute multiple command</span><br><span class="line">     *</span><br><span class="line">     * @param commands</span><br><span class="line">     * @param isRoot</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static CommandResult execCommand(String[] commands, boolean isRoot) &#123;</span><br><span class="line"></span><br><span class="line">        CommandResult commandResult = new CommandResult();</span><br><span class="line"></span><br><span class="line">        if (commands == null || commands.length == 0) &#123;</span><br><span class="line">            return commandResult;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Process process = null;</span><br><span class="line">        DataOutputStream os = null;</span><br><span class="line">        BufferedReader successResult = null;</span><br><span class="line">        BufferedReader errorResult = null;</span><br><span class="line">        StringBuilder successMsg = new StringBuilder();</span><br><span class="line">        StringBuilder errorMsg = new StringBuilder();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            process = Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);</span><br><span class="line"></span><br><span class="line">            os = new DataOutputStream(process.getOutputStream());</span><br><span class="line"></span><br><span class="line">            for (String command : commands) &#123;</span><br><span class="line">                if (command != null) &#123;</span><br><span class="line">                    os.write(command.getBytes());</span><br><span class="line">                    os.writeBytes(COMMAND_LINE_END);</span><br><span class="line">                    os.flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            os.writeBytes(COMMAND_EXIT);</span><br><span class="line">            os.flush();</span><br><span class="line"></span><br><span class="line">            commandResult.result = process.waitFor();</span><br><span class="line">            successResult = new BufferedReader(new InputStreamReader(process.getInputStream()));</span><br><span class="line">            errorResult = new BufferedReader(new InputStreamReader(process.getErrorStream()));</span><br><span class="line"></span><br><span class="line">            String s;</span><br><span class="line">            while ((s = successResult.readLine()) != null) &#123;</span><br><span class="line">                successMsg.append(s);</span><br><span class="line">            &#125;</span><br><span class="line">            while ((s = errorResult.readLine()) != null) &#123;</span><br><span class="line">                errorMsg.append(s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            commandResult.successMsg = successMsg.toString();</span><br><span class="line">            commandResult.errorMsg = errorMsg.toString();</span><br><span class="line"></span><br><span class="line">            Log.i(TAG, commandResult.result + &quot; | &quot; + commandResult.successMsg</span><br><span class="line">                    + &quot; | &quot; + commandResult.errorMsg);</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            String msg = e.getMessage();</span><br><span class="line">            if (msg != null) &#123;</span><br><span class="line">                Log.e(TAG, msg);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //close stream</span><br><span class="line">                if (os != null) &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125;</span><br><span class="line">                if (successResult != null) &#123;</span><br><span class="line">                    successResult.close();</span><br><span class="line">                &#125;</span><br><span class="line">                if (errorResult != null) &#123;</span><br><span class="line">                    errorResult.close();</span><br><span class="line">                &#125;</span><br><span class="line">                if (process != null) &#123;</span><br><span class="line">                    process.destroy();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                String msg = e.getMessage();</span><br><span class="line">                if (msg != null) &#123;</span><br><span class="line">                    Log.e(TAG, msg);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return commandResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>stackoverflow一种解决方案:先对要删除的文件进行重命名，然后再删除。这样删除过程中的文件锁就加在另一个文件上了，不会影响再次创建的过程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">final File to = new File(file.getAbsolutePath() + System.currentTimeMillis());  </span><br><span class="line">file.renameTo(to);  </span><br><span class="line">to.delete();</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<p><a href="http://stackoverflow.com/questions/11539657/open-failed-ebusy-device-or-resource-busy" target="_blank" rel="external">open-failed-ebusy-device-or-resource-busy</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo加载vendor目录下js文件失败导致博客页面加载空白]]></title>
      <url>http://czhzero.com/2016/11/16/hexo-js-loadingfailure/</url>
      <content type="html"><![CDATA[<p>今天下午用hexo框架deploy一篇文章，发布完成后，发现网页无法打开了。出现了很多404错误。</p>
<p>各种vender目录下的js加载都是失败的。本地部署是没有问题的，一旦上传到托管平台github或者coding后，就无法找到这些js文件。折腾了半天，网上搜资料才知道原来我的代码托管平台把vender目录禁止了。</p>
<a id="more"></a>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/014/jserror.png" alt=""></p>
<p>网上有两种解决方案:</p>
<ul>
<li>手动修改</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">首先修改source/vendors为source/lib，然后修改_config.yml，将 _internal: vendors修改为_internal:lib，然后修改next底下所有引用source/vendors路径为source/lib。</span><br><span class="line">这些地方可以通过文件查找找出来。主要集中在这几个文件中。</span><br><span class="line">1. Hexo\themes\next.bowerrc </span><br><span class="line">2. Hexo\themes\next.gitignore </span><br><span class="line">3. Hexo\themes\next.javascript_ignore </span><br><span class="line">4. Hexo\themes\next\bower.json 。</span><br></pre></td></tr></table></figure>
<ul>
<li>更新next主题</li>
</ul>
<p>next新主题代码，已经将vender目录改为了lib目录，不过更新之前，要对自己的私人配置进行保存。</p>
<p>参考文章: <a href="https://www.zhihu.com/question/52272170/answer/129909383" target="_blank" rel="external">hexo+Github Page搭建的博客无法加载样式表？</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio常用快捷键汇总]]></title>
      <url>http://czhzero.com/2016/11/16/AndroidStudio-KeyboardKeymap/</url>
      <content type="html"><![CDATA[<p>Android Studio 是基于 IntelliJ IDEA 的官方 Android 应用开发集成开发环境 (IDE)。本篇总结了部分Android Studio常用的快捷键。</p>
<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul>
<li>普通补全代码</li>
</ul>
<p>使用快捷键 <code>Control+Space</code> 。显示对变量、类型、方法和表达式等的基本建议。 如果连续两次调用基本自动完成，将显示更多结果，包括私有成员和非导入静态成员。</p>
<ul>
<li>智能代码补全</li>
</ul>
<p>使用快捷键 <code>Control+Shift+空格</code> 。根据上下文显示相关选项。 智能自动完成可识别预期类型和数据流。 如果连续两次调用智能自动完成，将显示更多结果，包括链。</p>
<ul>
<li>语句自动完成</li>
</ul>
<p>使用快捷键 <code>Shift+Command+Enter</code> 。 自动完成当前语句，添加缺失的圆括号、大括号、花括号和格式化等。</p>
<ul>
<li>执行代码快速修复并显示建议的操作，用来补全代码</li>
</ul>
<p>使用快捷键 <code>Alt+Enter</code> 可以进行快速修复，补全代码。 例如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//光标移动到OnClickListener处，执行快捷键补全。</span><br><span class="line">View.OnClickListener() &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>自动代码生成</li>
</ul>
<p>使用 <code>Command + N</code> 自动生成一些代码，如getters, setters, constructors, hashCode/equals, toString, override 等， 同时也包括一些自定义插件，如GsonFormat,Parcelable等</p>
<ul>
<li>Override methods</li>
</ul>
<p><code>Control + O</code></p>
<ul>
<li>Implement methods</li>
</ul>
<p><code>Control + I</code></p>
<ul>
<li>删除光标所在行的全部内容</li>
</ul>
<p><code>Command + Backspace</code></p>
<ul>
<li>展开或者关闭当前代码块</li>
</ul>
<p><code>Command + minus/plus</code></p>
<ul>
<li>展开或者关闭所有代码块</li>
</ul>
<p><code>Command + Shift + minus/plus</code></p>
<ul>
<li>复制选中的行内容</li>
</ul>
<p><code>Command + D</code></p>
<ul>
<li>跳转到代码声明处</li>
</ul>
<p><code>Command + B or Command + Click</code></p>
<ul>
<li>跳转到代码实现处</li>
</ul>
<p><code>Command + Alt + B</code></p>
<ul>
<li>跳转到超类，或者父方法。</li>
</ul>
<p><code>Command + U</code></p>
<h2 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h2><ul>
<li>Build</li>
</ul>
<p><code>Command + F9</code></p>
<ul>
<li>Build and run</li>
</ul>
<p><code>Control + R</code></p>
<h2 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h2><ul>
<li>Extract method    </li>
</ul>
<p><code>Command + Option + M</code></p>
<ul>
<li>Extract variable</li>
</ul>
<p><code>Command + Option + V</code></p>
<ul>
<li>Extract field</li>
</ul>
<p><code>Command + Option + F</code></p>
<ul>
<li>Extract constant</li>
</ul>
<p><code>Command + Option + C</code></p>
<ul>
<li>Extract parameter</li>
</ul>
<p><code>Command + Option + P</code></p>
<h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><ul>
<li>查看最近访问文件</li>
</ul>
<p>使用最近文件操作在最近访问的文件之间切换。按 Control+E（在 Mac 上，按 Command+E）调出“最近文件”操作。 默认情况下将选择最后一次访问的文件。 在此操作中您还可以通过左侧列访问任何工具窗口。</p>
<ul>
<li>查看当前文件的结构，快速定位具体代码</li>
</ul>
<p>使用文件结构操作查看当前文件的结构。 按 Control+F12（在 Mac 上，按 Command+F12）调出“文件结构”操作。您可以使用此操作快速导航至当前文件的任何部分。</p>
<ul>
<li>在项目中搜索指定类</li>
</ul>
<p>使用导航至类操作搜索并导航至项目中的特定类。 按 Control+N（在 Mac 上，按 Command+O）调出此操作。 “导航至类”支持复杂的表达式，包括驼峰、路径、直线导航和中间名匹配等。 如果连续两次调用此操作，将显示项目类以外的结果。</p>
<ul>
<li>在项目中搜索指定的文件或者文件夹</li>
</ul>
<p>使用导航至文件操作导航至文件或文件夹。 按 Control+Shift+N（在 Mac 上，按 Command+Shift+O）调出“导航至文件”操作。要搜索文件夹，但不搜索文件，请在表达式末尾添加“/”。</p>
<ul>
<li>Find Usages</li>
</ul>
<p>按 Alt+F7 查找引用当前光标位置处的类、方法、字段、参数或语句的所有代码片段。</p>
<ul>
<li>项目搜索</li>
</ul>
<p>使用 <code>Command + F</code> 搜当前文件的文本内容， 使用 <code>Command + Shift + F</code> 搜索整个项目。</p>
<ul>
<li>项目搜索并替换</li>
</ul>
<p>使用 <code>Command + R</code> 搜当前文件并替换， 使用 <code>Command + Shift + R</code> 搜索并替换整个项目。</p>
<ul>
<li>Jump to source    </li>
</ul>
<p>使用 <code>Command + 鼠标按下</code> 跳转到代码部分</p>
<ul>
<li>Search everything</li>
</ul>
<p>搜索所有东西，连续按两次Shift。搜索全项目所有文件。</p>
<ul>
<li>跳转到上次更改的代码位置</li>
</ul>
<p><code>Command + Shift + Backspace</code> 跳转到上次更改的位置，不用拖动鼠标在找到之前的位置。</p>
<ul>
<li>跳转到指定代码行</li>
</ul>
<p><code>Command + L</code></p>
<ul>
<li>Open type hierarchy</li>
</ul>
<p><code>Control + H</code></p>
<ul>
<li>Open method hierarchy</li>
</ul>
<p><code>Command + Shift + H</code></p>
<ul>
<li>Open call hierarchy</li>
</ul>
<p><code>Command + Shift + H</code></p>
<h2 id="样式和格式化"><a href="#样式和格式化" class="headerlink" title="样式和格式化"></a>样式和格式化</h2><p>在您编辑时，Android Studio 将自动应用代码样式设置中指定的格式设置和样式。您可以通过编程语言自定义代码样式设置，包括指定选项卡和缩进、空格、换行、花括号以及空白行的约定。要自定义代码样式设置，请点击 File &gt; Settings &gt; Editor &gt; Code Style（在 Mac 上，点击 Android Studio &gt; Preferences &gt; Editor &gt; Code Style）。</p>
<p>虽然 IDE 会在您工作时自动应用格式化，但您也可以通过按 Control+Alt+L（在 Mac 上，按 Opt+Command+L）显式调用重新格式化代码操作，或按 Control+Alt+I（在 Mac 上，按 Alt+Option+I*）自动缩进所有行。</p>
<h2 id="版本控制基础知识"><a href="#版本控制基础知识" class="headerlink" title="版本控制基础知识"></a>版本控制基础知识</h2><p>Android Studio 支持多个版本控制系统 (VCS)，包括 Git、GitHub、CVS、Mercurial、Subversion 和 Google Cloud Source Repositories。</p>
<p>在将您的应用导入 Android Studio 后，使用 Android Studio VCS 菜单选项启用对所需版本控制系统的 VCS 支持、创建存储库、导入新文件至版本控制以及执行其他版本控制操作。</p>
<ul>
<li>在 Android Studio VCS 菜单中点击 Enable Version Control Integration。</li>
<li>从下拉菜单中选择要与项目根目录关联的版本控制系统，然后点击 OK。</li>
</ul>
<p>此时，VCS 菜单将根据您选择的系统显示多个版本控制选项。</p>
<blockquote>
<p>注： 您还可以使用 File &gt; Settings &gt; Version Control 菜单选项设置和修改版本控制设置。</p>
</blockquote>
<p>更多快捷键相关的请参考:</p>
<p><a href="https://developer.android.com/studio/intro/keyboard-shortcuts.html" target="_blank" rel="external">Keyboard Shortcuts</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[快速分享Android Library项目到jcenter]]></title>
      <url>http://czhzero.com/2016/10/24/how-to-upload-library-to-jcenter/</url>
      <content type="html"><![CDATA[<p>如果你想在Android Studio中引入一个library到你的项目，你只需添加如下的一行代码到模块的build.gradle文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile &apos;org.chen.statusbar:statusbar:1.0.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>上面的例子中，引用的library内容，包含了3部分信息</p>
<blockquote>
<p>GROUP_ID:ARTIFACT_ID:VERSION</p>
</blockquote>
<p>其中，GROUP_ID是 <code>org.chen.statusbar</code> , ARTIFACT_ID 是 <code>statusbar</code>, VERSION是<code>1.0.0</code>。添加这行代码后，点击Android Studio的sync按钮，你就可以在项目的 <code>External Libraries</code> 目录下看到 <code>statusbar-1.0.0</code> 这个Library包，并引用其中的代码了。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/012/%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%872.png" alt=""></p>
<p>Android Studio是从build.gradle里面定义的Maven 仓库服务器上下载library的。Apache Maven是Apache开发的一个工具，提供了用于贡献library的文件服务器。总的来说，只有两个标准的Android library文件服务器：jcenter 和  Maven Central。随着Android Studio升级换代，目前默认Android Studio默认配置，只有jcenter了。推荐使用jcenter。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么如何上传到jcenter呢？</p>
<h2 id="注册Bintray账号"><a href="#注册Bintray账号" class="headerlink" title="注册Bintray账号"></a>注册Bintray账号</h2><p>Bintray是jcenter的托管商, Bintray是jcenter的托管商，因此你必须注册一个Bintray账号，注册完成后，进入账户管理界面，记录下username 和 api_key。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/012/%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%871.png" alt="账号密码"></p>
<h2 id="在Bintray网站上，创建package"><a href="#在Bintray网站上，创建package" class="headerlink" title="在Bintray网站上，创建package"></a>在Bintray网站上，创建package</h2><ul>
<li>点击maven</li>
</ul>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/012/%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%874.png" alt=""></p>
<ul>
<li><p>Add new package<br><img src="http://o7y1sf21i.bkt.clouddn.com/blog/012/%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%875.png" alt=""></p>
</li>
<li><p>Create Package<br><img src="http://o7y1sf21i.bkt.clouddn.com/blog/012/%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%873.png" alt=""></p>
</li>
</ul>
<p>注意这里的Version control是必填的，所以在上传类库到bintray之前最好是把项目push到github上，这样就会很方便了。</p>
<h2 id="创建Android-Studio项目"><a href="#创建Android-Studio项目" class="headerlink" title="创建Android Studio项目"></a>创建Android Studio项目</h2><p>创建一个Android Studio项目， 并新建一个module模块， 如下图所示，我创建了一个名为statusbar的库, 用于上传。<br>这个library会被自动打包成aar文件，上传到jcenter。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/012/%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%876.png" alt=""></p>
<h2 id="配置项目根目录的build-gradle文件"><a href="#配置项目根目录的build-gradle文件" class="headerlink" title="配置项目根目录的build.gradle文件"></a>配置项目根目录的build.gradle文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">    </span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:2.0.0&apos;</span><br><span class="line"></span><br><span class="line">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        // in the individual module build.gradle files</span><br><span class="line"></span><br><span class="line">		 //增加两个插件</span><br><span class="line">		 //android-maven-gradle-plugin插件是用来打包Maven所需文件的</span><br><span class="line">		 //gradle-bintray-plugin插件是用来将生成的Maven所需文件上传到Bintray的</span><br><span class="line">        classpath &apos;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2&apos;</span><br><span class="line">        classpath &apos;com.github.dcendents:android-maven-gradle-plugin:1.3&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置待上传的Android-Library的gradle文件"><a href="#配置待上传的Android-Library的gradle文件" class="headerlink" title="配置待上传的Android Library的gradle文件"></a>配置待上传的Android Library的gradle文件</h2><p>在Android Library目录下需要增改如下几个文件。</p>
<blockquote>
<p>install.gradle<br>bintray.gradle<br>dependencies.gradle<br>build.gradle<br>local.properties</p>
</blockquote>
<h3 id="install-gradle"><a href="#install-gradle" class="headerlink" title="install.gradle"></a>install.gradle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.github.dcendents.android-maven&apos;</span><br><span class="line">apply from: &apos;dependencies.gradle&apos;</span><br><span class="line"></span><br><span class="line">group = publishedGroupId   // Maven Group ID for the artifact</span><br><span class="line"></span><br><span class="line">install &#123;</span><br><span class="line">    repositories.mavenInstaller &#123;</span><br><span class="line"></span><br><span class="line">        // This generates POM.xml with proper parameters</span><br><span class="line"></span><br><span class="line">        pom &#123;</span><br><span class="line">            project &#123;</span><br><span class="line">                packaging &apos;aar&apos;</span><br><span class="line">                groupId publishedGroupId</span><br><span class="line">                artifactId artifact</span><br><span class="line"></span><br><span class="line">                // Add your description here</span><br><span class="line">                name libraryName</span><br><span class="line">                description libraryDescription</span><br><span class="line">                url siteUrl</span><br><span class="line"></span><br><span class="line">                // Set your license</span><br><span class="line">                licenses &#123;</span><br><span class="line">                    license &#123;</span><br><span class="line">                        name licenseName</span><br><span class="line">                        url licenseUrl</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                developers &#123;</span><br><span class="line">                    developer &#123;</span><br><span class="line">                        id developerId</span><br><span class="line">                        name developerName</span><br><span class="line">                        email developerEmail</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                scm &#123;</span><br><span class="line">                    connection gitUrl</span><br><span class="line">                    developerConnection gitUrl</span><br><span class="line">                    url siteUrl</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bintray-gradle"><a href="#bintray-gradle" class="headerlink" title="bintray.gradle"></a>bintray.gradle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.jfrog.bintray&apos;</span><br><span class="line">apply from: &apos;dependencies.gradle&apos;</span><br><span class="line"></span><br><span class="line">version = libraryVersion</span><br><span class="line"></span><br><span class="line">if (project.hasProperty(&quot;android&quot;)) &#123; // Android libraries</span><br><span class="line">    task sourcesJar(type: Jar) &#123;</span><br><span class="line">        classifier = &apos;sources&apos;</span><br><span class="line">        from android.sourceSets.main.java.srcDirs</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    task javadoc(type: Javadoc) &#123;</span><br><span class="line">        source = android.sourceSets.main.java.srcDirs</span><br><span class="line">        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123; // Java libraries</span><br><span class="line">    task sourcesJar(type: Jar, dependsOn: classes) &#123;</span><br><span class="line">        classifier = &apos;sources&apos;</span><br><span class="line">        from sourceSets.main.allSource</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task javadocJar(type: Jar, dependsOn: javadoc) &#123;</span><br><span class="line">    classifier = &apos;javadoc&apos;</span><br><span class="line">    from javadoc.destinationDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">artifacts &#123;</span><br><span class="line">    archives javadocJar</span><br><span class="line">    archives sourcesJar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Bintray</span><br><span class="line">Properties properties = new Properties()</span><br><span class="line">properties.load(project.rootProject.file(&apos;local.properties&apos;).newDataInputStream())</span><br><span class="line"></span><br><span class="line">bintray &#123;</span><br><span class="line">    user = properties.getProperty(&quot;bintray.user&quot;)</span><br><span class="line">    key = properties.getProperty(&quot;bintray.apikey&quot;)</span><br><span class="line"></span><br><span class="line">    configurations = [&apos;archives&apos;]</span><br><span class="line"></span><br><span class="line">    pkg &#123;</span><br><span class="line">        repo = bintrayRepo</span><br><span class="line">        name = bintrayName</span><br><span class="line">        desc = libraryDescription</span><br><span class="line">        websiteUrl = siteUrl</span><br><span class="line">        vcsUrl = gitUrl</span><br><span class="line">        licenses = allLicenses</span><br><span class="line">        publish = true</span><br><span class="line">        publicDownloadNumbers = true</span><br><span class="line"></span><br><span class="line">        version &#123;</span><br><span class="line">            desc = libraryDescription</span><br><span class="line">            gpg &#123;</span><br><span class="line">            		//Optional. The passphrase for GPG signing&apos;</span><br><span class="line">                sign = false //Determines whether to GPG sign the files. The default is false</span><br><span class="line">                passphrase = properties.getProperty(&quot;bintray.gpg.password&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="dependencies-gradle"><a href="#dependencies-gradle" class="headerlink" title="dependencies.gradle"></a>dependencies.gradle</h3><p>这个文件主要用来保存一些项目信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">project.ext &#123;</span><br><span class="line"></span><br><span class="line">    bintrayRepo = &apos;maven&apos;</span><br><span class="line">    bintrayName = &apos;statusbar&apos;			//与bintray中新建的项目名称相同</span><br><span class="line"></span><br><span class="line">    publishedGroupId = &apos;org.chen.statusbar&apos;</span><br><span class="line">    libraryName = &apos;statusbar&apos;       	//确保与android studio里面library名称相同</span><br><span class="line">    artifact = &apos;statusbar&apos;				//确保与android studio里面library名称相同</span><br><span class="line"></span><br><span class="line">    libraryDescription = &apos;Android System Status Bar&apos;</span><br><span class="line"></span><br><span class="line">    siteUrl = &apos;https://github.com/czhzero/AndroidSystemStatusBar&apos;</span><br><span class="line">    gitUrl = &apos;https://github.com/czhzero/AndroidSystemStatusBar.git&apos;</span><br><span class="line"></span><br><span class="line">    libraryVersion = &apos;1.0.0&apos;</span><br><span class="line"></span><br><span class="line">    developerId = &apos;czhzero&apos;</span><br><span class="line">    developerName = &apos;chen&apos;</span><br><span class="line">    developerEmail = &apos;czhpxl007@163.com&apos;</span><br><span class="line"></span><br><span class="line">    licenseName = &apos;The Apache Software License, Version 2.0&apos;</span><br><span class="line">    licenseUrl = &apos;http://www.apache.org/licenses/LICENSE-2.0.txt&apos;</span><br><span class="line">    allLicenses = [&quot;Apache-2.0&quot;]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><p>在library中的build.gradle文件下，增加下面两句引用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apply from: &apos;install.gradle&apos;</span><br><span class="line">apply from: &apos;bintray.gradle&apos;</span><br></pre></td></tr></table></figure>
<h3 id="local-properties"><a href="#local-properties" class="headerlink" title="local.properties"></a>local.properties</h3><p>在local.properties文件中，增加如下字段。因为这两个字段是敏感信息，所以建议将这些信息放到项目本地文件中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bintray.user=你的用户名,不是邮箱</span><br><span class="line">bintray.apikey=你的bintray账号的apikey</span><br></pre></td></tr></table></figure>
<h2 id="执行命令打包并上传到Bintray"><a href="#执行命令打包并上传到Bintray" class="headerlink" title="执行命令打包并上传到Bintray"></a>执行命令打包并上传到Bintray</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//进入项目根目录</span><br><span class="line">&gt; ./gradlew :模块名:install  </span><br><span class="line">&gt; ./gradlew :模块名:bintrayUpload  </span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&gt; gradlew :模块名:install  </span><br><span class="line">&gt; gradlew :模块名:bintrayUpload</span><br></pre></td></tr></table></figure>
<p>命令执行成功后，会返回 <code>build successful</code> 字样。</p>
<h2 id="同步library文件到jcenter"><a href="#同步library文件到jcenter" class="headerlink" title="同步library文件到jcenter"></a>同步library文件到jcenter</h2><p>前面所有步骤走完之后实际上只是上传了你的项目到Bintray而已，并没有被包含在jcenter中，要想提交到jcenter中还需要Bintray的审核。</p>
<p>登入Bintray网站，进入个人中心，在右侧的Owned Repositories区域点击Maven的图标，进入你的Maven项目列表。</p>
<p>如果已经上传成功了，在这里就能看到你的项目，进入项目详情，在右下角的Linked To区域点击Add to JCenter，然后在Comments输入框里随便填写下信息，最后点Send提交请求即可</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/012/%E7%B2%98%E8%B4%B4%E5%9B%BE%E7%89%877.png" alt=""></p>
<p>一般情况下审核需要4到5个小时，耐心等待就行了，审核通过后会给你发邮件通知你，并且以后更新项目就不需要再审核了。</p>
<h2 id="修改library库代码-升级库版本"><a href="#修改library库代码-升级库版本" class="headerlink" title="修改library库代码, 升级库版本"></a>修改library库代码, 升级库版本</h2><p>升级库版本代码，只需要修改代码后，然后修改<code>dependencies.gradle</code>里面版本号。</p>
<p>重新执行如下命令即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//进入项目根目录</span><br><span class="line">&gt; ./gradlew :模块名:install  </span><br><span class="line">&gt; ./gradlew :模块名:bintrayUpload  </span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&gt; gradlew :模块名:install  </span><br><span class="line">&gt; gradlew :模块名:bintrayUpload</span><br></pre></td></tr></table></figure>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul>
<li><code>message:Unable to upload files: Maven group, artifact or version defined in the pom file do not match the file path</code></li>
</ul>
<p>这个问题一般都是你的module的名字和你配置的artifactId不一致导致的。</p>
<ul>
<li><code>Error : cause android.compileSdkVersion is missing</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply from: &apos;install.gradle&apos;</span><br><span class="line">apply from: &apos;bintray.gradle&apos;</span><br></pre></td></tr></table></figure>
<p>在module模块的build.gradle添加上述两句话时，这两句话要写到末尾，不然会提示找不到<code>compileSdkVersion</code></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0623/3097.html#commettop" target="_blank" rel="external">如何使用Android Studio把自己的Android library分享到jCenter和Maven Central</a><br><a href="http://www.jianshu.com/p/0e7b8e14f0cd" target="_blank" rel="external">【Android】5分钟发布Android Library项目到JCenter</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MAC安装oh my zsh]]></title>
      <url>http://czhzero.com/2016/10/18/mac-install-ohmyzsh/</url>
      <content type="html"><![CDATA[<p>本文链接地址为: <a href="http://www.php230.com/mac-install-zsh.html，转载请注明出处！" target="_blank" rel="external">http://www.php230.com/mac-install-zsh.html，转载请注明出处！</a></p>
<h2 id="克隆这个项目到本地-前提是你得有装git"><a href="#克隆这个项目到本地-前提是你得有装git" class="headerlink" title="克隆这个项目到本地(前提是你得有装git)"></a>克隆这个项目到本地(前提是你得有装git)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="创建一个zsh的配置文件"><a href="#创建一个zsh的配置文件" class="headerlink" title="创建一个zsh的配置文件"></a>创建一个zsh的配置文件</h2><p>注意:如果你已经有一个~/.zshrc文件的话，建议你先做备份。使用以下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.zshrc ~/.zshrc.orig</span><br></pre></td></tr></table></figure>
<p>然后开始创建zsh的配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure>
<h2 id="设置zsh为你的默认的shell"><a href="#设置zsh为你的默认的shell" class="headerlink" title="设置zsh为你的默认的shell"></a>设置zsh为你的默认的shell</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<h2 id="重启并开始使用你的zsh"><a href="#重启并开始使用你的zsh" class="headerlink" title="重启并开始使用你的zsh"></a>重启并开始使用你的zsh</h2><p>打开一个新的终端窗口,至此，大功告成。</p>
<h2 id="更改zsh主题"><a href="#更改zsh主题" class="headerlink" title="更改zsh主题"></a>更改zsh主题</h2><p>1、编辑 ~/.zshrc</p>
<p>2、修改 ZSH_THEME=”ys”</p>
<p>主题文件在 ~/.oh-my-zsh/themes 目录<br>这里有一份详细的<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="external">zsh主题</a>介绍，可以根据喜好自行修改。</p>
<p>完了しました。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WindowManager悬浮窗如何监听Home键和返回键]]></title>
      <url>http://czhzero.com/2016/08/26/windowmanager-keyevent/</url>
      <content type="html"><![CDATA[<p>使用WindowManager可以在其他应用最上层，甚至手机桌面最上层显示窗口。<br>调用的是WindowManager继承自基类的addView方法和removeView方法来显示和隐藏窗口。但是WindowManager中的View并不能直接地监听到Home和Back的KeyEvent。</p>
<p>通常我们会通过<code>setOnKeyListener</code>方法进行监听，不过，很不幸这种方式监听不到事件。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">View view = LayoutInflater.from(context).inflate(R.layout.popupwindow,</span><br><span class="line">                null);</span><br><span class="line">                </span><br><span class="line">view.setOnKeyListener(new OnKeyListener() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public boolean onKey(View v, int keyCode, KeyEvent event) &#123;</span><br><span class="line">                switch (keyCode) &#123;</span><br><span class="line">                case KeyEvent.KEYCODE_BACK:</span><br><span class="line">                    //dosomething</span><br><span class="line">                    return true;</span><br><span class="line">                case KeyEvent.KEYCODE_HOME</span><br><span class="line">                    //dosomething</span><br><span class="line">                    return true;</span><br><span class="line">                default:</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>所以我们要通过其他方式进行监听，</p>
<ul>
<li>监听Home键事件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">   /**</span><br><span class="line">    * 自定义广播</span><br><span class="line">    */</span><br><span class="line">   private final static BroadcastReceiver homeListenerReceiver = new BroadcastReceiver() &#123;</span><br><span class="line">       final String SYSTEM_DIALOG_REASON_KEY = &quot;reason&quot;;</span><br><span class="line"></span><br><span class="line">       final String SYSTEM_DIALOG_REASON_HOME_KEY = &quot;homekey&quot;;</span><br><span class="line"></span><br><span class="line">       @Override</span><br><span class="line">       public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">           String action = intent.getAction();</span><br><span class="line">           if (action.equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)) &#123;</span><br><span class="line">               String reason = intent.getStringExtra(SYSTEM_DIALOG_REASON_KEY);</span><br><span class="line">               if (reason != null &amp;&amp; reason.equals(SYSTEM_DIALOG_REASON_HOME_KEY)) &#123;</span><br><span class="line">                   // 处理自己的逻辑</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   //在创建View时注册Receiver</span><br><span class="line">   IntentFilter homeFilter = new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);</span><br><span class="line">context.registerReceiver(homeListenerReceiver, homeFilter);</span><br><span class="line"></span><br><span class="line">//在View消失时反注册Receiver</span><br><span class="line">if (homeListenerReceiver != null) &#123;</span><br><span class="line">  context.unregisterReceiver(homeListenerReceiver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>监听Back键事件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//重写dispatchKeyEvent</span><br><span class="line">   @Override</span><br><span class="line">   public boolean dispatchKeyEvent(KeyEvent event) &#123;</span><br><span class="line">       switch (event.getKeyCode()) &#123;</span><br><span class="line">           case KeyEvent.KEYCODE_BACK:</span><br><span class="line">           case KeyEvent.KEYCODE_MENU:</span><br><span class="line">               // 处理自己的逻辑break;</span><br><span class="line">           default:</span><br><span class="line">               break;</span><br><span class="line">       &#125;</span><br><span class="line">       return super.dispatchKeyEvent(event);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle for Andoid 学习笔记(二):Groovy入门]]></title>
      <url>http://czhzero.com/2016/08/24/gradle-study-2/</url>
      <content type="html"><![CDATA[<h2 id="Groovy是什么"><a href="#Groovy是什么" class="headerlink" title="Groovy是什么"></a>Groovy是什么</h2><p>Groovy是一种基于JVM（Java虚拟机）的敏捷开发语言，它结合了Python、Ruby和Smalltalk的许多强大的特性，Groovy 代码能够与 Java 代码很好地结合，也能用于扩展现有代码。由于其运行在 JVM 上的特性，Groovy 可以使用其他 Java 语言编写的库。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/011/20151021205159588.png" alt="Gradle for Andoid"></p>
<a id="more"></a>
<p>下面四种方式都会输出“hello world”，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">System.out.println(&quot;hello world&quot;);</span><br><span class="line">System.out.println &quot;hello world&quot;;</span><br><span class="line"></span><br><span class="line">println(&quot;hello world&quot;)</span><br><span class="line">println &quot;hello world&quot;</span><br></pre></td></tr></table></figure>
<p>Groovy 语法与Java 语言的语法很相似，语法也比较灵活，例如上面一段代码，括号与分号，可有可无。</p>
<p>Groovy编写的文件扩展名是.groovy，学习Groovy官网是 <a href="http://groovy-lang.org" target="_blank" rel="external">http://groovy-lang.org</a>，<br>当然了做Android开发的人员可以直接用Gradle构建工具来运行Groovy，这时候扩展名是.gradle。</p>
<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>与Java的注释语法相同，如：//注释 /<em> 注释 </em>/ /<em>* 注释 </em>/ 都支持,唯一不同的是，Groovy支持像Shell脚本那样的首行附加注释</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env groovy</span><br><span class="line"></span><br><span class="line">//注释1</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 注释2</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/* 注释3 */</span><br><span class="line"></span><br><span class="line">def x=1</span><br></pre></td></tr></table></figure>
<p>“#!”注释只允许在脚本文件的第一行出现，通过这种方式 Unix shell能定位groovy 的启动脚本并且运行这些脚本。</p>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>下面列表表示了Groovy语言所有的关键字, 代表意思与其他语言一致</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">as              assert           break               case</span><br><span class="line">catch           class            const               continue</span><br><span class="line">def             default          do                  else</span><br><span class="line">enum            extends          false               finally</span><br><span class="line">for             goto             if                  implements</span><br><span class="line">import          in               instanceof          interface</span><br><span class="line">new             null             package             return</span><br><span class="line">super           switch           this                throw</span><br><span class="line">throws          trait            true                try</span><br><span class="line">while</span><br></pre></td></tr></table></figure>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><h4 id="正常标识符"><a href="#正常标识符" class="headerlink" title="正常标识符"></a>正常标识符</h4><p>标识符以字母，美元符号或下划线开始。不能以一个数字开始。<br>一个字母可以在以下范围：</p>
<ul>
<li>‘a’ 至 ‘z’ (小写ascii字母)</li>
<li>‘A’ 至 ‘Z’ (大写ascii字母)</li>
<li>‘\u00C0′ 至 ‘\u00D6′</li>
<li>‘\u00D8′ 至 ‘\u00F6′</li>
<li>‘\u00F8′ 至 ‘\u00FF’</li>
<li>‘\u0100′ 至 ‘\uFFFE’</li>
</ul>
<p>后面的字符可以包括字母和数字。<br>这里是一些合法标识符的示例（这里是变量名称）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def name</span><br><span class="line">def item3</span><br><span class="line">def with_underscore</span><br><span class="line">def $dollarStart</span><br></pre></td></tr></table></figure>
<p>但是以下面展示了一些非法的标识符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def 3tier</span><br><span class="line">def a+b</span><br><span class="line">def a#b</span><br></pre></td></tr></table></figure>
<p>当在一个点后，所有的关键字也是合法的标识符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo.as</span><br><span class="line">foo.assert</span><br><span class="line">foo.break</span><br><span class="line">foo.case</span><br><span class="line">foo.catch</span><br></pre></td></tr></table></figure>
<h4 id="引用标识符"><a href="#引用标识符" class="headerlink" title="引用标识符"></a>引用标识符</h4><p>引用标识符出现在一个点式表达式的点后面。例如，person.name表达式中的name，能通过person.”name”,person.’name’被引用。当某些标识符包含有Java语言规范禁止的非法字符，这是相当有趣的，但被Groovy引用所允许。例如，像一个破折号，一个空格，一个感叹号等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def map = [:]</span><br><span class="line"></span><br><span class="line">map.&quot;an identifier with a space and double quotes&quot; = &quot;ALLOWED&quot;</span><br><span class="line">map.&apos;with-dash-signs-and-single-quotes&apos; = &quot;ALLOWED&quot;</span><br><span class="line"></span><br><span class="line">assert map.&quot;an identifier with a space and double quotes&quot; == &quot;ALLOWED&quot;</span><br><span class="line">assert map.&apos;with-dash-signs-and-single-quotes&apos; == &quot;ALLOWED&quot;</span><br></pre></td></tr></table></figure>
<p>正如我们将在字符串章节看到的，Groovy提供了不同的字符串字面量。所有不同类型的字符串都被允许出现在点后面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">map.&apos;single quote&apos;</span><br><span class="line">map.&quot;double quote&quot;</span><br><span class="line">map.&apos;&apos;&apos;triple single quote&apos;&apos;&apos;</span><br><span class="line">map.&quot;&quot;&quot;triple double quote&quot;&quot;&quot;</span><br><span class="line">map./slashy string/</span><br><span class="line">map.$/dollar slashy string/$</span><br></pre></td></tr></table></figure>
<p>普通字符串和Groovy的GStrings有一些不同（有插值的字符串），正如在后者的情况下，插入的值被插入到最后的字符串中，以计算整个标识符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def firstname = &quot;Homer&quot;</span><br><span class="line">map.&quot;Simson-$&#123;firstname&#125;&quot; = &quot;Homer Simson&quot;</span><br><span class="line"></span><br><span class="line">assert map.&apos;Simson-Homer&apos; == &quot;Homer Simson&quot;</span><br></pre></td></tr></table></figure>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>文本文字以字符链的形式表示被称作字符串。Groovy可以让你实例化java.lang.String对象，也可以实例化GString(groovy.lang.GString)，在其他编程语言中被称为插值字符串。</p>
<h4 id="单引号字符串"><a href="#单引号字符串" class="headerlink" title="单引号字符串"></a>单引号字符串</h4><p>单引号字符串是一系列被单引号包围的字符。</p>
<p>单引号字符串是普通的java.lang.String，不支持插值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;a single quoted string&apos;</span><br></pre></td></tr></table></figure>
<h4 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h4><p>所有Groovy字符串能使用+操作符连接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert &apos;ab&apos; == &apos;a&apos; + &apos;b&apos;</span><br></pre></td></tr></table></figure>
<h4 id="三单引号字符串"><a href="#三单引号字符串" class="headerlink" title="三单引号字符串"></a>三单引号字符串</h4><p>三单引号字符串是一列被三个单引号包围的字符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;a triple single quoted string&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>
<p>三单引号字符串是普通的java.lang.String，不支持插值。</p>
<p>三单引号字符串是多行的。你可以使字符串内容跨越行边界，不需要将字符串分割为一些片段，不需要连接，或换行转义符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def aMultilineString = &apos;&apos;&apos;line one</span><br><span class="line">line two</span><br><span class="line">line three&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>
<p>如果你的代码是缩进的，如类中的方法体，字符串将包括缩进的空格。Groovy开发工具包含一些剥离缩进的方法，使用String#stripIndent()方法，并使用String#stripMargin()方法，需要一个分隔符来识别文本从一个字符串的开始删除。<br>当创建一个如下字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def startingAndEndingWithANewline = &apos;&apos;&apos;</span><br><span class="line">line one</span><br><span class="line">line two</span><br><span class="line">line three</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure>
<h5 id="转义特殊字符"><a href="#转义特殊字符" class="headerlink" title="转义特殊字符"></a>转义特殊字符</h5><p>你可以使用反斜杠字符转义单引号，避免终止字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;an escaped single quote: \&apos; needs a backslash&apos;</span><br></pre></td></tr></table></figure>
<p>你能使用双反斜杠来转义转义字符自身：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;an escaped escape character: \\ needs a double backslash&apos;</span><br></pre></td></tr></table></figure>
<p>一些特殊字符使用反斜杠作为转义字符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">转义序列    字符</span><br><span class="line">&apos;\t&apos;        tabulation</span><br><span class="line">&apos;\b&apos;        backspace</span><br><span class="line">&apos;\n&apos;        newline</span><br><span class="line">&apos;\r&apos;        carriage return</span><br><span class="line">&apos;\f&apos;        formfeed</span><br><span class="line">&apos;\\&apos;        backslash</span><br><span class="line">&apos;\&apos;&apos;        single quote (for single quoted and triple single quoted strings)</span><br><span class="line">&apos;\&quot;&apos;        double quote (for double quoted and triple double quoted strings)</span><br></pre></td></tr></table></figure>
<h5 id="Unicode转义序列"><a href="#Unicode转义序列" class="headerlink" title="Unicode转义序列"></a>Unicode转义序列</h5><p>对于那些键盘不能表示的字符，你能使用Unicode转义序列：一个反斜杠，后面跟着‘u’,然后是4个十六进制的数字。<br>例如，欧元货币标志可以使用这个表示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;The Euro currency symbol: \u20AC&apos;</span><br></pre></td></tr></table></figure>
<h4 id="双引号字符串"><a href="#双引号字符串" class="headerlink" title="双引号字符串"></a>双引号字符串</h4><p>双引号字符串是一些列被双引号包围的字符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;a double quoted string&quot;</span><br></pre></td></tr></table></figure>
<p>如果没有插值表达式，双引号字符串是普通的java.lang.String，如果插值存在则是groocy.lang.GString实例。<br>为了转义一个双引号，你能使用反斜杠字符：”A double quote: \””。</p>
<h5 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h5><p>任何Groovy表达式可以在所有字符文本进行插值，除了单引号和三单引号字符串。插值是使用占位符上的字符串计算值替换占位符的操作。占位符表达式是被${}包围，或前缀为$的表达式。当GString被传递给一个带有一个String参数的方法时，占位符的表达式被计算值，并通过调用表达式的toString()方法以字符串形式表示。<br>这里是一个占位符引用局部变量的字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def name = &apos;Guillaume&apos; // a plain string</span><br><span class="line">def greeting = &quot;Hello $&#123;name&#125;&quot;</span><br><span class="line"></span><br><span class="line">assert greeting.toString() == &apos;Hello Guillaume&apos;</span><br></pre></td></tr></table></figure>
<p>而且任何Groovy表达式是合法的，正如我们在示例中使用算数表达式所见一样:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def sum = &quot;The sum of 2 and 3 equals $&#123;2 + 3&#125;&quot;</span><br><span class="line">assert sum.toString() == &apos;The sum of 2 and 3 equals 5&apos;</span><br></pre></td></tr></table></figure>
<p>不仅任何表达式，实际上也允许${}占位符。语句也是被允许的，但一个语句等效于null。如果有多个语句插入占位符，那么最后一个语句应该返回一个有意义的值被插入占位符。例如，”The sum of 1 and 2 is equal to ${def a = 1; def b = 2; a + b}”字符串是被支持的，也能如预期一样工作，但一个好的实践是在GString占位符插入一个简单的表达式。</p>
<p>除了${}占位符以外，也可以使用$作为表达式前缀：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def person = [name: &apos;Guillaume&apos;, age: 36]</span><br><span class="line">assert &quot;$person.name is $person.age years old&quot; == &apos;Guillaume is 36 years old&apos;</span><br></pre></td></tr></table></figure>
<p>但只有a.b，a.b.c等形式的前缀表达式是合法的，而包含如方法调用的圆括号，闭包的花括号，算术操作符是非法的。给出如下数值变量定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def number = 3.14</span><br></pre></td></tr></table></figure>
<p>如下语句将会抛出groovy.lang.MissingPropertyException，因为Groovy相信你在尝试访问一个不存在数字的toString属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shouldFail(MissingPropertyException) &#123;</span><br><span class="line">  println &quot;$number.toString()&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你可以把”$number.toString()”用解释器解释为”${number.toString}()”。<br>如果在GString中你需要转义$或${}占位符，使它们不出现插值，那么你只需要使用反斜杠字符转义美元符号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert &apos;$&#123;name&#125;&apos; == &quot;\$&#123;name&#125;&quot;</span><br></pre></td></tr></table></figure>
<h4 id="插入闭包表达式的特殊情况"><a href="#插入闭包表达式的特殊情况" class="headerlink" title="插入闭包表达式的特殊情况"></a>插入闭包表达式的特殊情况</h4><p>到目前为止，我们仅仅看到在${}占位符中插入任意表达式，但一个闭包表达式标记的特殊情况。当占位符包括一个箭头，${-&gt;}，这表达式实际是一个闭包表达式，你可以把它看做一个前面紧靠美元符号的闭包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def sParameterLessClosure = &quot;1 + 2 == $&#123;-&gt; 3&#125;&quot; （1）</span><br><span class="line">assert sParameterLessClosure == &apos;1 + 2 == 3&apos;</span><br><span class="line"></span><br><span class="line">def sOneParamClosure = &quot;1 + 2 == $&#123; w -&gt; w &lt;&lt; 3&#125;&quot; （2）</span><br><span class="line">assert sOneParamClosure == &apos;1 + 2 == 3&apos;</span><br></pre></td></tr></table></figure>
<p>（1）这是一个不携带参数的无参闭包<br>（2）这里的闭包携带一个java.io.StringWrite参数，你能使用&lt;&lt;追加内容。在这两处，占位符被嵌入闭包。</p>
<p>在外观上，定义一个表达式被插入看着有一些冗长，但闭包相比表达式有一个有趣的优势：延迟计算。<br>让我们思考如下示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def number = 1 （1）</span><br><span class="line">def eagerGString = &quot;value == $&#123;number&#125;&quot;</span><br><span class="line">def lazyGString = &quot;value == $&#123; -&gt; number &#125;&quot;</span><br><span class="line"></span><br><span class="line">assert eagerGString == &quot;value == 1&quot; （2）</span><br><span class="line">assert lazyGString == &quot;value == 1&quot; （3）</span><br><span class="line"></span><br><span class="line">number = 2 （4）</span><br><span class="line">assert eagerGString == &quot;value == 1&quot; （5）</span><br><span class="line">assert lazyGString == &quot;value == 2&quot; （6）</span><br></pre></td></tr></table></figure>
<p>（1）我们定义一个包含1的number变量，然后插入两个GString之中，在eagerGString中作为表达式，在lazyGString中作为闭包。<br>（2）我们期望对于eagerGString得到的结果字符串是包含1的相同字符串<br>（3）lazyGString相似<br>（4）然后给变量赋一个新值<br>（5）使用纯插值表达式，这值在GString创建时结合<br>（6）但使用闭包表达式，GString被强转为Sring时，闭包被调用，并产生包含新数值的更新字符串。<br>一个嵌入的闭包表达式，携带超过一个参数，那么在运行时将会产生一个异常。闭包仅仅允许携带0个或1个参数。</p>
<h4 id="与Java的互操作性"><a href="#与Java的互操作性" class="headerlink" title="与Java的互操作性"></a>与Java的互操作性</h4><p>当一个方法（无论是在Java或是Groovy中实现）预期需要一个java.lang.String，而我们传递了一个groovy.lang.GString实例，GString的toString()方法将会被自动透明的调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String takeString(String message) &#123; （4）</span><br><span class="line">  assert message instanceof String （5）</span><br><span class="line">  return message</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def message = &quot;The message is $&#123;&apos;hello&apos;&#125;&quot; （1）</span><br><span class="line">assert message instanceof GString （2）</span><br><span class="line"></span><br><span class="line">def result = takeString(message) （3）</span><br><span class="line">assert result instanceof String</span><br><span class="line">assert result == &apos;The message is hello&apos;</span><br></pre></td></tr></table></figure>
<p>（1）我们创建一个GSring变量<br>（2）我们仔细检查GString实例<br>（3）我们将GString传递个一个携带String参数的方法<br>（4）takeString()明确说明它的唯一参数是一个String<br>（5）我们也验证一个参数是String而不是GString</p>
<h4 id="GString和String的hashCode"><a href="#GString和String的hashCode" class="headerlink" title="GString和String的hashCode"></a>GString和String的hashCode</h4><p>虽然插值字符串可以代替普通Java字符串，它们用一种不同的方式是字符串不同：它们的hashCode是不同的。普通Java字符串是不可变的，而一个GString依赖于插入的值，它的String是可变的。即使有相同的字符串结果，GString和String也没有相同的hashCode。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert &quot;one: $&#123;1&#125;&quot;.hashCode() != &quot;one: 1&quot;.hashCode()</span><br></pre></td></tr></table></figure>
<p>GString和String有不同的hashCode值，应该避免使用GSring作为Map的键值，我们使用String代替GString取出一个关联值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def key = &quot;a&quot;</span><br><span class="line">def m = [&quot;$&#123;key&#125;&quot;: &quot;letter $&#123;key&#125;&quot;] （1）</span><br><span class="line"></span><br><span class="line">assert m[&quot;a&quot;] == null （2）</span><br></pre></td></tr></table></figure>
<p>（1）map被一个初始化键值对创建，其键值是GString<br>（2）当我们尝试使用String键值获取值时，我们并没获取对应值，因为String和GString有不同的hashCode</p>
<h3 id="三双引号字符串"><a href="#三双引号字符串" class="headerlink" title="三双引号字符串"></a>三双引号字符串</h3><p>三双引号字符串与双引号字符串相同，增加多行，像三单引号字符串一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def name = &apos;Groovy&apos;</span><br><span class="line">def template = &quot;&quot;&quot;</span><br><span class="line">  Dear Mr $&#123;name&#125;,</span><br><span class="line"></span><br><span class="line">  You&apos;re the winner of the lottery!</span><br><span class="line"></span><br><span class="line">  Yours sincerly,</span><br><span class="line"></span><br><span class="line">  Dave</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">assert template.toString().contains(&apos;Groovy&apos;)</span><br></pre></td></tr></table></figure>
<p>无论是双引号还是单引号，在三双引号字符串中需要被转义。</p>
<h3 id="斜杠字符串"><a href="#斜杠字符串" class="headerlink" title="斜杠字符串"></a>斜杠字符串</h3><p>除了通常的带引号字符串，groovy提供斜杠字符串，使用/作为分隔符。斜杠字符串对于定义正则表达式和模式是特别有用的，因为不需要转义反斜杠。</p>
<p>一个斜杠字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def fooPattern = /.*foo.*/</span><br><span class="line">assert fooPattern == &apos;.*foo.*&apos;</span><br></pre></td></tr></table></figure>
<p>只有正斜杠需要反斜杠转义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def escapeSlash = /The character \/ is a forward slash/</span><br><span class="line">assert escapeSlash == &apos;The character / is a forward slash&apos;</span><br></pre></td></tr></table></figure>
<p>斜杠字符串是多行的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def multilineSlashy = /one</span><br><span class="line">two</span><br><span class="line">three/</span><br><span class="line"></span><br><span class="line">assert multilineSlashy.contains(&apos;\n&apos;)</span><br></pre></td></tr></table></figure>
<p>斜杠字符串也能被插值（如，GString）:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def color = &apos;blue&apos;</span><br><span class="line">def interpolatedSlashy = /a $&#123;color&#125; car/</span><br><span class="line"></span><br><span class="line">assert interpolatedSlashy == &apos;a blue car&apos;</span><br></pre></td></tr></table></figure>
<p>有几个陷阱需要注意：<br>一个空的斜杠字符串不能使用双正斜杠表示，因为它被Groovy解析器作为一个单行注释理解。这就是为什么以下断言实际上无法编译，因为它看起来像一个无终止的语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert &apos;&apos; == //</span><br></pre></td></tr></table></figure>
<h4 id="美元符修饰的斜杠字符串"><a href="#美元符修饰的斜杠字符串" class="headerlink" title="美元符修饰的斜杠字符串"></a>美元符修饰的斜杠字符串</h4><p>美元符斜杠字符串是一个有开口$/和闭口$/界定的多行GString。这转义字符是美元符，它能转义另一个美元符，或一个正斜杠。但是双美元符和双正斜杠不用被转义，除了转义像GString占位符序列开始的字符串子序列的美元符，或者你需要转义一个序列，开头看着像闭包美元符斜杠字符串分隔符。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def name = &quot;Guillaume&quot;</span><br><span class="line">def date = &quot;April, 1st&quot;</span><br><span class="line"></span><br><span class="line">def dollarSlashy = $/</span><br><span class="line">  Hello $name,</span><br><span class="line">  today we&apos;re $&#123;date&#125;.</span><br><span class="line"></span><br><span class="line">  $ dollar sign</span><br><span class="line">  $$ escaped dollar sign</span><br><span class="line">  \ backslash</span><br><span class="line">  / forward slash</span><br><span class="line">  $/ escaped forward slash</span><br><span class="line">  $/$ escaped dollar slashy string delimiter</span><br><span class="line">/$</span><br><span class="line"></span><br><span class="line">assert [</span><br><span class="line">  &apos;Guillaume&apos;,</span><br><span class="line">  &apos;April, 1st&apos;,</span><br><span class="line">  &apos;$ dollar sign&apos;,</span><br><span class="line">  &apos;$ escaped dollar sign&apos;,</span><br><span class="line">  &apos;\\ backslash&apos;,</span><br><span class="line">  &apos;/ forward slash&apos;,</span><br><span class="line">  &apos;$/ escaped forward slash&apos;,</span><br><span class="line">  &apos;/$ escaped dollar slashy string delimiter&apos;</span><br><span class="line"></span><br><span class="line">].each &#123; dollarSlashy.contains(it) &#125;</span><br></pre></td></tr></table></figure>
<h4 id="字符串总结表"><a href="#字符串总结表" class="headerlink" title="字符串总结表"></a>字符串总结表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String name              String syntax     Interpolated     Multiline    Escape character</span><br><span class="line">Single quoted            &apos;…​&apos;                                              \</span><br><span class="line">Triple single quoted     &apos;&apos;&apos;…​&apos;&apos;&apos;                            是            \</span><br><span class="line">Double quoted            &quot;…​&quot;               是                             \</span><br><span class="line">Triple double quoted     &quot;&quot;&quot;…​&quot;&quot;&quot;           是               是            \</span><br><span class="line">slashy                   /…​/               是               是            \</span><br><span class="line">Dollar                   $/…​/$             是               是            \</span><br></pre></td></tr></table></figure>
<h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><p>与Java不同，Groovy没有显式的字符文本，然而你可以通过三种不同方式，可以将Groovy字符串实际作为一个字符使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">char c1 = &apos;A&apos; （1）</span><br><span class="line">assert c1 instanceof Character</span><br><span class="line"></span><br><span class="line">def c2 = &apos;B&apos; as char （2）</span><br><span class="line">assert c2 instanceof Character</span><br><span class="line"></span><br><span class="line">def c3 = (char)&apos;C&apos; （3）</span><br><span class="line">assert c3 instanceof Character</span><br></pre></td></tr></table></figure>
<p>1）当定义变量时，通过指定char类型，使变量包含字符<br>（2）通过as操作符使用类型强制转换<br>（3）通过char操作符做类型转换<br>第一个选项是（1）有趣的当一个字符在一个变量中，而另外两个（2和3）是更令人关注时char值必须作为一个方法调用的参数。</p>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>Groovy支持不同类型的整数和小数，通常以Java的Number类型返回。</p>
<h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><p>整数类型与Java相同：</p>
<ul>
<li>byte</li>
<li>char</li>
<li>short</li>
<li>int</li>
<li>long</li>
<li>java.lang.BigInteger</li>
</ul>
<p>你能以如下定义创建这些类型的整数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// primitive types</span><br><span class="line">byte b = 1</span><br><span class="line">char c = 2</span><br><span class="line">short s = 3</span><br><span class="line">int i = 4</span><br><span class="line">long l = 5</span><br><span class="line"></span><br><span class="line">// infinite precision</span><br><span class="line">BigInteger bi = 6</span><br></pre></td></tr></table></figure>
<p>如果你通过使用def关键字使用可选类型，那么整数的类型将是可变的：它取决于这个类型实际包含的值。</p>
<p>对于正数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def a = 1</span><br><span class="line">assert a instanceof Integer</span><br><span class="line"></span><br><span class="line">// Integer.MAX_VALUE</span><br><span class="line">def b = 2147483647</span><br><span class="line">assert b instanceof Integer</span><br><span class="line"></span><br><span class="line">// Integer.MAX_VALUE + 1</span><br><span class="line">def c = 2147483648</span><br><span class="line">assert c instanceof Long</span><br><span class="line"></span><br><span class="line">// Long.MAX_VALUE</span><br><span class="line">def d = 9223372036854775807</span><br><span class="line">assert d instanceof Long</span><br><span class="line"></span><br><span class="line">// Long.MAX_VALUE + 1</span><br><span class="line">def e = 9223372036854775808</span><br><span class="line">assert e instanceof BigInteger</span><br></pre></td></tr></table></figure>
<p>对于负数也一样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def na = -1</span><br><span class="line">assert na instanceof Integer</span><br><span class="line"></span><br><span class="line">// Integer.MIN_VALUE</span><br><span class="line">def nb = -2147483648</span><br><span class="line">assert nb instanceof Integer</span><br><span class="line"></span><br><span class="line">// Integer.MIN_VALUE - 1</span><br><span class="line">def nc = -2147483649</span><br><span class="line">assert nc instanceof Long</span><br><span class="line"></span><br><span class="line">// Long.MIN_VALUE</span><br><span class="line">def nd = -9223372036854775808</span><br><span class="line">assert nd instanceof Long</span><br><span class="line"></span><br><span class="line">// Long.MIN_VALUE - 1</span><br><span class="line">def ne = -9223372036854775809</span><br><span class="line">assert ne instanceof BigInteger</span><br></pre></td></tr></table></figure>
<h5 id="可选择的非十进制表示"><a href="#可选择的非十进制表示" class="headerlink" title="可选择的非十进制表示"></a>可选择的非十进制表示</h5><p>二进制数</p>
<p>在Java6及以前和Groovy一样，数字只能使用十进制，八进制和十六进制表示，使用Java7和Groovy2你能使用0b前缀作为一个二进制符号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int xInt = 0b10101111</span><br><span class="line">assert xInt == 175</span><br><span class="line"></span><br><span class="line">short xShort = 0b11001001</span><br><span class="line">assert xShort == 201 as short</span><br><span class="line"></span><br><span class="line">byte xByte = 0b11</span><br><span class="line">assert xByte == 3 as byte</span><br><span class="line"></span><br><span class="line">long xLong = 0b101101101101</span><br><span class="line">assert xLong == 2925l</span><br><span class="line"></span><br><span class="line">BigInteger xBigInteger = 0b111100100001</span><br><span class="line">assert xBigInteger == 3873g</span><br><span class="line"></span><br><span class="line">int xNegativeInt = -0b10101111</span><br><span class="line">assert xNegativeInt == -175</span><br></pre></td></tr></table></figure>
<p>八进制数</p>
<p>八进制数使用0后面跟八进制数的典型格式表示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int xInt = 077</span><br><span class="line">assert xInt == 63</span><br><span class="line"></span><br><span class="line">short xShort = 011</span><br><span class="line">assert xShort == 9 as short</span><br><span class="line"></span><br><span class="line">byte xByte = 032</span><br><span class="line">assert xByte == 26 as byte</span><br><span class="line"></span><br><span class="line">long xLong = 0246</span><br><span class="line">assert xLong == 166l</span><br><span class="line"></span><br><span class="line">BigInteger xBigInteger = 01111</span><br><span class="line">assert xBigInteger == 585g</span><br><span class="line"></span><br><span class="line">int xNegativeInt = -077</span><br><span class="line">assert xNegativeInt == -63</span><br></pre></td></tr></table></figure>
<p>十六进制数</p>
<p>十六进制数使用0x后面跟十六进制数的典型格式表示。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">int xInt = 0x77</span><br><span class="line">assert xInt == 119</span><br><span class="line"></span><br><span class="line">short xShort = 0xaa</span><br><span class="line">assert xShort == 170 as short</span><br><span class="line"></span><br><span class="line">byte xByte = 0x3a</span><br><span class="line">assert xByte == 58 as byte</span><br><span class="line"></span><br><span class="line">long xLong = 0xffff</span><br><span class="line">assert xLong == 65535l</span><br><span class="line"></span><br><span class="line">BigInteger xBigInteger = 0xaaaa</span><br><span class="line">assert xBigInteger == 43690g</span><br><span class="line"></span><br><span class="line">Double xDouble = new Double(&apos;0x1.0p0&apos;)</span><br><span class="line">assert xDouble == 1.0d</span><br><span class="line"></span><br><span class="line">int xNegativeInt = -0x77</span><br><span class="line">assert xNegativeInt == -119</span><br></pre></td></tr></table></figure>
<h4 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h4><p>小数类型与Java一样：</p>
<ul>
<li>float</li>
<li>double</li>
<li>java.lang.BigDecimal</li>
</ul>
<p>你能采用如下定义方式创建这些类型的数字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// primitive types</span><br><span class="line">float f = 1.234</span><br><span class="line">double d = 2.345</span><br><span class="line"></span><br><span class="line">// infinite precision</span><br><span class="line">BigDecimal bd = 3.456</span><br></pre></td></tr></table></figure>
<p>小数能使用指数，使用e或E指数字母，紧跟着一个可选符号，且有一个整数表示指数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">assert 1e3 == 1_000.0</span><br><span class="line">assert 2E4 == 20_000.0</span><br><span class="line">assert 3e+1 == 30.0</span><br><span class="line">assert 4E-2 == 0.04</span><br><span class="line">assert 5e-1 == 0.5</span><br></pre></td></tr></table></figure>
<p>为了精确的进行小数计算，Groovy选择java.lang.BigDecimal作为小数类型。此外，float和double也被支持，但要求有一个显式类型定义，类型转换或后缀。即使BigDecimal是默认的小数，携带float或double作为类型参数的方法或闭包也可以接受这些数值。<br>小数不能使用二进制，八进制和十六进制表示。</p>
<h4 id="有下划线的文本"><a href="#有下划线的文本" class="headerlink" title="有下划线的文本"></a>有下划线的文本</h4><p>当写一个很长的数字，使用眼睛很难弄清楚有多少数字组合在一起，例如使用千，单词等组合。通过允许你在数字中添加一些下划线，更容易发现这些组合：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">long creditCardNumber = 1234_5678_9012_3456L</span><br><span class="line">long socialSecurityNumbers = 999_99_9999L</span><br><span class="line">double monetaryAmount = 12_345_132.12</span><br><span class="line">long hexBytes = 0xFF_EC_DE_5E</span><br><span class="line">long hexWords = 0xFFEC_DE5E</span><br><span class="line">long maxLong = 0x7fff_ffff_ffff_ffffL</span><br><span class="line">long alsoMaxLong = 9_223_372_036_854_775_807L</span><br><span class="line">long bytes = 0b11010010_01101001_10010100_10010010</span><br></pre></td></tr></table></figure>
<h4 id="数字类型后缀"><a href="#数字类型后缀" class="headerlink" title="数字类型后缀"></a>数字类型后缀</h4><p>通过使用大写或小写类型后缀（见下表），我们能强制将一个数字（包括二进制，八进制，十六进制）给一个指定类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Type            Suffix</span><br><span class="line">BigInteger      G 或 g</span><br><span class="line">Long            L 或 l</span><br><span class="line">Integer         I 或 i</span><br><span class="line">BigDecimal      G 或 g</span><br><span class="line">Double          D 或 d</span><br><span class="line">Float           F 或 f</span><br></pre></td></tr></table></figure>
<p>如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">assert 42I == new Integer(&apos;42&apos;)</span><br><span class="line">assert 42i == new Integer(&apos;42&apos;) // lowercase i more readable</span><br><span class="line">assert 123L == new Long(&quot;123&quot;) // uppercase L more readable</span><br><span class="line">assert 2147483648 == new Long(&apos;2147483648&apos;) // Long type used, value too large for an Integer</span><br><span class="line">assert 456G == new BigInteger(&apos;456&apos;)</span><br><span class="line">assert 456g == new BigInteger(&apos;456&apos;)</span><br><span class="line">assert 123.45 == new BigDecimal(&apos;123.45&apos;) // default BigDecimal type used</span><br><span class="line">assert 1.200065D == new Double(&apos;1.200065&apos;)</span><br><span class="line">assert 1.234F == new Float(&apos;1.234&apos;)</span><br><span class="line">assert 1.23E23D == new Double(&apos;1.23E23&apos;)</span><br><span class="line">assert 0b1111L.class == Long // binary</span><br><span class="line">assert 0xFFi.class == Integer // hexadecimal</span><br><span class="line">assert 034G.class == BigInteger // octal</span><br></pre></td></tr></table></figure>
<h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h4><p>尽管运算在以后会被覆盖，讨论数学运算和结果类型仍然是重要的。<br>除法与幂方二元操作符放在一边（下文讨论）。</p>
<ul>
<li>byte char short和int进行二元操作的结果是int</li>
<li>使用long与byte char short int进行二元操作的结果是long</li>
<li>使用BigInteger与任意其他整数类型进行二元操作结果是BigInteger</li>
<li>float double与BigDecimal进行二元运算的结果是double</li>
<li>两个BigDecimal进行二元运算的结果是BigDecimal</li>
<li>下表总结了这些原则：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">        byte    char    short    int    long    BigInteger    float      double    BigDecimal</span><br><span class="line">byte    int     int     int      int    long    BigInteger    double     double    double</span><br><span class="line">char            int     int      int    long    BigInteger    double     double    double</span><br><span class="line">short                   int      int    long    BigInteger    double     double    double</span><br><span class="line">int                              int    long    BigInteger    double     double    double</span><br><span class="line">long                                    long    BigInteger    double     double    double</span><br><span class="line">BigInteger                                      BigInteger    double     double    double</span><br><span class="line">float                                                         double     double    double</span><br><span class="line">double                                                                   double    double</span><br><span class="line">BigDecimal                                                                         BigDecimal</span><br></pre></td></tr></table></figure>
<p>由于Groovy操作符重载，BigInteger与BigDecimal通常也能进行运算操作，与Java不同，在Java中你不得不显式使用方法操作这些数字。</p>
<h5 id="除法运算符的情况"><a href="#除法运算符的情况" class="headerlink" title="除法运算符的情况"></a>除法运算符的情况</h5><p>如果任何一个操作数是float或double,那么除法运算符/(和/= 用于除法和赋值)产生double结果，否则（当两个操作数是一个与整型类型short, char, byte, int, long, BigInteger or BigDecimal的任意组合）是一个BigDecimal结果。</p>
<p>如果除法是精确的（如，结果可以在相同的精度和标度范围内精确表示），那么BigDecimal的除法实际执行的是divide()方法，或使用两个操作数的最大精度加10,和一个最大值为10的标度的MathContext。</p>
<p>对于整数除法和Java相同，你应该使用intdiv()方法，因为Groovy没有专门提供一个整数操作符。</p>
<h5 id="幂运算情况"><a href="#幂运算情况" class="headerlink" title="幂运算情况"></a>幂运算情况</h5><p>幂运算操作符使用**操作符，有两个参数：基数和指数。幂运算的结果取决于它的操作数以及操作的结果（特别是结果可以被表示为一个整数值）。</p>
<p>以下这些原则被用于决定Groovy幂运算操作结果的类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（1）如果指数是一个小数</span><br><span class="line">	1.如果结果能作为一个Integer表示，那么返回一个Integer</span><br><span class="line">	2..如果结果能作为一个Long表示，那么返回一个Long</span><br><span class="line">	3.否则返回一个Double</span><br><span class="line"></span><br><span class="line">（2）如果指数是一个整数</span><br><span class="line"> 	1.如果是一个严格的负数，那么返回一个Integer，Long或Double，结果值使用那种类型填充。</span><br><span class="line">        2.如果指数是正数或0</span><br><span class="line"> 	  1)如果基数是BigDecimal，那么返回一个BigDecimal结果值</span><br><span class="line">	  2)如果基数是BigInteger，那么返回一个BigInteger结果值</span><br><span class="line">	  3)如果基数是Integer，那么返回一个Integer值，否则返回BigInteger</span><br><span class="line">	  4)如果基数是Long，那么返回一个Long值，否则返回BigInteger</span><br></pre></td></tr></table></figure>
<p>我们使用一些实例说明这些原则：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// base and exponent are ints and the result can be represented by an Integer</span><br><span class="line">assert 2 ** 3 instanceof Integer // 8</span><br><span class="line">assert 10 ** 9 instanceof Integer // 1_000_000_000</span><br><span class="line"></span><br><span class="line">// the base is a long, so fit the result in a Long</span><br><span class="line">// (although it could have fit in an Integer)</span><br><span class="line">assert 5L ** 2 instanceof Long // 25</span><br><span class="line"></span><br><span class="line">// the result can&apos;t be represented as an Integer or Long, so return a BigInteger</span><br><span class="line">assert 100 ** 10 instanceof BigInteger // 10e20</span><br><span class="line">assert 1234 ** 123 instanceof BigInteger // 170515806212727042875...</span><br><span class="line"></span><br><span class="line">// the base is a BigDecimal and the exponent a negative int</span><br><span class="line">// but the result can be represented as an Integer</span><br><span class="line">assert 0.5 ** -2 instanceof Integer // 4</span><br><span class="line"></span><br><span class="line">// the base is an int, and the exponent a negative float</span><br><span class="line">// but again, the result can be represented as an Integer</span><br><span class="line">assert 1 ** -0.3f instanceof Integer // 1</span><br><span class="line"></span><br><span class="line">// the base is an int, and the exponent a negative int</span><br><span class="line">// but the result will be calculated as a Double</span><br><span class="line">// (both base and exponent are actually converted to doubles)</span><br><span class="line">assert 10 ** -1 instanceof Double // 0.1</span><br><span class="line"></span><br><span class="line">// the base is a BigDecimal, and the exponent is an int, so return a BigDecimal</span><br><span class="line">assert 1.2 ** 10 instanceof BigDecimal // 6.1917364224</span><br><span class="line"></span><br><span class="line">// the base is a float or double, and the exponent is an int</span><br><span class="line">// but the result can only be represented as a Double value</span><br><span class="line">assert 3.4f ** 5 instanceof Double // 454.35430372146965</span><br><span class="line">assert 5.6d ** 2 instanceof Double // 31.359999999999996</span><br><span class="line"></span><br><span class="line">// the exponent is a decimal value</span><br><span class="line">// and the result can only be represented as a Double value</span><br><span class="line">assert 7.8 ** 1.9 instanceof Double // 49.542708423868476</span><br><span class="line">assert 2 ** 0.1f instanceof Double // 1.0717734636432956</span><br></pre></td></tr></table></figure>
<h4 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h4><p>Boolean是一种特殊的数据类型，用于表示真值：true和false。使用这种数据类型作为跟踪真假条件的简单标志。</p>
<p>Boolean能被存储在变量中，成员变量中，就像其他数据类型一样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def myBooleanVariable = true</span><br><span class="line">boolean untypedBooleanVar = false</span><br><span class="line">booleanField = true</span><br></pre></td></tr></table></figure>
<p>true和false是仅有的两个原始布尔值。但更复杂的布尔表达式能使用逻辑操作符表示。</p>
<p>除此之外，Groovy有一些特殊的规则（经常因为Groovy真值涉及）用于将非布尔值对象转化为一个布尔值。</p>
<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>Groovy使用逗号分隔列表中的值，并使用方括号包围，用来指定一个列表。Groovy的列表是java.util.List，因为Groovy没有定义任何集合类。当定义一个列表常量时，默认的列表具体实现是java.util.ArrayList，除非你指定，我们将在后面看到。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def numbers = [1, 2, 3] （1）</span><br><span class="line"></span><br><span class="line">assert numbers instanceof List （2）</span><br><span class="line">assert numbers.size() == 3 （3）</span><br></pre></td></tr></table></figure>
<p>（1）我们定义用逗号分隔，并用方括号包围列表数字，并将列表赋值给一个变量</p>
<p>（2）list是java java.util.List接口的实例</p>
<p>（3）列表的大小可以使用size()方法查询，表明列表有三个元素</p>
<p>在上面的示例中，我们使用了一个元素类型相同的列表，我们也能创建包含不同类型元素的列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def heterogeneous = [1, &quot;a&quot;, true] （1）</span><br></pre></td></tr></table></figure>
<p>（1）我们的列表包含一个数字，一个字符串，一个布尔值</p>
<p>我们提及到，默认的列表字面量实际是java.util.ArrayList的实例，但列表使用不同返回类型也是可以的，使用as操作符进行类型转换，或使用变量的定义类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def arrayList = [1, 2, 3]</span><br><span class="line">assert arrayList instanceof java.util.ArrayList</span><br><span class="line"></span><br><span class="line">def linkedList = [2, 3, 4] as LinkedList （1）</span><br><span class="line">assert linkedList instanceof java.util.LinkedList</span><br><span class="line"></span><br><span class="line">LinkedList otherLinked = [3, 4, 5] （2）</span><br><span class="line">assert otherLinked instanceof java.util.LinkedList</span><br></pre></td></tr></table></figure>
<p>（1）我们使用as操作符进行类型转换，显式请求一个java.util.LinkedList实现<br>（2）我们使用类型为java.util.LinkedList的变量保存列表字面量</p>
<p>你能通过下标操作符<code>[](读和写元素值)</code>并使用正索引值访问列表元素或负索引值从列表尾部访问元素，也可以使用范围，或使用左移&lt;&lt;追加列表元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def letters = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;]</span><br><span class="line"></span><br><span class="line">assert letters[0] == &apos;a&apos; （1）</span><br><span class="line">assert letters[1] == &apos;b&apos;</span><br><span class="line"></span><br><span class="line">assert letters[-1] == &apos;d&apos; （2）</span><br><span class="line">assert letters[-2] == &apos;c&apos;</span><br><span class="line"></span><br><span class="line">letters[2] = &apos;C&apos; （3）</span><br><span class="line">assert letters[2] == &apos;C&apos;</span><br><span class="line"></span><br><span class="line">letters &lt;&lt; &apos;e&apos; （4）</span><br><span class="line">assert letters[ 4] == &apos;e&apos;</span><br><span class="line">assert letters[-1] == &apos;e&apos;</span><br><span class="line"></span><br><span class="line">assert letters[1, 3] == [&apos;b&apos;, &apos;d&apos;] （5）</span><br><span class="line">assert letters[2..4] == [&apos;C&apos;, &apos;d&apos;, &apos;e&apos;] （6）</span><br></pre></td></tr></table></figure>
<p>（1）访问列表的第一个元素（索引从零开始计算）</p>
<p>（2）使用负索引访问列表的最后一个元素：-1是列表从尾部开始的第一个元素</p>
<p>（3）使用赋值操作为列表的第三个元素设置一个新值</p>
<p>（4）使用&lt;&lt;左移操作符在列表尾部追加一个元素</p>
<p>（5）一次访问两个元素，并返回一个包含这两个元素的新列表</p>
<p>（6）使用范围访问列表中这个范围内的元素，从start到end元素位置</p>
<p>因为列表可以很自然的做到元素类型不同，因此列表也可以包含列表用于创建多维列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def multi = [[0, 1], [2, 3]] （1）</span><br><span class="line">assert multi[1][0] == 2 （2）</span><br></pre></td></tr></table></figure>
<p>（1）定义一个数字列表的列表</p>
<p>（2）访问顶级列表的第二个元素，内部列表的第一个元素</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>Groovy使用列表标记来标记数组，但为了创建字面量数组，你需要通过类型转换或类型定义来定义数组类型。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String[] arrStr = [&apos;Ananas&apos;, &apos;Banana&apos;, &apos;Kiwi&apos;] （1）</span><br><span class="line"></span><br><span class="line">assert arrStr instanceof String[] （2）</span><br><span class="line">assert !(arrStr instanceof List)</span><br><span class="line"></span><br><span class="line">def numArr = [1, 2, 3] as int[] （3）</span><br><span class="line"></span><br><span class="line">assert numArr instanceof int[] （4）</span><br><span class="line">assert numArr.size() == 3</span><br></pre></td></tr></table></figure>
<p>（1）使用显式变量类型定义一个字符串数组</p>
<p>（2）断言说明我们创建了一个字符串数组</p>
<p>（3）使用as操作符创建以int数组</p>
<p>（4）断言表明我们创建了一个原始类型的int数组</p>
<p>你也能创建多维数组：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def matrix3 = new Integer[3][3] （1）</span><br><span class="line">assert matrix3.size() == 3</span><br><span class="line"></span><br><span class="line">Integer[][] matrix2 （2）</span><br><span class="line">matrix2 = [[1, 2], [3, 4]]</span><br><span class="line">assert matrix2 instanceof Integer[][]</span><br></pre></td></tr></table></figure>
<p>（1）你能定义一个新数组的边界</p>
<p>（2）或不指定它的边界定义一个新数组</p>
<p>通过与列表相同的标记访问数组的元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String[] names = [&apos;Cédric&apos;, &apos;Guillaume&apos;, &apos;Jochen&apos;, &apos;Paul&apos;]</span><br><span class="line">assert names[0] == &apos;Cédric&apos; （1）</span><br><span class="line"></span><br><span class="line">names[2] = &apos;Blackdrag&apos; （2）</span><br><span class="line">assert names[2] == &apos;Blackdrag&apos;</span><br></pre></td></tr></table></figure>
<p>（1）取得数组的第一个元素</p>
<p>（2）为数组的第三个元素设置一个新值</p>
<p>Java数组初始化标记Groovy不支持，因为大括号会被误解为Groovy的闭包标记。</p>
<h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>在其它语言中，有时候称为字典或关联数组，Groovy称为映射。映射使键到值关联，使用冒号将键值分隔开，每个键值对使用逗号，整个键和值使用方括号包围。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def colors = [red: &apos;#FF0000&apos;, green: &apos;#00FF00&apos;, blue: &apos;#0000FF&apos;] （1）</span><br><span class="line"></span><br><span class="line">assert colors[&apos;red&apos;] == &apos;#FF0000&apos; （2）</span><br><span class="line">assert colors.green == &apos;#00FF00&apos; （3）</span><br><span class="line"></span><br><span class="line">colors[&apos;pink&apos;] = &apos;#FF00FF&apos; （4）</span><br><span class="line">colors.yellow = &apos;#FFFF00&apos; （5）</span><br><span class="line"></span><br><span class="line">assert colors.pink == &apos;#FF00FF&apos;</span><br><span class="line">assert colors[&apos;yellow&apos;] == &apos;#FFFF00&apos;</span><br><span class="line"></span><br><span class="line">assert colors instanceof java.util.LinkedHashMap</span><br></pre></td></tr></table></figure>
<p> (1）我们定义了一个字符串颜色名关联十六进制的html颜色的映射</p>
<p>（2）我们使用下标标记检查red键值关联的内容</p>
<p>（3）我们也能使用属性标记访问绿颜色十六进制表达式</p>
<p>（4）相似的，我们也能使用下标标记添加一个新的键值对</p>
<p>（5）或者使用属性标记添加yellow颜色</p>
<p>当使用这些键的名字时，我们实际上在映射中定义了一个键值。<br>Groovy创建的映射实际是java.util.LinkedHashMap的实例。</p>
<p>如果你尝试在映射中访问不存在的键：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert colors.unknown == null</span><br></pre></td></tr></table></figure>
<p>你将取回null。</p>
<p>在上面的示例中我们使用字符串键值，你也可以使用其他类型作为键值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def numbers = [1: &apos;one&apos;, 2: &apos;two&apos;]</span><br><span class="line"></span><br><span class="line">assert numbers[1] == &apos;one&apos;</span><br></pre></td></tr></table></figure>
<p>这里我们使用数字作为键值，作为数字能清楚的识别数字，因此Groovy不会像之前的示例一样创建一个字符串的键。但是考虑你想传递一个变量代替键的情况下，有一个变量值将会作为键：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def key = &apos;name&apos;</span><br><span class="line">def person = [key: &apos;Guillaume&apos;] （1）</span><br><span class="line"></span><br><span class="line">assert !person.containsKey(&apos;name&apos;) （2）</span><br><span class="line">assert person.containsKey(&apos;key&apos;) （3）</span><br></pre></td></tr></table></figure>
<p>（1）key同’Guillaume’关联，名字将会变为”key”字符串，而不是其值</p>
<p>（2）这个映射不包括”name”键</p>
<p>（3）代替的是，映射包括一个”key”键</p>
<p>你也能通过引用的字符串以及键: [“name”: “Guillaume”]。如果你的见字符串不是一个合法的标识符，这是强制的，例如，如果你想创建一个字符串键像哈希：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;street-name&quot;: &quot;Main street&quot;]。</span><br></pre></td></tr></table></figure>
<p>在映射定义中需要传递变量值，你必须使用圆括号包围这个变量或表达式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person = [(key): &apos;Guillaume&apos;] （1）</span><br><span class="line"></span><br><span class="line">assert person.containsKey(&apos;name&apos;) （2）</span><br><span class="line">assert !person.containsKey(&apos;key&apos;) （3）</span><br></pre></td></tr></table></figure>
<p>（1）这次，我们使用圆括号包围key变量，指示解析器我们传递一个变量，而不是定义一个字符串键</p>
<p>（2）映射包含name键</p>
<p>（3）但映射不像之前包含key键</p>
<h2 id="Groovy-函数与闭包"><a href="#Groovy-函数与闭包" class="headerlink" title="Groovy 函数与闭包"></a>Groovy 函数与闭包</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>有些人可能对函数和方法的叫法一直不太清楚。事实上没有本质区别，在面向过程的语言中一般称为函数，在函数式编程中一般都叫做函数。方法的一般是类的方法，在某一个类中定义的称之为方法。</p>
<p>在Groovy中除非指定了确定的返回类型，void也可以作为返回值的一种，否则定义函数必须加上关键字def。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">String getString()&#123;</span><br><span class="line">    return &quot;hello world&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">def getDef()&#123;</span><br><span class="line">    return &quot;hello world&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void printSomething()&#123;</span><br><span class="line">    println &quot;hello worlld&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//错误的定义，编译可以通过，但是运行时报错</span><br><span class="line">//getString()&#123;</span><br><span class="line">//    return &quot;hello world&quot;</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure>
<p>在定义函数需要传参时可以不设置设置参数的类型，默认是Object类型的，如果用def关键字设置参数类型，事实上也是使用的Object定义参数的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def printSomething01(param)&#123;</span><br><span class="line">    println param</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">def printSomething02(int param)&#123;</span><br><span class="line">    println param</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">def printSomething03(def param)&#123;</span><br><span class="line">    println param</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在调用函数时，如果所定义的函数有参数，在使用的时候可以不使用括号，但是必须得传入参数，参数与函数名以空格隔开。</p>
<p>如果不出入参数必须添加括号，否则代码编译可以通过，但是运行时会出错，会将函数误认为是一个属性。</p>
<p>如果所定义的函数没有参数，在调用的时候必须添加括号，否则运行出错，会将函数误认为是一个属性。</p>
<p>函数调用的时候参数的个数必须匹配，否则也会报错，提示没有定义该函数，如果单个参数除外，可以不用输入参数，系统默认赋值null。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def printSomething(param01,param02)&#123;</span><br><span class="line">    println param01+param02</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printSomething (&quot;hello&quot;,&quot;world&quot;)//helloworld</span><br><span class="line">printSomething &quot;hello&quot;,&quot;world&quot;//helloworld</span><br><span class="line"></span><br><span class="line">//参数个数不对，报错</span><br><span class="line">//printSomething (&quot;hello&quot;)</span><br><span class="line"></span><br><span class="line">def printOne(param)&#123;</span><br><span class="line">    println param</span><br><span class="line">&#125;</span><br><span class="line">printOne()//null</span><br></pre></td></tr></table></figure>
<p>函数可以有返回值，如果有显示地使用return关键字，则返回return指定的返回值，其后面的语句不再执行。</p>
<p>如果没有显式地使用return关键字，则返回函数最后一行语句的运行结果。</p>
<p>如果使用void关键字代替def关键字定义函数，则函数的返回值将为null。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def printSomething()&#123;</span><br><span class="line">    return &quot;hello&quot;</span><br><span class="line">    println &quot;world&quot;</span><br><span class="line">&#125;</span><br><span class="line">println printSomething()//hello</span><br><span class="line"> </span><br><span class="line">def printSomething01()&#123;</span><br><span class="line">    &quot;hello world&quot;</span><br><span class="line">    1</span><br><span class="line">&#125;</span><br><span class="line">println printSomething01()//1</span><br><span class="line"> </span><br><span class="line">def printSomething02()&#123;</span><br><span class="line">    1</span><br><span class="line">    &quot;hello world&quot;</span><br><span class="line">&#125;</span><br><span class="line">println printSomething02()//hello world</span><br></pre></td></tr></table></figure>
<p>支持函数重载，当参数个数不同时，函数名称可以同名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def printSomething(param)&#123;</span><br><span class="line">    println param</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">def printSomething(param01,param02)&#123;</span><br><span class="line">    println param01+&quot; &quot;+param02</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">printSomething(&quot;hello&quot;)</span><br><span class="line">printSomething(&quot;hello&quot;,&quot;world&quot;)</span><br></pre></td></tr></table></figure>
<p>函数内不可以访问函数外的变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int m=1</span><br><span class="line">def n=&quot;hello&quot;</span><br><span class="line">//error</span><br><span class="line">def printSomething()&#123;</span><br><span class="line">    println m//error</span><br><span class="line">    println n//error</span><br><span class="line">&#125;</span><br><span class="line">printSomething()</span><br></pre></td></tr></table></figure>
<p>Groovy支持不定长参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def printSomething(... params) &#123;</span><br><span class="line">    println(params[0])</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">printSomething(&quot;hello&quot;)</span><br><span class="line">printSomething(&quot;hello&quot;,&quot;world&quot;)</span><br></pre></td></tr></table></figure>
<p>函数可以赋值给其它函数，使用语法标记&amp;将函数赋予新的函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def printSomething() &#123;</span><br><span class="line">    println(&quot;hello world&quot;)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//printSomething不可以加括号</span><br><span class="line">def printHello=this.&amp;printSomething</span><br><span class="line"> </span><br><span class="line">printHello()          //hello world</span><br><span class="line">printSomething()      //hello world</span><br></pre></td></tr></table></figure>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>Groovy中闭包是这么定义的:可以用作函数参数和方法参数的代码块。可以把这个代码块理解为一个函数指针。</p>
<p>闭包的定义格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def xxx = &#123; params -&gt; code &#125;</span><br><span class="line">//或者</span><br><span class="line">def xxx=&#123;code&#125;</span><br></pre></td></tr></table></figure>
<p>闭包可以访问外部的变量，记住一点方法是不能访问外部变量的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def str=&quot;hello world&quot;</span><br><span class="line"> </span><br><span class="line">def closure=&#123;</span><br><span class="line">    println str</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">closure()//hello world</span><br></pre></td></tr></table></figure>
<p>闭包是有返回值的，默认最后一行语句就是该闭包的返回值，如果最后一行语句没有不输入任何类型，闭包将返回null。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def closure = &#123;</span><br><span class="line">    println &quot;hello world&quot;</span><br><span class="line">    return &quot;I&apos;m callback&quot;</span><br><span class="line">&#125;</span><br><span class="line">//hello world</span><br><span class="line">//I&apos;m callback</span><br><span class="line">println closure()</span><br><span class="line"> </span><br><span class="line">def noReturn=&#123;</span><br><span class="line">    println &quot;hello world&quot;</span><br><span class="line">&#125;</span><br><span class="line">//hello world</span><br><span class="line">//null</span><br><span class="line">println noReturn()</span><br></pre></td></tr></table></figure>
<p>闭包可以有参数，如果没有定义参数，会有一个隐式的默认参数it，如果没有参数可以将[参数]和[-&gt;]省略。</p>
<p>如果存在参数，在[-&gt;]之前的就是参数，如果只有一个参数，参数可以省略。</p>
<p>闭包中参数名称不能与闭包内或闭包外的参数名重名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def closure=&#123;</span><br><span class="line">    println &quot;hello $it&quot;</span><br><span class="line">&#125;</span><br><span class="line">closure(&quot;admin&quot;)</span><br><span class="line"> </span><br><span class="line">def closure=&#123;</span><br><span class="line">    param01,param02,param03-&gt;println param01+param02+param03</span><br><span class="line">&#125;</span><br><span class="line">closure &quot;hello&quot;,&quot;world&quot;,&quot;ok&quot;</span><br><span class="line"> </span><br><span class="line">def closure=&#123;</span><br><span class="line">    println it</span><br><span class="line">&#125;</span><br><span class="line">closure &quot;hello world&quot;</span><br><span class="line"> </span><br><span class="line">//编译时就不通过</span><br><span class="line">//def param</span><br><span class="line">//def closure=&#123;</span><br><span class="line">//    param-&gt;println param</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure>
<p>闭包可以作为一个参数传递给另一个闭包，也可以在闭包中返回一个闭包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def toTriple = &#123; n -&gt; n * 3 &#125;</span><br><span class="line">def runTwice = &#123; a, c -&gt; c(c(a)) &#125;</span><br><span class="line">println runTwice(5, toTriple)//45</span><br><span class="line"> </span><br><span class="line">def times = &#123; x -&gt; &#123; y -&gt; x * y &#125; &#125;</span><br><span class="line">println times(3)(4)//12</span><br></pre></td></tr></table></figure>
<p>闭包的一些快捷写法，当闭包作为闭包或方法的最后一个参数，可以将闭包从参数圆括号中提取出来接在最后。</p>
<p>如果闭包中不包含闭包，则闭包或方法参数所在的圆括号也可以省略。</p>
<p>对于有多个闭包参数的，只要是在参数声明最后的，均可以按上述方式省略。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def runTwice = &#123; a, c -&gt; c(c(a)) &#125;</span><br><span class="line">println runTwice(5, &#123; it * 3 &#125;) //45 usual syntax</span><br><span class="line">println runTwice(5) &#123; it * 3 &#125; //45</span><br><span class="line"> </span><br><span class="line">def closure = &#123;</span><br><span class="line">    param -&gt; println param</span><br><span class="line">&#125;</span><br><span class="line">closure &quot;hello world&quot;</span><br><span class="line"> </span><br><span class="line">def runTwoClosures = &#123; a, c1, c2 -&gt; c1(c2(a)) &#125;</span><br><span class="line">//when more than one closure as last params</span><br><span class="line">assert runTwoClosures(5, &#123; it * 3 &#125;, &#123; it * 4 &#125;) == 60 //usual syntax</span><br><span class="line">assert runTwoClosures(5) &#123; it * 3 &#125; &#123; it * 4 &#125; == 60 //shortcut form</span><br></pre></td></tr></table></figure>
<p>闭包接受参数的规则，会将参数列表中所有有键值关系的参数，作为一个map组装，传入闭包作为调用闭包的第一个参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def f= &#123;m, i, j-&gt; i + j + m.x + m.y &#125;</span><br><span class="line">println f(6, x:4, y:3, 7)//20</span><br></pre></td></tr></table></figure>
<p>如果闭包的参数声明中没有list，那么传入参数可以设置为list，里面的参数将分别传入闭包参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def c = &#123; a, b, c -&gt; a + b + c &#125;</span><br><span class="line">def list = [1, 2, 3]</span><br><span class="line">println c(list) // 6</span><br></pre></td></tr></table></figure>
<h2 id="Groovy-类与对象"><a href="#Groovy-类与对象" class="headerlink" title="Groovy 类与对象"></a>Groovy 类与对象</h2><p>Groovy类与Java类似，在字节码级都被编译成Java类，由于其在定义变量上面的灵活性，所以在新建一个Groovy类时还是有一些不同的，增加了许多灵活性。由于Groovy是松散型语言，它并不强制你给属性、方法参数和返回值定义类型。如果没有指定类型，在字节码级别会被编译成Object。在定义类的属性时不用刻意加上权限修饰符，默认就是public的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Book&#123;</span><br><span class="line">    def title</span><br><span class="line">    String author</span><br><span class="line">	private int price</span><br><span class="line">	</span><br><span class="line">    public Book(title)&#123;</span><br><span class="line">        this.title=title</span><br><span class="line">    &#125;</span><br><span class="line">    boolean order(int isbn)&#123;</span><br><span class="line">        true</span><br><span class="line">    &#125;</span><br><span class="line">    def title()&#123;</span><br><span class="line">        &quot;Booke Title&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Book book=new Book(&quot;Hello Groovy&quot;)</span><br><span class="line">book.order(1001)</span><br><span class="line"></span><br><span class="line">book.title//获取属性</span><br><span class="line">book.title()//访问方法</span><br></pre></td></tr></table></figure>
<p>如果我们将Book类看做是一个JavaBean，事实上Groovy在编译完成后会自动帮助我们生成getter与setter方法，但是私有属性除外也就是说price属性我们不能使用getter与setter方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Book book=new Book(&quot;Hello Groovy&quot;)</span><br><span class="line">println book.getTitle()//Hello Groovy</span><br><span class="line"> </span><br><span class="line">book.setTitle(&quot;New Groovy&quot;)</span><br><span class="line">println book.getTitle()//New Groovy</span><br><span class="line"> </span><br><span class="line">println book.title////New Groovy</span><br></pre></td></tr></table></figure>
<p>在Groovy中类名和文件名并不需要严格的映射关系，我们知道在Java中主类名必须与文件同名，但是在Groovy中一个文件可以定义多个public类。<br>在Groovy中可以定义与任何类不相关的方法和语句，这些方法通常称为独立方法或者松方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Hello&#123;</span><br><span class="line">    public static String hello()&#123;</span><br><span class="line">        return &quot;hello&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class World&#123;</span><br><span class="line">    public static String world()&#123;</span><br><span class="line">        return &quot;world&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">println Hello.hello()+World.world()</span><br><span class="line"> </span><br><span class="line">def helloWorld()&#123;</span><br><span class="line">	return &quot;hello world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面一个文件名定义为Structure.groovy，在这个文件中包含了类的定义和独立方法声明，它编译之后会发生什么呢。首先会生成一个与文件同名的class文件。所有的松语句都集中在run方法中，并且run方法被该类的main方法调用。独立方法被编译成了类的静态方法。与Java相似，每一个独立的类都会被编译成一个单独的class文件。因此编译Structure.groovy文件最后会被编译成Hello.class、World.class和Structure.class。上面一个文件名定义为Structure.groovy，在这个文件中包含了类的定义和独立方法声明，它编译之后会发生什么呢。首先会生成一个与文件同名的class文件。所有的松语句都集中在run方法中，并且run方法被该类的main方法调用。独立方法被编译成了类的静态方法。与Java相似，每一个独立的类都会被编译成一个单独的class文件。因此编译Structure.groovy文件最后会被编译成Hello.class、World.class和Structure.class。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.sunnyang.com/522.html" target="_blank" rel="external">Groovy进阶之函数、闭包和类</a><br><a href="http://ifeve.com/groovy-syntax/" target="_blank" rel="external">《Groovy语言规范》-语法</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle for Andoid 学习笔记(一):Gradle基础]]></title>
      <url>http://czhzero.com/2016/08/19/gradle-study-1/</url>
      <content type="html"><![CDATA[<h2 id="什么是Gradle"><a href="#什么是Gradle" class="headerlink" title="什么是Gradle"></a>什么是Gradle</h2><p>Gradle是一个构建系统, Android Studio默认创建的project都是基于Gradle构建脚本。在Gradle爆红之前，常用的构建工具是ANT，然后又进化到Maven。ANT和Maven这两个工具其实也还算方便，现在还有很多地方在使用。但是二者都有一些缺点，所以让更懒得人觉得不是那么方便。比如，Maven编译规则是用XML来编写的。XML虽然通俗易懂，但是很难在xml中描述if{某条件成立，编译某文件}/else{编译其他文件}这样有不同条件的任务。相比而言，Gradle使用是DSL,领域相关语言，比起xml更加方便。</p>
<a id="more"></a>
<p>Gradle具有如下特点,</p>
<ol>
<li><p>声明构建和协议构建</p>
<p> Gradle的核心是基于Groovy的丰富的可扩展的领域特定语言（DSL），通过提供你自定义的声明语言元素，Gradle把依赖关系传递到下一层中，这些元素也提供了对很多语言的协议构建支持，比如java、Groovy，OSGI，Web和Scala项目。甚至，声明语言是可扩展的，你可以有自己的新语言元素或者是加强现有的。这样，就提供了一个简洁、易于维护和理解的构建过程。</p>
</li>
<li><p>依赖型编程语言</p>
<p> 声明式的语言构建于一个通用的任务图之上，在你的构建任务重可以充分的利用。它提供了适应你独特需求的最大灵活度的工具。</p>
</li>
<li><p>结构化构建</p>
<p> Gradle的灵活性和和丰富性允许你用通用的设计原则来构建项目。比如说，构建可重用的的逻辑块的逻辑非常简单。不要试图去强迫拆散本应该在一起的东西，比如说是项目的层次结构。这样可以避免项目太分散，因为分散的项目会导致你的构建过程变成一个噩梦！最后，你可以构建一个结构良好、易于维护、理解的构建过程。</p>
</li>
<li><p>深度API</p>
<p> 在构建执行的整个生命周期里，你可以嵌入很多的钩子，Gradle允许你检测和自定义配置和执行非常核心的行为。</p>
</li>
<li><p>Gradle Scales</p>
<p> Gradle Scales 非常好，它可以增加你的生产力。从简单的单项目到企业的多项目构建都可以。随着功能的增加，它可以解决很多大型企业构建过程中的问题。</p>
</li>
<li><p>多项目构建</p>
<p>   Gradle对多项目构建的支持非常好，Gradle还提供了部分构建，如果你构建一个单项目，那么Gradle会构建整个项目的目录，在多项目的构建中，你可以选择构建部分项目，增量构建可以大大的节省你的时间。</p>
</li>
<li><p>很多方式管理依赖</p>
<p> 不同的团队喜欢使用不同的方式来管理外部依赖，Gradle为所有的方式都提供了支持。你可以使用远程的依赖管理库，比如Maven和ivy或者是本地的文件系统。</p>
</li>
<li><p>Gradle是第一个集成的构建工具</p>
<p> Ant的task是支持的，更有趣的事，Ant的project也是支持的。Gradle为Ant的项目提供了深度支持，在运行时可以把Ant的 targets转换城本地的Gradle任务。你可以在Gradle中依赖或者是改进Ant，你甚至可以在Gradle的任务重宣布对build.xml 的依赖。Gradle支持现有的Maven仓库和Ivy仓库，Gradle还提供了将Maven的pom.xml转换成Gradle脚本的工具。 Maven项目的运行时导入时代即将到来。</p>
</li>
<li><p>容易迁移</p>
<p> Gradle可以适应你有的任何结构，因此你可以在项目运行的生产环境中进行项目构建，我们通常建议写一个测试程序来保证项目正常运行，使用Gradle可以尽可能的减少项目迁移出现的问题，这也是进行项目重构的最佳实践，也就是“baby steps”。</p>
</li>
<li><p>Groovy</p>
<p>Gradle使用Grovvy来写脚本，而不是XML，这是因为Groovy比XML的可读性更好。Gradle的设计并不是要提供一个严格的框架。 Gradle提供了一些标准，但是并不是不能修改的。这是Gradle和其他声明性构建系统的区别和特色。Groovy不仅仅是糖衣，添加Groovy得到了一个愉快和富有成效的经验。</p>
</li>
<li><p>Gradle Wrapper</p>
<p>Gradle Wrapper 允许你在没有安装Gradle的机器上运行Gradle脚本，在一些持续性的集成服务器上是非常有用的。</p>
</li>
<li><p>免费开源</p>
<p>Gradle是开源项目，并且采用是ASL协议授权。</p>
</li>
</ol>
<h2 id="Android-Studio-的-Gradle-构建脚本"><a href="#Android-Studio-的-Gradle-构建脚本" class="headerlink" title="Android Studio 的 Gradle 构建脚本"></a>Android Studio 的 Gradle 构建脚本</h2><p>通过Android Studio新建一个Android项目，项目中会自动帮你创建三个gradle文件，settings.gradle,build.gradle,app/build.gradle.</p>
<h3 id="Android-Studio-项目结构截图"><a href="#Android-Studio-项目结构截图" class="headerlink" title="Android Studio 项目结构截图"></a>Android Studio 项目结构截图</h3><p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/011/lALOaELhKM0Cas0BeA_376_618.png" alt="Gradle for Andoid"></p>
<h3 id="Android-Studio-项目目录结构"><a href="#Android-Studio-项目目录结构" class="headerlink" title="Android Studio 项目目录结构"></a>Android Studio 项目目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">GradleStudy/</span><br><span class="line">├── .gitignore</span><br><span class="line">├── .gradle</span><br><span class="line">│   └── 2.10</span><br><span class="line">│       └── taskArtifacts</span><br><span class="line">├── GradleStudy.iml</span><br><span class="line">├── app</span><br><span class="line">│   ├── .gitignore</span><br><span class="line">│   ├── app.iml</span><br><span class="line">│   ├── build</span><br><span class="line">│   │   ├── generated</span><br><span class="line">│   │   ├── intermediates</span><br><span class="line">│   │   ├── outputs</span><br><span class="line">│   │   └── tmp</span><br><span class="line">│   ├── build.gradle</span><br><span class="line">│   ├── libs</span><br><span class="line">│   ├── proguard-rules.pro</span><br><span class="line">│   └── src</span><br><span class="line">│       ├── androidTest</span><br><span class="line">│       ├── main</span><br><span class="line">│       └── test</span><br><span class="line">├── build</span><br><span class="line">│   ├── generated</span><br><span class="line">│   │   └── mockable-android-23.jar</span><br><span class="line">│   └── intermediates</span><br><span class="line">│       └── dex-cache</span><br><span class="line">├── build.gradle</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradle.properties</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">├── local.properties</span><br><span class="line">└── settings.gradle</span><br></pre></td></tr></table></figure>
<h3 id="主要构建文件介绍"><a href="#主要构建文件介绍" class="headerlink" title="主要构建文件介绍"></a>主要构建文件介绍</h3><ul>
<li>settings.gradle </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include &apos;:app&apos;</span><br></pre></td></tr></table></figure>
<p>settings.gradle用来指定项目中所包含的子项目。’app’就是默认的子项目。你也可以通过File/New Module菜单创建新的子项目。</p>
<ul>
<li>Top-level build.gradle </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br><span class="line"></span><br><span class="line">//配置gradle插件，引入android DSL</span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:2.0.0&apos;</span><br><span class="line"></span><br><span class="line">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        // in the individual module build.gradle files</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//统一配置子项目</span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//删除build目录内容</span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> Android项目根目录的gradle文件，默认的根目录gradle会做三件事，</p>
<ol>
<li>配置Android Gradle插件版本</li>
<li>通过allprojects块，配置子项目</li>
<li>清除build文件夹</li>
</ol>
<ul>
<li>SubProject build.gradle </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.android.application&apos;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    //编译sdk版本</span><br><span class="line">    compileSdkVersion 23</span><br><span class="line">    //编译sdk tools的版本</span><br><span class="line">    buildToolsVersion &quot;23.0.3&quot;</span><br><span class="line"></span><br><span class="line">    //默认配置</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.chen.gradle&quot;</span><br><span class="line">        minSdkVersion 15</span><br><span class="line">        targetSdkVersion 23</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//依赖管理</span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</span><br><span class="line">    testCompile &apos;junit:junit:4.12&apos;</span><br><span class="line">    compile &apos;com.android.support:appcompat-v7:23.4.0&apos;</span><br><span class="line">    compile &apos;com.android.support:design:23.4.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子项目的gradle,就是具体管理项目的gradle。每个子项目都是一个Project, 分为<code>com.android.application</code> <code>com.android.library</code> , <code>com.android.test</code> 三种。</p>
<ul>
<li>Gradle Wrapper</li>
</ul>
<p>grade只是一个构建工具，而新版本总是在更迭，所以使用Gradle Wrapper将会是一个好的选择去避免由于gradle版本更新导致的问题。Gradle Wrapper提供了一个windows的batch文件和其他系统的shell文件，当你使用这些脚本的时候，当前gradle版本将会被下载，并且会被自动用在项目的构建，所以每个开发者在构建自己app的时候只需要使用Wrapper。所以开发者不需要为你的电脑安装任何gradle版本，在mac上你只需要运行gradlew，而在windows上你只需要运行gradlew.bat。</p>
<p>你也可以利用命令行./gradlew -v来查看当前gradle版本。下列是wrapper的文件夹：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GradleStudy/</span><br><span class="line"> ├── gradlew</span><br><span class="line"> ├── gradlew.bat</span><br><span class="line"> └── gradle/wrapper/</span><br><span class="line">     ├── gradle-wrapper.jar</span><br><span class="line">     └── gradle-wrapper.properties</span><br></pre></td></tr></table></figure>
<p>可以看到一个bat文件针对windows系统，一个shell脚本针对mac系统，一个jar文件，一个配置文件。配置文件包含以下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#Mon Dec 28 10:00:20 PST 2015</span><br><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dists</span><br><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip</span><br></pre></td></tr></table></figure>
<p>修改配置这个配置文件，就可以更改gradle版本。</p>
<p>另外通过Android Studio, 也可以修改Gradle版本。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/005/lALOXyEtXczizQUC_1282_226.png" alt="Gradle Version"></p>
<ul>
<li>gradle.properties</li>
</ul>
<p>gradle的配置文件，一般用配置一些project的属性，或者 gradle属性.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 配置用户名/密码</span><br><span class="line">NEXUS_USERNAME=deployment</span><br><span class="line">NEXUS_PASSWORD=deployment123</span><br><span class="line"></span><br><span class="line">#配置JVM</span><br><span class="line">org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8</span><br><span class="line">#配置并行编译</span><br><span class="line">org.gradle.parallel=true</span><br><span class="line">#配置守护进程</span><br><span class="line">org.gradle.daemon=true</span><br></pre></td></tr></table></figure>
<h2 id="Gradle-工作流程"><a href="#Gradle-工作流程" class="headerlink" title="Gradle 工作流程"></a>Gradle 工作流程</h2><p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/011/20150905194317170.png" alt=""></p>
<p>Gradle执行的生命周期，包含三个阶段，</p>
<ul>
<li><p>初始化阶段：执行settings.gradle , project实例在这儿创建，如果有多个模块，即有多个build.gradle文件，多个project将会被创建。</p>
</li>
<li><p>配置阶段：在该阶段，解析每个project中的build.gradle。比如multi-project build例子中，解析每个子目录中的build.gradle。在这两个阶段之间，我们可以加一些定制化的Hook。这当然是通过API来添加的。</p>
</li>
<li><p>执行阶段：这一阶段，gradle会决定哪一个tasks会被执行，哪一个tasks会被执行完全依赖开始构建时传入的参数和当前所在的文件夹位置有关。</p>
</li>
</ul>
<p>在settings.gradle添加如下内容,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gradle.beforeProject &#123;</span><br><span class="line">    Project project -&gt;</span><br><span class="line">        println project.name + &quot; is before Project&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gradle.taskGraph.whenReady &#123;</span><br><span class="line">    TaskExecutionGraph graph -&gt;</span><br><span class="line">        println graph.allTasks.each &#123;</span><br><span class="line">            Task task -&gt;</span><br><span class="line">                println task.name + &apos;is ready&apos;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gradle.buildFinished &#123;</span><br><span class="line">    println &apos;gralde build finish&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">GradleStudy is before Project		//主项目</span><br><span class="line">app is before Project				//子项目</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">preBuildis ready</span><br><span class="line">preDebugBuildis ready</span><br><span class="line">checkDebugManifestis ready</span><br><span class="line">preReleaseBuildis ready</span><br><span class="line">prepareComAndroidSupportAnimatedVectorDrawable2340Libraryis ready</span><br><span class="line">prepareComAndroidSupportAppcompatV72340Libraryis ready</span><br><span class="line">prepareComAndroidSupportDesign2340Libraryis ready</span><br><span class="line">prepareComAndroidSupportRecyclerviewV72340Libraryis ready</span><br><span class="line">prepareComAndroidSupportSupportV42340Libraryis ready</span><br><span class="line">prepareComAndroidSupportSupportVectorDrawable2340Libraryis ready</span><br><span class="line">prepareDebugDependenciesis ready</span><br><span class="line">compileDebugAidlis ready</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">:app:preBuild UP-TO-DATE</span><br><span class="line">:app:preDebugBuild UP-TO-DATE</span><br><span class="line">:app:checkDebugManifest</span><br><span class="line">:app:preReleaseBuild UP-TO-DATE</span><br><span class="line">:app:prepareComAndroidSupportAnimatedVectorDrawable2340Library UP-TO-DATE</span><br><span class="line">:app:prepareComAndroidSupportAppcompatV72340Library UP-TO-DATE</span><br><span class="line">:app:prepareComAndroidSupportDesign2340Library UP-TO-DATE</span><br><span class="line">:app:prepareComAndroidSupportRecyclerviewV72340Library UP-TO-DATE</span><br><span class="line">:app:prepareComAndroidSupportSupportV42340Library UP-TO-DATE</span><br><span class="line">:app:prepareComAndroidSupportSupportVectorDrawable2340Library UP-TO-DATE</span><br><span class="line">:app:prepareDebugDependencies</span><br><span class="line">:app:compileDebugAidl UP-TO-DATE</span><br><span class="line">:app:compileDebugRenderscript UP-TO-DATE</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line"></span><br><span class="line">Total time: 6.882 secs</span><br><span class="line">gralde build finish   //最后显示</span><br></pre></td></tr></table></figure>
<h2 id="Gradle-基本组件"><a href="#Gradle-基本组件" class="headerlink" title="Gradle 基本组件"></a>Gradle 基本组件</h2><p>Gradle中，每一个待编译的工程都叫一个Project。每一个Project在构建的时候都包含一系列的Task。比如一个Android APK的编译可能包含：Java源码编译Task、资源编译Task、JNI编译Task、lint检查Task、打包生成APK的Task、签名Task等。<br>一个Project到底包含多少个Task，其实是由编译脚本指定的插件决定。插件是什么呢？插件就是用来定义Task，并具体执行这些Task的东西。<br>刚才说了，Gradle是一个框架，作为框架，它负责定义流程和规则。而具体的编译工作则是通过插件的方式来完成的。比如编译Java有Java插件，编译Groovy有Groovy插件，编译Android APP有Android APP插件，编译Android Library有Android Library插件<br>好了。到现在为止，你知道Gradle中每一个待编译的工程都是一个Project，一个具体的编译过程是由一个一个的Task来定义和执行的。</p>
<blockquote>
<p>每一个Library和每一个App都是单独的Project。根据Gradle的要求，每一个Project在其根目录下都需要有一个build.gradle。build.gradle文件就是该Project的编译脚本，类似于Makefile。</p>
<p>对于multi-projects build，需要在根目录下也放一个build.gradle，和一个settings.gradle</p>
<p>一个Project是由若干tasks来组成的，当gradle xxx的时候，实际上是要求gradle执行xxx任务。这个任务就能完成具体的工作。</p>
</blockquote>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>./gradlew projects</li>
</ul>
<p>查看project数目</p>
<ul>
<li>./gradlew :tasks</li>
</ul>
<p>查看所有的任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------------------</span><br><span class="line">All tasks runnable from root project</span><br><span class="line">------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Android tasks</span><br><span class="line">-------------</span><br><span class="line">androidDependencies - Displays the Android dependencies of the project.</span><br><span class="line">signingReport - Displays the signing info for each variant.</span><br><span class="line">sourceSets - Prints out all the source sets defined in this project.</span><br><span class="line"></span><br><span class="line">Build tasks</span><br><span class="line">-----------</span><br><span class="line">assemble - Assembles all variants of all applications and secondary packages.</span><br><span class="line">assembleAndroidTest - Assembles all the Test applications.</span><br><span class="line">assembleDebug - Assembles all Debug builds.</span><br><span class="line">assembleRelease - Assembles all Release builds.</span><br><span class="line">build - Assembles and tests this project.</span><br><span class="line">buildDependents - Assembles and tests this project and all projects that depend on it.</span><br><span class="line">buildNeeded - Assembles and tests this project and all projects it depends on.</span><br><span class="line">clean - Deletes the build directory.</span><br><span class="line">compileDebugAndroidTestSources</span><br><span class="line">compileDebugSources</span><br><span class="line">compileDebugUnitTestSources</span><br><span class="line">compileReleaseSources</span><br><span class="line">compileReleaseUnitTestSources</span><br><span class="line">mockableAndroidJar - Creates a version of android.jar that&apos;s suitable for unit tests.</span><br><span class="line"></span><br><span class="line">Build Setup tasks</span><br><span class="line">-----------------</span><br><span class="line">init - Initializes a new Gradle build. [incubating]</span><br><span class="line">wrapper - Generates Gradle wrapper files. [incubating]</span><br><span class="line"></span><br><span class="line">Help tasks</span><br><span class="line">----------</span><br><span class="line">buildEnvironment - Displays all buildscript dependencies declared in root project &apos;GradleStudy&apos;.</span><br><span class="line">components - Displays the components produced by root project &apos;GradleStudy&apos;. [incubating]</span><br><span class="line">dependencies - Displays all dependencies declared in root project &apos;GradleStudy&apos;.</span><br><span class="line">dependencyInsight - Displays the insight into a specific dependency in root project &apos;GradleStudy&apos;.</span><br><span class="line">help - Displays a help message.</span><br><span class="line">model - Displays the configuration model of root project &apos;GradleStudy&apos;. [incubating]</span><br><span class="line">projects - Displays the sub-projects of root project &apos;GradleStudy&apos;.</span><br><span class="line">properties - Displays the properties of root project &apos;GradleStudy&apos;.</span><br><span class="line">tasks - Displays the tasks runnable from root project &apos;GradleStudy&apos; (some of the displayed tasks may belong to subprojects).</span><br><span class="line"></span><br><span class="line">Install tasks</span><br><span class="line">-------------</span><br><span class="line">installDebug - Installs the Debug build.</span><br><span class="line">installDebugAndroidTest - Installs the android (on device) tests for the Debug build.</span><br><span class="line">uninstallAll - Uninstall all applications.</span><br><span class="line">uninstallDebug - Uninstalls the Debug build.</span><br><span class="line">uninstallDebugAndroidTest - Uninstalls the android (on device) tests for the Debug build.</span><br><span class="line">uninstallRelease - Uninstalls the Release build.</span><br><span class="line"></span><br><span class="line">Verification tasks</span><br><span class="line">------------------</span><br><span class="line">check - Runs all checks.</span><br><span class="line">connectedAndroidTest - Installs and runs instrumentation tests for all flavors on connected devices.</span><br><span class="line">connectedCheck - Runs all device checks on currently connected devices.</span><br><span class="line">connectedDebugAndroidTest - Installs and runs the tests for debug on connected devices.</span><br><span class="line">deviceAndroidTest - Installs and runs instrumentation tests using all Device Providers.</span><br><span class="line">deviceCheck - Runs all device checks using Device Providers and Test Servers.</span><br><span class="line">lint - Runs lint on all variants.</span><br><span class="line">lintDebug - Runs lint on the Debug build.</span><br><span class="line">lintRelease - Runs lint on the Release build.</span><br><span class="line">test - Run unit tests for all variants.</span><br><span class="line">testDebugUnitTest - Run unit tests for the debug build.</span><br><span class="line">testReleaseUnitTest - Run unit tests for the release build.</span><br><span class="line"></span><br><span class="line">Other tasks</span><br><span class="line">-----------</span><br><span class="line">clean</span><br><span class="line">jarDebugClasses</span><br><span class="line">jarReleaseClasses</span><br><span class="line">transformResourcesWithMergeJavaResForDebugUnitTest</span><br><span class="line">transformResourcesWithMergeJavaResForReleaseUnitTest</span><br></pre></td></tr></table></figure>
<ul>
<li>./gradlew build</li>
</ul>
<p>项目代码编译</p>
<ul>
<li>./gradlew clean</li>
</ul>
<p>清除项目build临时文件</p>
<ul>
<li>./gradlew assemble</li>
</ul>
<p>打包命令，会生成两个debug和release两种类型的apk，<br>如果要单独生成指定类型apk. 可执行 <code>./gradlew assembleRelease</code><br>和 <code>./gradlew assembleDebug</code> 两个命令</p>
<ul>
<li>./gradlew androidDependencies</li>
</ul>
<p>显示项目所有的依赖包</p>
<h3 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h3><p>gradle命令可以同时执行多个任务, 多任务之间用空格隔开,<br>若包含多个相同任务，也只会执行一次。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ./gradlew lint assembleDebug</span><br></pre></td></tr></table></figure>
<p>gradle执行task时，可以提前指定执行task的模块,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 执行task的help指令</span><br><span class="line"></span><br><span class="line">&gt; ./gradlew help --task androidDependencies</span><br><span class="line">&gt; </span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line"></span><br><span class="line">:help</span><br><span class="line">Detailed task information for androidDependencies</span><br><span class="line"></span><br><span class="line">Paths</span><br><span class="line">     :account:androidDependencies</span><br><span class="line">     :app:androidDependencies</span><br><span class="line">     :base:androidDependencies</span><br><span class="line">     :task:androidDependencies</span><br><span class="line">     :team:androidDependencies</span><br><span class="line">     :tools:androidDependencies</span><br><span class="line">     :libraries:android-library-fengxin:androidDependencies</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">## 从上述命令结果，可知，每个子模块，都存在一个androidDependencies任务</span><br><span class="line">## 因此可以针对单个模块执行对应的任务</span><br><span class="line"></span><br><span class="line">&gt; ./gradlew :account:androidDependencies</span><br><span class="line">&gt; ./gradlew :task:androidDependencies</span><br></pre></td></tr></table></figure>
<p>gradle可以通过 -x 命令排除制定的任务, 多个任务间用逗号隔开。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ./gradlew assembleDebug -x lintDebug</span><br></pre></td></tr></table></figure>
<p>gradle可以通过<code>-P</code>命令设置属性值，传参数给task。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 设置一个名为suffix的属性，属性值为test。在项目的build.gradle中均可以获取到。</span><br><span class="line">&gt; ./gradlew assemble -Psuffix=test</span><br></pre></td></tr></table></figure>
<p>如果你的gradle文件没有在build.gradle中调用，你可以使用 -b 命令<br>直接指定需要运行的gradle文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; ./gradlew -b config/dependencies.gradle</span><br></pre></td></tr></table></figure>
<p>gradle的任务名称，可以进行简写，只要能够唯一确定该任务，即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 下面这三个命名就是等价的</span><br><span class="line">&gt; ./gradlew assembleRelease</span><br><span class="line">&gt; ./gradlew aR</span><br><span class="line">&gt; ./gradlew aRel</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<h3 id="通过Android-Studio执行Task"><a href="#通过Android-Studio执行Task" class="headerlink" title="通过Android Studio执行Task"></a>通过Android Studio执行Task</h3><p>Android Studio在界面最右侧，有个Gradle Project浮动窗，<br>打开后，里面将项目中所有的task都放在了里面，双击即可运行。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/011/lALOaFpKs80CXM0CWw_603_604.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章主要介绍了Gradle的基础知识，以及整个Android Studio结构，看完应该会对整个Android Studio的构建过程有些了解了。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://segmentfault.com/a/1190000004229002" target="_blank" rel="external">Gradle for Android 第一篇( 从 Gradle 和 AS 开始 )</a></p>
<p><a href="https://gradle.org/getting-started-android-build/" target="_blank" rel="external">Gradle Recipes for Android</a></p>
<p><a href="http://blog.csdn.net/innost/article/details/48228651" target="_blank" rel="external">深入理解Android之Gradle</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio提高开发效率必备神器 - JRebel for Android]]></title>
      <url>http://czhzero.com/2016/08/10/jrebel-for-android-guide/</url>
      <content type="html"><![CDATA[<p>Android开发的同学都知道，随着Android项目越来越大，编译时间也会逐步增加，项目里随便改几行代码，重新编译一下，少则几十秒，多则三四分钟，实在让人崩溃。网上很多技术博客都提出了各种提高编译速度的版本，本人也试验过<a href="http://www.czhzero.com/2016/07/21/android-studio-compile-speed-up/" target="_blank" rel="external"><strong>很多方法</strong></a>，收效甚微。</p>
<p>这篇文章想给大家介绍的内容就是一个让你不用再苦等的AndroidStudio插件工具。</p>
<blockquote>
<p>JRebel for Android</p>
<p>官网地址: <a href="http://zeroturnaround.com/software/jrebel-for-android/" target="_blank" rel="external">http://zeroturnaround.com/software/jrebel-for-android/</a></p>
</blockquote>
<a id="more"></a>
<hr>
<h2 id="JRebel功能介绍"><a href="#JRebel功能介绍" class="headerlink" title="JRebel功能介绍"></a>JRebel功能介绍</h2><ul>
<li>跳过编译，直接安装运行</li>
</ul>
<p>JRebel的Run功能和Android Studio的Run功能不同，它不会每次Run都检查编译一下所有代码，相反它每次只会处理你修改过的代码，并且直接运行到你的机器上去。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/010/Card1_18_@2x.gif" alt="JRebel"></p>
<ul>
<li>实时调整UI布局</li>
</ul>
<p>很多时候Android开发人员会接到产品经理的 “把这个字体改大一点，我看看效果” “把这个按钮先临时隐藏掉” 等等诸如此类需求。虽然只是修改一行代码，但是我们编译运行要三四分钟。是不是很痛苦？</p>
<p>这个时候只要点击一下JRebel的 <strong>[Apply Changes ]</strong> 按钮。你的修改便会直接显现到你的app上，而且你的app都不会回到登录页面，还是停留在原来的页面。是不是很牛？</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/010/Card2_18_@2x.gif" alt="JRebel"></p>
<ul>
<li>方便快捷的修改bug</li>
</ul>
<p>修改bug时候的时候，与调整ui一样快捷，只需十秒钟就可以验证。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/010/Card3_18_@2x.gif" alt="JRebel"></p>
<h2 id="JRebel安装与使用"><a href="#JRebel安装与使用" class="headerlink" title="JRebel安装与使用"></a>JRebel安装与使用</h2><ul>
<li>通过AndroidStudiox下载插件</li>
</ul>
<p>打开AndroidStudio的Prefrences菜单，按下图操作，即可下载安装</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/010/lALOZk-yXc0Cxs0Ejw_1167_710.png" alt="JRebel"></p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/010/lALOZk-0Ac0Ci80DJw_807_651.png" alt="JRebel"></p>
<p>如果下载速度过慢，可以先用迅雷下载安装包，再选择本地安装。<a href="http://7xvouf.com1.z0.glb.clouddn.com/jrebel-for-android.zip" target="_blank" rel="external">Jrebel for Android 1.3.2 下载地址</a></p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/010/lALOZmOPi80C0c0Feg_1402_721.png" alt=""></p>
<ul>
<li>JRebel使用</li>
</ul>
<p>安装完成后，系统提示你重启AndroidStudio,重启后，会再提示你输入Lisence或者进行试用。</p>
<p>这里我选择的是试用21天。操作完成后，工具栏多出三个按钮。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/010/lALOZlAoTE7NAuA_736_78.png" alt=""></p>
<p>同时Run菜单栏也会多次三个选项菜单。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/010/lALOZlAqrs0Bqc0BUg_338_425.png" alt=""></p>
<p>其中，</p>
<ol>
<li>选项一是JRebel Run, 相当于官方的Run</li>
<li>选项二是JRebel Debug, 相当于官方的Debug</li>
<li>选项三是Apply Changes, 可以不重启app,直接将修改应用到app中。</li>
</ol>
<blockquote>
<p>注意，只有先运行选项一或者选择二之后，才能运行三。另外，[Apply Changes]在某些Android 6.0以上机器上无法正常使用，不过选项一和选项二是是可以使用的。期待官方修复这个问题。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Jrebel for Android 与 Android Studio 2.0官方的Instant Run对Sdk版本没什么限制。同时官方Instant Run在使用时仍然有许多限制，具体可参看<a href="https://developer.android.com/studio/run/index.html" target="_blank" rel="external">Android Developers</a>。不过可惜的是，Jrebel for Android并不是免费的，如何选择，各位看官就仁者见仁智者见智了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解读Android6.0新功能和Api变更]]></title>
      <url>http://czhzero.com/2016/07/31/android-6-0-changes/</url>
      <content type="html"><![CDATA[<p>从 Android A 到 Android M，Android 的每个甜品的变化的细节里都是新版本的改进。上一个大版本 Android 5.0（也就是 Android L）为我们带来了 Material Design 清爽但不失细节的设计风格，从此原生 Android 的颜值终于在舆论中得到了普遍赞誉；而在 Android 6.0 中，我们得到的更多是内在的提升。</p>
<p>新功能在使用体验上提升的效果是非常明显的，内在体验优化的意义不亚于全新的设计语言带来的新鲜感与友好度的提升。从外表到内在，我们看到的是一个更为成熟的 Android 系统。</p>
<blockquote>
<p>如果你之前已经发布过 Android 应用程序，要意识到这些变更对应用程序的影响。</p>
</blockquote>
<a id="more"></a>
<h1 id="Runtime-Permissions-运行时权限"><a href="#Runtime-Permissions-运行时权限" class="headerlink" title="Runtime Permissions (运行时权限)"></a>Runtime Permissions (运行时权限)</h1><p>这个版本中引入了新的权限模型，现在用户可以在运行时直接管理应用程序的权限。这个模型基于用户对权限控制的更多可见性，同时为应用程序的开发者提供更流畅的应用安装和自动升级。用户可以为已安装的每个应用程序独立的授予或者取消权限。</p>
<p>在运行于目标版本 Android 6.0 (API 级别 23) 及以上的应用程序中，必须在运行时检查并请求权限。通过新的 checkSelfPermission() 方法来确定你的应用程序是否已经被授权。通过新的 requestPermissions() 方法来请求权限。即使你的应用程序运行的目标版本不是 Android 6.0 (API 级别 23)，你也应该在新的授权模型下来测试应用程序。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/008/Android-m-4.jpg" alt="解读Android6.0新功能和Api变更"></p>
<h1 id="Doze-and-App-Standby-休眠与应用挂起"><a href="#Doze-and-App-Standby-休眠与应用挂起" class="headerlink" title="Doze and App Standby(休眠与应用挂起)"></a>Doze and App Standby(休眠与应用挂起)</h1><p>这个版本为空闲的设备和应用程序引入了电源节能优化。这个特性将影响所有应用程序，故确保自己的应用程序在这些新模式下进行测试。</p>
<ul>
<li><p>休眠：如果用户将设备拔下，并将其静置，关闭屏幕，经过一段时间，设备将进入休眠模式。这时候，设备试图让系统保持在一个睡眠的状态。这种模式下，设备周期性的恢复平常的操作，以便应用程序同步，系统则可以处理一些延时的操作。</p>
</li>
<li><p>应用挂起：应用挂起则允许系统当用户不再使用应用程序时，将其定义为空闲。当用户经过一段时间没有触摸应用程序时，系统可以做这个决定。设备被拔线时，系统禁用网络访问，停止应用程序的同步及操作，则被认为是空闲。</p>
</li>
</ul>
<h1 id="Apache-HTTP-Client-Removal-移除-Apache-HTTP-客户端"><a href="#Apache-HTTP-Client-Removal-移除-Apache-HTTP-客户端" class="headerlink" title="Apache HTTP Client Removal (移除 Apache HTTP 客户端)"></a>Apache HTTP Client Removal (移除 Apache HTTP 客户端)</h1><p>Android 6.0 发布版移除了对 Apache HTTP 客户端的支持。如果你的应用程序使用该客户端，并且目标运行版本为 Android 2.3 (API 级别9) 及以上，需要使用 HttpURLConnection 类来代替。这个 API 更加的高效，因为它通过对用户透明的压缩、响应缓存来减少网络开销，并最小化电量消耗。要继续使用 Apache HTTP 的 API，你需要在 build.gradle 文件中声明下面的编译期依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    useLibrary &apos;org.apache.http.legacy&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="BoringSSL"><a href="#BoringSSL" class="headerlink" title="BoringSSL"></a>BoringSSL</h1><p>Android 从 OpenSSL 转移到了 BoringSSL 库。如果你在应用程序中使用 Android NDK，千万不要将加密库链接到除 NDK API 之外的任何库，如 libcrypto.so 和 libssl.so。这些库不是公开 API，有可能在没有收到通知的情况下在发布版和设备间发生变更或中断。这种情况你将把自己暴露在安全威胁下。你应该修改自己的本地代码来通过 JNI 调用 Java 加密 API 或者静态链接你选择的一个加密库。</p>
<h1 id="Access-to-Hardware-Identifier-访问硬件标识符"><a href="#Access-to-Hardware-Identifier-访问硬件标识符" class="headerlink" title="Access to Hardware Identifier (访问硬件标识符)"></a>Access to Hardware Identifier (访问硬件标识符)</h1><p>为了给用户更多的数据保护，从这个版本开始， Android 移除了通过 WiFi 和蓝牙 API 来在应用程序中可编程的访问本地硬件标示符。现在 WifiInfo.getMacAddress() 和 BluetoothAdapter.getAddress() 方法都将返回 02:00:00:00:00:00 常量。</p>
<p>要通过蓝牙和 WiFi 扫描来访问附近外部设备的硬件标示符，应用程序需要 ACCESS_FINE_LOCATION 和 ACCESS_COARSE_LOCATION 权限：</p>
<ul>
<li>WifiManager.getScanResults())</li>
<li>BluetoothDevice.ACTION_FOUND</li>
<li>BluetoothLeScanner.startScan())</li>
</ul>
<blockquote>
<p>注意：在一个运行 Android 6.0 (API 级别 23) 的设备初始化后台的 WiFi 或蓝牙扫描时，操作对于外部设备是可见的，且被赋予一个随机的 MAC 地址。</p>
</blockquote>
<h1 id="Notifications-通知"><a href="#Notifications-通知" class="headerlink" title="Notifications (通知)"></a>Notifications (通知)</h1><p>这个版本移除了 Notification.setLatestEventInfo() 方法。使用 Notification.Builder 类来代替构造方法。要重复的更新通知，要重用 Notification.Builder 实例。调用 build() 方法来获取更新过的 Notification 实例。</p>
<p>adb shell dumpsys nnotification 命令不在答应通知文本。使用 adb shell dumpsys notification –noredcat 命令来在同志对象中打印文本。</p>
<h1 id="AudioManager-Changes-AudioManager-变更"><a href="#AudioManager-Changes-AudioManager-变更" class="headerlink" title="AudioManager Changes (AudioManager 变更)"></a>AudioManager Changes (AudioManager 变更)</h1><p>通过 AudioManager 类来直接设置音量或者使流静音已经不再支持。 setStreamSolo() 方法被弃用，你需要调用 requestAudioFocus() 来代替。类似的， setStreamMute() 方法被弃用，替换为 adjustStreamVolume() 方法并传递方向值 ADJUST_MUTE 或 ADJUST_UNMUTE。</p>
<h1 id="Text-Selection-文本选择"><a href="#Text-Selection-文本选择" class="headerlink" title="Text Selection (文本选择)"></a>Text Selection (文本选择)</h1><p>当用户在应用程序中选择文本时，你可以在悬浮工具栏中显示文本选择工作，如剪切、复制、粘贴。用户交互实现与为独立视图启动上下文动作模式中描述的上下文动作栏类似。</p>
<p>为文本选择实现悬浮工具栏，需要在已存在的应用程序中做如下修改：</p>
<ul>
<li><p>在 View 或者 Activity 对象中，通过修改 startActionMode(Callback) 为 startActionMode(Callback, ActionMode.TYPE_FLOATING) 来改变 ActionMode。</p>
</li>
<li><p>使已经存在的 ActionMode.Callback 的实现继承自 ActionMode.Callback2 。</p>
</li>
<li><p>重载 onGetContentRect() 方法来提供内容 Rect 对象(如文本选择矩形)在视图中的坐标。</p>
</li>
<li><p>如果矩形位置不在有效，并且这是需要刷新的唯一元素，则调用 invalidateContentRect() 方法。</p>
</li>
</ul>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/008/text-selection.gif" alt="解读Android6.0新功能和Api变更"></p>
<p>如果你在使用 Android 22.2 修订版的兼容包，悬浮工具栏不是向后兼容的，且使用默认的 ActionMode 对象。这导致悬浮工具栏无法显示。在 AppCompatActivity 中启用 ActionMode，首先调用 getDelegate() ，然后在返回的 AppCompatDelegate 对象中调用 setHandleNativeActionModesEnabled()，并设置输入参数为 false。这个调用为框架返回可控的 ActionMode 对象。在运行 Android 6.0 (API 级别 23) 的设备上，这允许框架支持 ActionBar 或悬浮工具栏模式。在 Android 5.1 (API 级别 22) 或更低版本，只有 ActionBar 是支持的。</p>
<h1 id="Browser-Bookmark-Changes-浏览器书签变更"><a href="#Browser-Bookmark-Changes-浏览器书签变更" class="headerlink" title="Browser Bookmark Changes (浏览器书签变更)"></a>Browser Bookmark Changes (浏览器书签变更)</h1><p>这个版本移除了对全局书签的支持。 android.provider.Browser.getAllBookmark() 和 android.provider.Browser.saveBookmark() 方法被移除。同样的， READ_HISTORY_BOOKMARKS 和 WRITE_HISTORY_BOOKMARKS 权限被移除。如果你的应用程序的目标运行版本为 Android 6.0 (API 级别 23) 或者更高，不要从全局提供者访问书签或者使用书签权限。现在，你的应用程序需要内部保存书签数据。</p>
<h1 id="Android-Keystore-Changes-密钥变更"><a href="#Android-Keystore-Changes-密钥变更" class="headerlink" title="Android Keystore Changes (密钥变更)"></a>Android Keystore Changes (密钥变更)</h1><p>在这个版本中， Android Keystore 提供器 不在支持 DSA。 ECDSA 则仍然被支持。</p>
<p>当安全锁屏被禁用或重置时，不要求加密的 key 将不再被删除。要求加密的 key 则会在这些事件中被删除。</p>
<h1 id="Wi-Fi-and-Networking-Changes-Wi-Fi和网络变更"><a href="#Wi-Fi-and-Networking-Changes-Wi-Fi和网络变更" class="headerlink" title="Wi-Fi and Networking Changes (Wi-Fi和网络变更)"></a>Wi-Fi and Networking Changes (Wi-Fi和网络变更)</h1><p>这个版本为 Wi-Fi 和 网络 API 引入了下面的行为变更：</p>
<ul>
<li><p>应用程序只有在创建了 WifiConfiguration 对象以后，才能更变这些对象的状态。当 WifiConfiguration 被用户或者其他应用程序创建时，你将不允许修改和删除这些 WifiConfiguration 对象。</p>
</li>
<li><p>在之前的版本中，如果应用程序使用 enableNetwork() ，并设置 disableAllOthers=true 来强制设备连接到指定的 Wi-Fi 网络，设备将和其他网络断开。这个版本中，这些设备将不再和其他网络断开。如果应用程序的 targetSdkVersion 是 20 或者更低，则会连接被选中的 Wi-Fi 网络。如果应用程序的 targetSdkVersion 是 21 或者更高，使用多网络 API (如 openConnection()， bindSocket() 及新的 bindProcessToNetwork() 方法)来确保它的网络通信是发给被选中的网络。</p>
</li>
</ul>
<h1 id="Camera-Service-Changes-摄像头服务变更"><a href="#Camera-Service-Changes-摄像头服务变更" class="headerlink" title="Camera Service Changes (摄像头服务变更)"></a>Camera Service Changes (摄像头服务变更)</h1><p>在这个版本中，在摄像头服务中访问共享资源的模式发生了变更，不再是以前的”先到先得”，而是具备高优先级的将优先处理。服务行为的变更包括：</p>
<ul>
<li><p>访问摄像头子系统的资源，包括打开和配置摄像设备，依赖于客户端应用进程的优先级。用户可见或者在前台活动的应用程序进程往往具备更高的优先级，使得摄像资源更易获得，也更加可靠。</p>
</li>
<li><p>当更高优先级的应用程序视图使用摄像头时，具有低权限的活动摄像头客户端应用程序可能被中断。在被弃用的 Camera API 中，错误会在被中断客户端的 onError() 中被调用。在 Camera2 API 中，错误结果则在 onDisconnected() 中被调用。</p>
</li>
<li><p>在具备适合摄像头硬件的设备上，不同的应用进程可以同时独立地打开和使用独立的摄像头设备。虽然如此，多进程使用时，同时访问摄像头会造成设备性能的急剧下降，这将被摄像头服务所检测到并不被允许。这个变更使得由于较低优先级而被中断的客户端，即使当没有其他应用直接访问时，也会试图访问一样的设备。</p>
</li>
<li><p>改变当前用户会导致之前用户账号的应用程序中活动那个的摄像头客户端被中断。对摄像头的访问是被当前设备用户所限制的。实际上，这意味着当用户切换到不同的账户下时，原来的”访客”账号所使用的摄像头子系统是不可能继续运行的。</p>
</li>
</ul>
<h1 id="Runtime-运行时"><a href="#Runtime-运行时" class="headerlink" title="Runtime (运行时)"></a>Runtime (运行时)</h1><p>通过 newInstance() 方法 ART 运行时现在正确的实现了访问规则。这个变更修复了之前版本中 Dalvik 检查访问规则时的错误。如果你的应用程序使用 newInstance() 方法，且你想要覆盖访问检查，调用 setAccessible() 方便，并设置参数为 true。如果你的应用程序使用 v7 兼容库 和 v7 recyclerview 库。你需要升级应用程序中的相关库到最新版本。否则，需要确保 XML 中所引用的自定义类已经被升级，其构造方法是可访问的。</p>
<p>这个版本升级了动态链接器的行为。动态连接器现在可以理解库的 soname 和 它的路径之间的区别，且实现了通过 soname 来搜索。在加载时，之前可用的应用程序可能会被提示具有不可用的 DT_NEEDED 条目(通常是在构建机器文件系统中的绝对路径)。</p>
<p>dlopen(3) RTLD_LOCAL 标志现在被正确实现了。 RTLD_LOCAL 是默认的，因此调用 dlopen(3) 是不明确使用 RTLD_LOCAL 是有效的(除非应用之前有明确使用 RTLD_GLOBAL )。使用 RTLD_LOCAL ，标记在调用 dlopen(3) 加载库之前是不可用的(这与被 DT_NEEDED 条目引用恰恰相反)。</p>
<p>在之前版本的 Android，如果你的应用请求系统来加载包含文本重定位段的动态链接库，系统会显示警告，但允许继续加载库。从这个版本开始，如果你的目标运行 SDK 版本为 23 或以上，系统会拒绝这个库。为了辅助检测库是否被成功加载，应用程序需要为 dlopen(3) 失败添加日志，并在 dlerror(3) 返回值中包含问题的描述文本。学习更多关于如何处理文本重定位段，可以查看这个指南。</p>
<h1 id="APK-验证-APK-Validation"><a href="#APK-验证-APK-Validation" class="headerlink" title="APK 验证 (APK Validation)"></a>APK 验证 (APK Validation)</h1><p>Android 平台现在执行更加严格的 APK 验证。如果一个文件在清单文件中被声明，但在 APK 中却没有，那么这个 APK 被认为是无效的。如果任意的内容被移除， APK 需要重新签名。</p>
<h1 id="USB-连接-USB-Connection"><a href="#USB-连接-USB-Connection" class="headerlink" title="USB 连接 (USB Connection)"></a>USB 连接 (USB Connection)</h1><p>通过 USB 端口的设备连接现在默认被设置为充电模式。想要通过 USB 连接来访问设备和它的内容，用户需要为这些交互提供明确的授权。如果你的应用程序支持用户通过 USB 端口与设备交互，需要确保这些交互被明确启用。</p>
<h1 id="Android-for-Work-Changes-Android-for-Work-变更"><a href="#Android-for-Work-Changes-Android-for-Work-变更" class="headerlink" title="Android for Work Changes (Android for Work 变更)"></a>Android for Work Changes (Android for Work 变更)</h1><p>这个版本包括下面的 Android for Work 行为变更：</p>
<ul>
<li><p>个人上下文中的联系人。Google 拨号器通话记录现在可以在用户查看已通话记录时显示当前联系人。在 Google 拨号器中通过设置 setCrossProfileCallerIdDisabled() 为 true 来隐藏当前联系人。当设置 setBluetoothContactSharingDisabled() 为 false 时，当前联系人能通过蓝牙显示在设备联系人中。默认情况下，其设置为 true。</p>
</li>
<li><p>移除 Wi-Fi 配置：由外部拥有者添加(如通过 addNetworkd() 方法)的 Wi-Fi 配置现在在当前 profile 被删除时也将被移除。</p>
</li>
<li><p>紧闭 Wi-Fi 配置：如果 WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN 为非空时，任何由活动的设备拥有者创建的 Wi-Fi 配置将不能用户被修改和删除。用户可以创建和修改自己的 Wi-Fi 配置。活动的设备拥有者拥有编辑和移除任意 Wi-Fi 配置的特权，包括不是由他们创建的配置。</p>
</li>
<li><p>通过 Google 账号下载使用策略控制器：当一个要求 WPC 应用程序来管理的 Google 账号被添加到管理上下文之外的设备中时，添加账号流程会提示用户安装合适的 WPC。这些行为也可以应用到通过在初始设备创建向导中 设置 &gt; 账号 添加的账号。</p>
</li>
<li><p>制定 DevicePolicyManager API 行为变更：</p>
<ul>
<li><p>调用 setCameraDisabled() 方法来影响当前调用用户的摄像头。</p>
</li>
<li><p>此外， setKeyguardDisabledFeatures() 方法对 Profile 用户是可用的，与设备拥有者一样。</p>
</li>
<li><p>Profile 拥有者可以设置键盘守卫的约束：</p>
<ul>
<li>KEYGUARD_DISABLE_TRUST_AGENTS 和 KEYGUARD_DISABLE_FINGERPRINT 将影响到 profile 父用户的键盘守卫设置。</li>
<li>KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS 只会影响在 profile 中由应用程序生成的通知。</li>
</ul>
</li>
<li><p>createAndInitializeUser() 和 createUser() 方法已经被弃用。</p>
</li>
<li><p>当给定用户的应用程序在前台运行时， setScreenCaptureDisabled() 方法将阻塞辅助结构。<br>SHA-256 的默认值为 </p>
</li>
<li><p>EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM 。为保持兼容性， SHA-1 仍然被支持，但在将来会被移除。 EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM 则仅接受 SHA-256。</p>
</li>
<li><p>原来存在的设备初始化 API 在 Android 6.0 (API 级别 23) 中被移除了。</p>
</li>
<li><p>EXTRA_PROVISIONING_RESET_PROTECTION_PARAMETERS 被移除，因此 NFC bump provisioning 无法通过编程的方式解锁重置被保护的设备。</p>
</li>
<li><p>现在在被管理的设备中通过 NFC 可以使用 EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE 来传递数据给设备拥有者的应用程序。</p>
</li>
<li><p>Android M 上的 Android for Work API 是经过优化的，包括 Work 配置，辅助层及其他。新的 DevicePolicyManager 权限 API 不会影响 Android 之前版本的应用程序。</p>
</li>
<li><p>当用户通过 ACTION_PROVISION_MANAGED_PROFILE 或者 ACTION_PROVISION_MANAGED_DEVICE 意图，从创建流程中的同步部分返回时，系统将返回 RESULT_CANCELED 结果码。</p>
</li>
</ul>
</li>
<li><p>其他 API 变更：</p>
<ul>
<li>数据用法： android.app.usage.NetworkUsageStates 类重命名为 NetworkStats。</li>
</ul>
</li>
<li><p>全局设置变更：</p>
<ul>
<li><p>下面的设置不能继续通过 setGlobalSettings() 方法设置：</p>
<ul>
<li>BLUETOOTH_ON</li>
<li>DEVELOPMENT_SETTINGS_ENABLED</li>
<li>MODE_RINGER</li>
<li>NETWORK_PREFERENCE</li>
<li>WIFI_ON</li>
</ul>
</li>
<li><p>下面全局设置可以通过 setGlobalSettings() 方法设置：</p>
<ul>
<li>WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://developer.android.com/about/versions/marshmallow/android-6.0-changes.html#behavior-afw" target="_blank" rel="external">Android 6.0 Changes</a></li>
<li><a href="http://www.linfuyan.com/android-m-changes/" target="_blank" rel="external">Android 6.0 新功能及主要 API 变更</a></li>
<li><a href="http://www.ifanr.com/app/569615" target="_blank" rel="external">解读 Android 6.0 如何让你甜到心窝</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[技术高手如何炼成？]]></title>
      <url>http://czhzero.com/2016/07/30/how-to-be-stronger/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文转载自: 知乎-郑均<br>原文地址: <a href="http://zhuanlan.zhihu.com/zhengyun/20270317" target="_blank" rel="external">http://zhuanlan.zhihu.com/zhengyun/20270317</a></p>
</blockquote>
<p>面试的时候，我会问面试者，你日常如何构建自己的知识体系，如何让自己更高更快更强？多数工程师并没有深入地思考过这个问题，基本上是零敲碎打，随机性大。本着不能让你白来一趟的精神，好为人师的我会娓娓道来：</p>
<a id="more"></a>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/007/bingshanyijiao.jpg" alt="技术高手如何炼成？"></p>
<h1 id="第一阶段-认真构建完整的知识体系"><a href="#第一阶段-认真构建完整的知识体系" class="headerlink" title="第一阶段 认真构建完整的知识体系"></a>第一阶段 认真构建完整的知识体系</h1><p>十几年前我投身软件行业的时候，光是讲解数据库原理、操作系统、TCP/IP、组网、算法等等基础知识的英文原版书摞起来就等身，认认真真看完，各种上手实践，入行后，读遍 C++ 各种经典著作，读遍各种协议原文，认认真真打基础。很多工程师都说自己平常就是在某些 IT 门户上看看推荐的博文或新闻，我说这属于典型的零敲碎打，不够刺激。</p>
<p>聊到这时，我会举一个例子，为什么要阅读长篇小说，因为中短篇小说就像用针扎你，而长篇小说就像把你装进一个沙袋里吊起来，从四面八方用狼牙棒打你，酣畅淋漓。构建可用的知识体系，就得读书，书是有体系结构的，你关心不关心，现阶段你用到用不到，它都讲到了，从头到尾看几遍，针扎得透透的。</p>
<p>何谓知识体系？</p>
<p>几年前，前支付宝架构师姚建东曾经在我们公司做过技术人员如何规划自己的分享讲座，他是这么论述的：</p>
<p>技术与技巧包括：</p>
<ul>
<li>计算机基础理论<ul>
<li>计算机模型：内存/IO/时钟/CPU……</li>
<li>算法</li>
<li>专项技术领域：</li>
<li>数据挖掘</li>
<li>数据管理</li>
<li>智能推荐</li>
<li>搜索</li>
<li>……</li>
</ul>
</li>
</ul>
<ul>
<li>语言与工具<ul>
<li>语言与相关体系</li>
<li>开发工具，分析工具，代码管理工具</li>
<li>HTML/CSS/JS/Ajax</li>
<li>常用框架与第三方类库</li>
</ul>
</li>
</ul>
<ul>
<li>调试与测试<ul>
<li>调试方法和哲学</li>
<li>定位问题</li>
<li>BUG管理工具</li>
<li>单元测试</li>
<li>集成测试</li>
<li>性能测试</li>
<li>安全测试</li>
<li>兼容性测试与方法</li>
<li>JS/Ajax测试与方法</li>
<li>服务层测试</li>
<li>Web层测试</li>
</ul>
</li>
</ul>
<ul>
<li>网络与系统<ul>
<li>TCP/IP协议与模型，HTTP/SMTP等协议</li>
<li>Linux系统，网络分析工具，系统分析工具</li>
<li>容量，流量与负载均衡</li>
<li>应用部署、规范、规划</li>
<li>安全</li>
<li>监控与故障分析</li>
<li>磁盘与存储</li>
<li>Shell</li>
<li>DNS与域名</li>
<li>缓存，反向代理</li>
<li>图片服务器（海量小文件）</li>
</ul>
</li>
</ul>
<ul>
<li>需求挖掘与分析<ul>
<li>需求文档格式</li>
<li>需求访谈</li>
<li>需求分析方法，需求分析工具</li>
<li>领域知识与经验</li>
</ul>
</li>
</ul>
<ul>
<li>系统分析与设计<ul>
<li>UML语言与模型</li>
<li>分析模式</li>
<li>设计模式，领域驱动</li>
<li>系统分析文档格式</li>
<li>系统设计文档格式</li>
<li>功能性需求与非功能性需求</li>
</ul>
</li>
</ul>
<ul>
<li>数据与系统<ul>
<li>数据库</li>
<li>可伸缩策略，扩展策略，备份，容灾，性能，安全，高可用……</li>
<li>数据设计与范式，SQL/NoSQL，Cache，分布式文件</li>
</ul>
</li>
</ul>
<ul>
<li>架构设计<ul>
<li>架构模式，典型互联网公司架构演进历史</li>
<li>架构原则，常用策略</li>
<li>架构设计方法</li>
<li>非功能性理解<ul>
<li>扩展性</li>
<li>伸缩性</li>
<li>稳定性</li>
<li>一致性</li>
<li>性能</li>
<li>吞吐量</li>
</ul>
</li>
<li>容量预测与规划</li>
<li>架构体系与相关技术</li>
</ul>
</li>
</ul>
<ul>
<li>过程与管理<ul>
<li>分析过程</li>
<li>研发过程</li>
<li>评审过程</li>
<li>测试过程</li>
<li>发布过程</li>
<li>回滚过程</li>
<li>文档管理</li>
<li>知识管理</li>
<li>项目管理</li>
</ul>
</li>
</ul>
<p>以上其实就是一份从业基础知识清单，你可以按图索骥，阅读相关书籍。</p>
<h1 id="第二阶段-顺着一个Topic钻进去，锻炼自己的预研能力"><a href="#第二阶段-顺着一个Topic钻进去，锻炼自己的预研能力" class="headerlink" title="第二阶段 顺着一个Topic钻进去，锻炼自己的预研能力"></a>第二阶段 顺着一个Topic钻进去，锻炼自己的预研能力</h1><p>无论公司业务还是自己喜欢做的事，都可以抽象出通用性课题，然后以做论文的方式杀进去。这个事情得反复操练，有意识操练。</p>
<p>做事方式为：</p>
<ul>
<li>抽象出 Topic——如分布式锁，分布式并行计算引擎，防CSRF的FormToken自动生成框架，定时任务管理与调度平台，分布式跟踪，等等</li>
<li>向功课好的学生学习——有针对性地深入了解业界其他公司是如何分析问题和解决问题的，汇总各种方案，站在巨人的肩膀上</li>
<li>分析特定应用场景，技术选型</li>
<li>兼顾高可用性和可伸缩，做设计评审</li>
<li>做测试自证靠谱，梳理知识点，开技术分享会</li>
<li>上线商用，总结经验教训，开经验分享会</li>
</ul>
<p>其中一个重点是汇总和分享。05年时，应电信级统一消息业务需要，我去研究了 SIP 协议，做了各种试验，分析报文，写了一系列的幻灯片，做了公开分享，一时间还颇受欢迎：</p>
<ul>
<li>SIP_to_Freshman_by_zhengyun.ppt</li>
<li>SIP之穿越NAT_by_zhengyun.ppt</li>
<li>SIP体系架构讲义及消息交互演示_by_zhengyun.ppt</li>
<li>SIP多方会话消息之实例讲解_by_zhengyun.ppt</li>
<li>SIP安全框架之认证[NTLM和Kerberos]_by_zhengyun.ppt</li>
<li>SIP消息之逐项讲解_by_zhengyun.ppt</li>
</ul>
<p>为什么要写出来、讲出来呢？因为有一个学习金字塔理论，如下图所示：</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/007/xuexijinzita.png" alt="技术高手如何炼成？"></p>
<p>我们读过的事情能够记住学习内容的10%，<br>我们听过的事情能够记住20%，<br>我们看过的事情能够记住30%，<br>我们听过和看过的事情能够记住50%——如看影像/看展览/看演示/现场观摩，<br>我们说过的事情能够记住70%——如参与讨论/发言，<br>我们说过和做过的事情能够记住90%——如做报告，给别人讲，亲身体验，动手做。</p>
<p>这也就是我在<a href="http://www.cnblogs.com/zhengyun_ustc/p/rightThings.html" target="_blank" rel="external">《窝窝研发过去几年做对了哪些事》</a>中阐述的管理方法：我们从入职之后就有意识地训练大家，让大家能够公开陈述、清晰表达。所以，试用期内，新人必须做一次技术分享和一次技术评审，面对各方的 challenge；预研的中间和结尾都要有分享会；平时也要定期组织技术讲座。</p>
<h1 id="第三阶段-疯狂回答技术问题"><a href="#第三阶段-疯狂回答技术问题" class="headerlink" title="第三阶段 疯狂回答技术问题"></a>第三阶段 疯狂回答技术问题</h1><p>知识体系慢慢构建，与业务相关的抽象 Topic 也在探索中。但这还不够。因为你亲身接触到的世界太小，可能不足以构成挑战，你可能意识不到自己缺多少知识和技能，不利于你分析问题、提出问题和解决问题的能力培养。</p>
<p>所以，要主动出击：疯狂回答问题。</p>
<p>我曾经在入行的头几年里几乎把我关注的垂直领域（包括语言领域和业务领域）里的所有问题都回答了一遍。我对外宣扬知无不言言无不尽，放出邮件地址和 MSN（那时候 MSN 很高大上），很多网友都会发邮件或者加我好友，问各种开发疑难问题，平均每天都有几个，然后我把解决问题的过程写成微软 KB（KnowledgeBase） 文体发表在我的博客上。</p>
<p>你想想看，工作中的问题你平均每隔几天才能遇到一个，而这么做，每天你都会遇到几个乃至于十几个，第一让你脑力激荡，第二接触到更多新知。05年到06年期间，我因工作需要学习了 JavaME（或古老的称呼 J2ME），早年间 Symbian 手机上的客户端开发。那段时间我天天扫中文论坛的帖子，力求回答所有问题，尤其是那些 BUG 或故障。对于那些暂时没有人解决的，如流媒体实时播放，如仿 OperaMini 二级菜单界面，都上下求索，最后放出思路以及源码。</p>
<p>同时，我经常整理常见问题，梳理成册并发布。譬如我整理过的 J2ME 疑难问题：</p>
<ul>
<li>[J2ME Q&amp;A]真机报告MontyThread -n的错误之解释</li>
<li>[J2MEQ&amp;A]WTK初始化WMAClient报错XXX has no IP address的解释</li>
<li>[J2ME Q&amp;A]untrusted domain is not configured问题回应</li>
<li>[J2ME]“Cannot open socket for LIME events”错误解决</li>
</ul>
<p>几个月后，我成为 J2ME 中文论坛超级版主。通过这个历程，我想告诉大家，回答网友问题，技巧得当的话，比如别老是重复回答新手问题，试着攻克那些疑难问题，或者离奇故障，绝对不会浪费你的时间。为什么？</p>
<p>因为你要信奉：</p>
<blockquote>
<p>你学过的每一样东西，你遭受的每一次苦难，都会在你一生中的某个<br>时候派上用场。<br>——佩内洛普·菲兹杰拉德 《离岸》</p>
<p>Everything that you’ve learnt and all the<br>hardships you’ve suffered will all come in handy<br>at some point in your life.</p>
</blockquote>
<h1 id="第四阶段-RCA-总结"><a href="#第四阶段-RCA-总结" class="headerlink" title="第四阶段 RCA/总结"></a>第四阶段 RCA/总结</h1><p>现在是你把经验教训变为财富的时刻了。</p>
<p>什么是好的技术 Leader？</p>
<p>随便一个业务需求或业务场景讲出来，你立刻把它抽象为几个模块/系统/Topic，然后侃侃而谈，业界都是怎么解决的，我们以前又是怎么分析怎么解决的，现在咱们这种情况下应该如何设计，可能会遇到什么问题，我们应该做哪些预防设计，blabla。</p>
<p>怎么做到这一点？</p>
<p>第一，写 RCA 报告。我以前说过，『窝窝从 2011 年开始，一直坚持每错必查、错了又错就整改、每错必写，用身体力行告诉每一个新员工直面错误、公开技术细节、分享给所有人，长此以往，每一次事故和线上漏测都会变为我们的财富。这就是我们的 RCA（Root Cause Analysis）制度，截止到目前已经收集整理了近两百个详尽的 RCA 报告。』</p>
<p>RCA 报告格式为：</p>
<ul>
<li>背景知识（Optional）</li>
<li>问题现象</li>
<li>影响范围</li>
<li>问题原因</li>
<li>问题分析过程（Optional）</li>
<li>解决办法</li>
<li>后续处理措施：如线上脏数据如何修复，如对用户造成的影响如何弥补等（Optional）</li>
<li>经验教训</li>
<li>RCA类型：如代码问题、实施问题、配置问题、设计问题、测试问题</li>
</ul>
<p>这样，作为一名合格的老兵，你见过了足够多的血，并且把它们变成了你的人生财富。</p>
<p>第二，写总结。话说，要经常拉清单。侃侃而谈得有资料，这些都得是你自己写才能印象深刻，关键时刻想得起来。</p>
<p>好了，这就是我告诉面试者的高手炼成四个阶段。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio提升编译速度方法总结]]></title>
      <url>http://czhzero.com/2016/07/21/android-studio-compile-speed-up/</url>
      <content type="html"><![CDATA[<p>编译会占用你的时间，加快编译会影响你的开发效率，让你的项目工作更加顺畅。本文会定期更新一些提高编译效率的方法。加速gradle编译。</p>
<a id="more"></a>
<h3 id="方法一-开启gradle守护线程，并行编译"><a href="#方法一-开启gradle守护线程，并行编译" class="headerlink" title="方法一:开启gradle守护线程，并行编译"></a>方法一:开启gradle守护线程，并行编译</h3><p>在下面的目录下面创建gradle.properties文件：</p>
<ul>
<li>/Users/<username>/.gradle/ (Mac)</username></li>
<li>/home/<username>/.gradle/ (Linux)</username></li>
<li>C:\Users\<username>.gradle (Windows)</username></li>
</ul>
<p>在文件中增加:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.daemon=true  //就是让你让你编译时使用守护进程。</span><br><span class="line"></span><br><span class="line">org.gradle.parallel=true //使用并行编译</span><br><span class="line"></span><br><span class="line">org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m //JVM最大允许分配的堆内存，按需分配</span><br></pre></td></tr></table></figure>
<p><strong><em>网上关于提速的方法，这类介绍最多，不知道怎么回事，我亲测后，发现没什么效果。</em></strong></p>
<h3 id="方法二-设置离线状态"><a href="#方法二-设置离线状态" class="headerlink" title="方法二:设置离线状态"></a>方法二:设置离线状态</h3><p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/006/lALOYktUms0CEM0FeQ_1401_528.png" alt="离线状态"></p>
<p><strong><em>设置离线，Vpn用上后，似乎对整个编译也没有什么直观的改善。</em></strong></p>
<h3 id="方法三-更新gradle版本"><a href="#方法三-更新gradle版本" class="headerlink" title="方法三:更新gradle版本"></a>方法三:更新gradle版本</h3><p>gradle是一个比较复杂的‘怪物’，大多数的项目随着每个release版本越来越快，所以用最新的版本有很大意义。<a href="https://gradle.org/gradle-download/" target="_blank" rel="external">下载地址</a></p>
<p>Tips:<br>如果发现IDE下载gradle较慢,则可改为自定义下载，下载好的zip包放到如下目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.gradle/wrapper/dists/gradle-2.10-all/5b6kqrscumh9p4evkkemdk57ad/</span><br></pre></td></tr></table></figure>
<p><strong><em>我升级到gradle-2.14.1之后，也没发现有多大的改变。编译还是要1分多钟。</em></strong></p>
<p>dev包中设置minSdkVersion为21</p>
<h3 id="方法四-优化项目"><a href="#方法四-优化项目" class="headerlink" title="方法四:优化项目"></a>方法四:优化项目</h3><ul>
<li>删除无用的module, 多module相互依赖会降低编译速度</li>
<li>删除无用的文件资源, 如单元测试代码，废弃图片等等</li>
<li>减少方法数目，不使用multidex。<a href="http://blog.csdn.net/t12x3456/article/details/40837287" target="_blank" rel="external">multidex</a></li>
</ul>
<p><strong><em>这类方法，肯定是会提高编译速度，本文不再详述。</em></strong></p>
<p><strong><em>这个方法肯定有用。</em></strong></p>
<h3 id="方法五-使用aar依赖"><a href="#方法五-使用aar依赖" class="headerlink" title="方法五:使用aar依赖"></a>方法五:使用aar依赖</h3><p>我们都知道我们或多或少使用第三方的开源库或者工具，还有自己封装的类库，但是一次编译的时候在Library Module 目录下， 打开build/outputs/aar，就有生成的aar 文件。把他放在libs 目录下，在build.gradle 添加。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">   repositories &#123;</span><br><span class="line">      jcenter()</span><br><span class="line">      flatDir &#123;</span><br><span class="line">        dirs &apos;libs&apos;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(name:&apos;test&apos;, ext:&apos;aar&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然也可以这样添加</p>
<p>我们可以新建一个jar/aar Module，选择aar 文件，然后新建的Module 目录下，就会多了个build.gradle 和xxx.aar。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configurations.maybeCreate(&quot;default&quot;)</span><br><span class="line">artifacts.add(&quot;default&quot;, file(&apos;mylibrary-debug.aar&apos;))</span><br></pre></td></tr></table></figure>
<p>然后在我们的Module 中这样引用即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile project(&apos;:mylibrary-debug&apos;)</span><br></pre></td></tr></table></figure>
<p><strong><em>如果大量的module都被置换成aar文件，确实会使得整个项目编译速度加快。但是若aar中代码需要改变，就会比较麻烦。所以这种方法，需要酌情考虑。</em></strong></p>
<h3 id="方法六-对第三方库进行优化"><a href="#方法六-对第三方库进行优化" class="headerlink" title="方法六:对第三方库进行优化"></a>方法六:对第三方库进行优化</h3><ul>
<li>利用debugCompile来依赖debug时才用到的库</li>
<li>利用更小的库替代现有的库</li>
<li>利用exclude来排出某些不需要的依赖</li>
</ul>
<p>对于远程仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compile (&apos;com.facebook.react:react-native:+&apos;)&#123;</span><br><span class="line">    exclude group: &apos;com.squareup.okhttp3&apos;, module: &apos;okhttp&apos;</span><br><span class="line">    exclude group: &apos;com.android.support&apos;, module: &apos;support-v4&apos;</span><br><span class="line">    exclude group: &apos;com.android.support&apos;, module: &apos;support-v7&apos;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>对于本地项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compile(project(&apos;:react-native-custom-module&apos;)) &#123;</span><br><span class="line">    exclude group: &apos;com.facebook.react&apos;, module: &apos;react-native&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法七-采用增量编译"><a href="#方法七-采用增量编译" class="headerlink" title="方法七:采用增量编译"></a>方法七:采用增量编译</h3><ul>
<li>Instant Run</li>
<li>Jrebel</li>
</ul>
<p>正在研究中。</p>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="http://kevinpelgrims.com/blog/2015/06/11/speeding-up-your-gradle-builds/" target="_blank" rel="external">Speeding up Gradle builds</a></li>
<li><a href="http://www.jianshu.com/p/2ff3717199da" target="_blank" rel="external">6个技巧加速你的gradle编译</a></li>
<li><a href="http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/" target="_blank" rel="external">知道Android 中Gradle 的这些技巧，提升编译构建速度</a></li>
<li><a href="http://www.jianshu.com/p/e456a5ac8613?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">Android打包提速实践</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 需要配置的版本号整理]]></title>
      <url>http://czhzero.com/2016/07/21/android-version-configure/</url>
      <content type="html"><![CDATA[<p>Android Studio 使用Gradle进行项目构建，相比Eclipse方便了许多，但是也同时引入各种build.gradle，配置各种工具的版本号。<br>下面我们就来理一理那些需要配置的版本参数。</p>
<a id="more"></a>
<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>JDK配置比较简单，安装完JDK，配置环境变量后，<br>进入到[Project Structure]配置界面JDK路径即可。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/005/lALOXzh4gs0Bfc0D1g_982_381.png" alt="JDK"></p>
<h3 id="SDK-Platform"><a href="#SDK-Platform" class="headerlink" title="SDK Platform"></a>SDK Platform</h3><p>配置JDK的时候，[Project Structure]配置界面配置一下Android SDK路径。</p>
<p>另外,在项目模块目录下的build.gradle文件内还要做如下配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    compileSdkVersion 23</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SDK-Build-Tools"><a href="#SDK-Build-Tools" class="headerlink" title="SDK Build Tools"></a>SDK Build Tools</h3><p>Android SDK的bulid tools的配置方法与SDK platform的配置方法一样，进入到项目模块目录下的build.gradle文件内做如下配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    buildToolsVersion &quot;23.0.3&quot;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SDK-Tools"><a href="#SDK-Tools" class="headerlink" title="SDK Tools"></a>SDK Tools</h3><p>SDK Tools的版本，在gradle文件中不需要配置，是Android SDK的工具组件，与编译关系不大。需要更新的话，可以打开Android Studio工具栏里的[sdk manager]</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/005/lALOXzh6Is0CzM0Few_1403_716.png" alt="SDK Tools"></p>
<h3 id="Gradle-Version"><a href="#Gradle-Version" class="headerlink" title="Gradle Version"></a>Gradle Version</h3><p>Gradle是整个项目构建版本，一直在更新，具体的更新信息可以参考<a href="https://docs.gradle.org" target="_blank" rel="external">gradle官网</a></p>
<p>修改Gradle版本，同样是进入到[Project Structure]配置界面.</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/005/lALOXyEtXczizQUC_1282_226.png" alt="Gradle Version"></p>
<h3 id="Android-Plugin-for-Gradle"><a href="#Android-Plugin-for-Gradle" class="headerlink" title="Android Plugin for Gradle"></a>Android Plugin for Gradle</h3><p>除了配置gradle版本外，我们还需要配置与之配套的 gradle plugin版本。</p>
<p>进入到项目根目录build.gradle，进行如下配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  ...</span><br><span class="line">  dependencies &#123;</span><br><span class="line">    classpath &apos;com.android.tools.build:gradle:2.1.0&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul>
<li><a href="https://docs.gradle.org" target="_blank" rel="external">gradle</a></li>
<li><a href="https://developer.android.com/studio/releases" target="_blank" rel="external">android developer</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常用Android学习资源汇总(一) - 优秀网站博客]]></title>
      <url>http://czhzero.com/2016/07/19/android-study-resource/</url>
      <content type="html"><![CDATA[<p>常用Android学习资源汇总为Android技术开发相关的资源索引，以供学习查找之用。总共分为四个部分，本篇为第一篇优秀网站博客。</p>
<ul>
<li><a href="http://czhzero.com/2016/07/19/android-study-resource/">常用Android学习资源汇总(一)-优秀网站博客</a></li>
<li><a href="http://www.czhzero.com/2017/02/24/android-study-resource-2/" target="_blank" rel="external">常用Android学习资源汇总(二)-优秀开源框架</a></li>
<li><a href="http://www.czhzero.com/2017/02/24/android-study-resource-3/" target="_blank" rel="external">常用Android学习资源汇总(三)-高频技术专题</a></li>
<li><a href="http://www.czhzero.com/2017/02/24/android-study-resource-4/" target="_blank" rel="external">常用Android学习资源汇总(四)-便捷开发工具</a></li>
</ul>
<a id="more"></a>
<h3 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h3><ul>
<li><a href="http://developer.android.com/" target="_blank" rel="external">Android Developer</a></li>
<li><a href="http://androiddoc.qiniudn.com/index.html" target="_blank" rel="external">Android Developer (无需梯子)</a></li>
<li><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">Android Training 中文版</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="external">Material Design 中文版</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/android-weekly/" target="_blank" rel="external">Android Weekly 中文版</a></li>
<li><a href="http://wiki.jikexueyuan.com/list/android" target="_blank" rel="external">极客学院 Wiki Android 板块</a></li>
<li><a href="https://chaosleong.gitbooks.io/gradle-for-android/content/" target="_blank" rel="external">Gradle Android Plugin 中文版》</a></li>
<li><a href="https://github.com/googlesamples" target="_blank" rel="external">Google samples</a> </li>
</ul>
<h3 id="教学网站"><a href="#教学网站" class="headerlink" title="教学网站"></a>教学网站</h3><ul>
<li><a href="http://chinagdg.org/google-videos/" target="_blank" rel="external">Google 官方性能优化视频</a> —— GDG中译版</li>
<li><a href="http://www.imooc.com/" target="_blank" rel="external">慕课网</a></li>
<li><a href="http://www.jikexueyuan.com/" target="_blank" rel="external">极客学院</a></li>
<li><a href="http://www.maiziedu.com/" target="_blank" rel="external">麦子学院</a></li>
<li><a href="https://www.udacity.com/courses/android" target="_blank" rel="external">Udacity Google 官方视频教程</a></li>
</ul>
<h3 id="开发者社区"><a href="#开发者社区" class="headerlink" title="开发者社区"></a>开发者社区</h3><ul>
<li><a href="http://stackoverflow.com/questions/tagged/android" target="_blank" rel="external">Stackoverflow</a> —— 国外著名的问答社区</li>
<li><a href="http://antonioleiva.com" target="_blank" rel="external">antoniolevia</a> —— 国外android技术分享网站</li>
<li><a href="http://www.androidweekly.cn" target="_blank" rel="external">Android 开发技术周报</a> —— 长期更新最新前言资讯</li>
<li><a href="http://www.devtf.cn/" target="_blank" rel="external">开发技术前线</a> —— 《Android源码设计模式》作者 Mr.Simple 维护的社区网站</li>
<li><a href="http://gank.io" target="_blank" rel="external">干货集中营</a> —— 每日分享妹子图 和 技术干货，还有供大家中午休息的休闲视频</li>
<li><a href="http://gold.xitu.io/explore/android" target="_blank" rel="external">掘金 Android</a></li>
<li><a href="https://www.v2ex.com/go/android" target="_blank" rel="external">V2ex</a></li>
<li><a href="http://www.jcodecraeer.com/" target="_blank" rel="external">泡在网上的日子</a></li>
<li><a href="https://segmentfault.com/" target="_blank" rel="external">SagmentFault</a></li>
<li><a href="http://androidxref.com/" target="_blank" rel="external">androidxref</a> - android源码</li>
</ul>
<h3 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h3><ul>
<li><a href="http://a.codekk.com/" target="_blank" rel="external">CodeKK</a> —— 专注于开源项目源码解析及优秀开源项目的分享</li>
<li><a href="http://www.trinea.cn/" target="_blank" rel="external">Trinea</a> —— 性能优化、源码解析</li>
<li><a href="http://blog.csdn.net/Luoshengyang" target="_blank" rel="external">老罗的Android之旅</a> —— Android系统源代码分析</li>
<li><a href="http://www.devtf.cn/" target="_blank" rel="external">开发技术前线</a> —— 《Android源码设计模式》作者 Mr.Simple 维护的社区网站</li>
<li><a href="http://blog.csdn.net/aigestudio" target="_blank" rel="external">爱哥</a> ——《Android源码设计模式》作者 关爱民 </li>
<li><a href="http://blog.csdn.net/singwhatiwanna" target="_blank" rel="external">任玉刚</a> —— 《Android开发艺术探索》作者 CSDN博客</li>
<li><a href="http://blog.csdn.net/guolin_blog" target="_blank" rel="external">郭霖</a> —— 《第一行代码》作者 CSDN博客</li>
<li><a href="http://blog.csdn.net/lmj623565791" target="_blank" rel="external">鸿洋</a> —— CSDN 博客专家</li>
<li><a href="http://hukai.me" target="_blank" rel="external">胡凯</a> —— 专注性能优化</li>
<li><a href="http://www.jianshu.com/users/e6885381f7d4/latest_articles" target="_blank" rel="external">张明云</a> —— Android学习之路</li>
<li><a href="http://drakeet.me" target="_blank" rel="external">Drakeet</a> —— 贝壳单词APP开发者</li>
<li><a href="http://blog.csdn.net/eclipsexys" target="_blank" rel="external">徐宜生</a> —— 《Android群英传》作者</li>
<li><a href="http://kymjs.com" target="_blank" rel="external">张涛</a> —— KjFrame 作者</li>
<li><a href="http://www.inferjay.com/blog/categories/androiddevweekly/" target="_blank" rel="external">脉脉不得语</a> —— 著名博主</li>
<li><a href="http://wangkuiwu.github.io" target="_blank" rel="external">wangkuiwu</a> —— Binder、事件分发、动画解析</li>
<li><a href="http://www.jianshu.com/users/FK4sc4/latest_articles" target="_blank" rel="external">高建武</a> —— 专注性能优化，简书著名博主</li>
<li><a href="http://blog.csdn.net/lzyzsd" target="_blank" rel="external">hi大头鬼hi</a> —— 对RxJava有较深的研究</li>
<li><a href="http://blog.csdn.net/coder_pig" target="_blank" rel="external">Coder-pig</a> —— CSDN 博客专家，最佳入门专栏</li>
<li><a href="http://keeganlee.me/" target="_blank" rel="external">Keegan小刚</a> —— 分享了多篇Android样式的文章</li>
<li><a href="http://blog.csdn.net/NUPTboyZHB/" target="_blank" rel="external">郑海波</a> —— CSDN博主，文章大多与自定义控件相关</li>
<li><a href="http://wuxiaolong.me/" target="_blank" rel="external">吴小龙同学</a> —— 分享了多篇关于AndroidDesignSupportLibrary的文章</li>
<li><a href="http://blog.csdn.net/lincyang" target="_blank" rel="external">全速前行</a> —— 主讲实战技巧和平常遇到的问题</li>
<li><a href="http://blog.csdn.net/asce1885" target="_blank" rel="external">ASCE 1985</a> —— 翻译了多篇使用Kotlin开发Android应用，平安科技移动开发二队技术周报作者</li>
<li><a href="http://blog.mcxiaoke.com" target="_blank" rel="external">mcxiaoke</a> —— rxjava文档，EventBus博客，多渠道打包，一些开源项目</li>
<li><a href="http://blog.csdn.net/wangjinyu501?viewmode=contents" target="_blank" rel="external">WPJY</a> —— 自定义View、开发经验</li>
<li><a href="http://android-developers.blogspot.jp/" target="_blank" rel="external">Android Developers blog</a> —— Google’s Android 博客</li>
<li><a href="http://blog.csdn.net/developer_jiangqq" target="_blank" rel="external">江清清的专栏</a> ——     大量实例讲解</li>
<li><a href="http://hujiaweibujidao.github.io" target="_blank" rel="external">hujiaweibujidao</a> —— 《Android开发艺术探索》读书笔记系列</li>
<li><a href="http://www.jianshu.com/users/b99b0edd4e77/latest_articles" target="_blank" rel="external">BlackSwift</a> —— 简书作者【Blur实时渲染，AnimeWallpaper】</li>
<li><a href="http://blog.csdn.net/qq_23547831?viewmode=contents" target="_blank" rel="external">Android 源码解析专栏</a></li>
<li><a href="http://www.cnblogs.com/lwbqqyumidi/" target="_blank" rel="external">Corn</a> —— 专注Android领域开发。 仰望星空，同时需要脚踏实地</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 6.0 运行时权限处理]]></title>
      <url>http://czhzero.com/2016/07/18/android-6-0-permission/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文转载自: <a href="https://www.aswifter.com/" target="_blank" rel="external">阳春面的博客</a><br>原文地址: <a href="https://www.aswifter.com/2015/11/04/android-6-permission/" target="_blank" rel="external">https://www.aswifter.com/2015/11/04/android-6-permission/</a></p>
</blockquote>
<h3 id="运行时权限介绍"><a href="#运行时权限介绍" class="headerlink" title="运行时权限介绍"></a>运行时权限介绍</h3><p>Android 6.0在我们原有的AndroidManifest.xml声明权限的基础上，<br>又新增了运行时权限动态检测，以下权限都需要在运行时判断：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">身体传感器</span><br><span class="line">日历</span><br><span class="line">摄像头</span><br><span class="line">通讯录</span><br><span class="line">地理位置</span><br><span class="line">麦克风</span><br><span class="line">电话</span><br><span class="line">短信</span><br><span class="line">存储空间</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="运行时权限处理"><a href="#运行时权限处理" class="headerlink" title="运行时权限处理"></a>运行时权限处理</h3><p>Android6.0系统默认为targetSdkVersion小于23的应用默认授予了所申请的所有权限，<br>所以如果你以前的APP设置的targetSdkVersion低于23，在运行时也不会崩溃，<br>但这也只是一个临时的救急策略，用户还是可以在设置中取消授予的权限。</p>
<ul>
<li>声明目标SDK版本</li>
</ul>
<p>我们需要在build.gradle中声明targetSdkVersion为23</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 23</span><br><span class="line">    buildToolsVersion &quot;23.0.1&quot;</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.yourcomany.app</span><br><span class="line">        minSdkVersion 18</span><br><span class="line">        targetSdkVersion 23</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>检查并申请权限</li>
</ul>
<p>我们需要在用到权限的地方，每次都检查是否APP已经拥有权限，<br>比如我们有一个下载功能，需要写SD卡的权限，<br>我们在写入之前检查是否有WRITE_EXTERNAL_STORAGE权限，没有则申请权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)</span><br><span class="line">        != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">    //申请WRITE_EXTERNAL_STORAGE权限</span><br><span class="line">    ActivityCompat.requestPermissions(this, new String[]&#123;Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;,</span><br><span class="line">            WRITE_EXTERNAL_STORAGE_REQUEST_CODE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>请求权限后，系统会弹出请求权限的Dialog</li>
</ul>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/004/1.png" alt="dialog"></p>
<ul>
<li>用户选择允许或拒绝后，会回调onRequestPermissionsResult方法, 该方法类似于onActivityResult</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123;</span><br><span class="line">    super.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    doNext(requestCode,grantResults);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>我们接着需要根据requestCode和grantResults(授权结果)做相应的后续处理</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private void doNext(int requestCode, int[] grantResults) &#123;</span><br><span class="line">       if (requestCode == WRITE_EXTERNAL_STORAGE_REQUEST_CODE) &#123;</span><br><span class="line">           if (grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">               // Permission Granted</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               // Permission Denied</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Fragment中运行时权限的特殊处理"><a href="#Fragment中运行时权限的特殊处理" class="headerlink" title="Fragment中运行时权限的特殊处理"></a>Fragment中运行时权限的特殊处理</h3><ul>
<li>在Fragment中申请权限，不要使用ActivityCompat.requestPermissions, 直接使用Fragment的requestPermissions方法，否则会回调到Activity的onRequestPermissionsResult</li>
<li>如果在Fragment中嵌套Fragment，在子Fragment中使用requestPermissions方法，onRequestPermissionsResult不会回调回来，建议使用getParentFragment().requestPermissions方法，<br>这个方法会回调到父Fragment中的onRequestPermissionsResult，加入以下代码可以把回调透传到子Fragment</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) &#123;</span><br><span class="line">    super.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">    List&lt;Fragment&gt; fragments = getChildFragmentManager().getFragments();</span><br><span class="line">    if (fragments != null) &#123;</span><br><span class="line">        for (Fragment fragment : fragments) &#123;</span><br><span class="line">            if (fragment != null) &#123;</span><br><span class="line">                fragment.onRequestPermissionsResult(requestCode,permissions,grantResults);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="相关开源项目"><a href="#相关开源项目" class="headerlink" title="相关开源项目"></a>相关开源项目</h3><ul>
<li><a href="https://github.com/hotchemi/PermissionsDispatcher" target="_blank" rel="external">PermissionsDispatcher</a></li>
</ul>
<p>使用标注的方式，动态生成类处理运行时权限，目前还不支持嵌套Fragment。</p>
<ul>
<li><a href="https://github.com/tbruyelle/RxPermissions" target="_blank" rel="external">RxPermissions</a></li>
</ul>
<p>基于RxJava的运行时权限检测框架</p>
<ul>
<li><a href="https://github.com/anthonycr/Grant" target="_blank" rel="external">Grant</a></li>
</ul>
<p>简化运行时权限的处理，比较灵活</p>
<ul>
<li><a href="https://github.com/googlesamples/android-RuntimePermissions" target="_blank" rel="external">android-RuntimePermissions</a></li>
</ul>
<p>Google官方的例子</p>
<h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>以下权限只需要在AndroidManifest.xml中声明即可使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</span><br><span class="line">android.permission.ACCESS_NETWORK_STATE</span><br><span class="line">android.permission.ACCESS_NOTIFICATION_POLICY</span><br><span class="line">android.permission.ACCESS_WIFI_STATE</span><br><span class="line">android.permission.ACCESS_WIMAX_STATE</span><br><span class="line">android.permission.BLUETOOTH</span><br><span class="line">android.permission.BLUETOOTH_ADMIN</span><br><span class="line">android.permission.BROADCAST_STICKY</span><br><span class="line">android.permission.CHANGE_NETWORK_STATE</span><br><span class="line">android.permission.CHANGE_WIFI_MULTICAST_STATE</span><br><span class="line">android.permission.CHANGE_WIFI_STATE</span><br><span class="line">android.permission.CHANGE_WIMAX_STATE</span><br><span class="line">android.permission.DISABLE_KEYGUARD</span><br><span class="line">android.permission.EXPAND_STATUS_BAR</span><br><span class="line">android.permission.FLASHLIGHT</span><br><span class="line">android.permission.GET_ACCOUNTS</span><br><span class="line">android.permission.GET_PACKAGE_SIZE</span><br><span class="line">android.permission.INTERNET</span><br><span class="line">android.permission.KILL_BACKGROUND_PROCESSES</span><br><span class="line">android.permission.MODIFY_AUDIO_SETTINGS</span><br><span class="line">android.permission.NFC</span><br><span class="line">android.permission.READ_SYNC_SETTINGS</span><br><span class="line">android.permission.READ_SYNC_STATS</span><br><span class="line">android.permission.RECEIVE_BOOT_COMPLETED</span><br><span class="line">android.permission.REORDER_TASKS</span><br><span class="line">android.permission.REQUEST_INSTALL_PACKAGES</span><br><span class="line">android.permission.SET_TIME_ZONE</span><br><span class="line">android.permission.SET_WALLPAPER</span><br><span class="line">android.permission.SET_WALLPAPER_HINTS</span><br><span class="line">android.permission.SUBSCRIBED_FEEDS_READ</span><br><span class="line">android.permission.TRANSMIT_IR</span><br><span class="line">android.permission.USE_FINGERPRINT</span><br><span class="line">android.permission.VIBRATE</span><br><span class="line">android.permission.WAKE_LOCK</span><br><span class="line">android.permission.WRITE_SYNC_SETTINGS</span><br><span class="line">com.android.alarm.permission.SET_ALARM</span><br><span class="line">com.android.launcher.permission.INSTALL_SHORTCUT</span><br><span class="line">com.android.launcher.permission.UNINSTALL_SHORTCUT</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LeakCanary内存泄露检测工具]]></title>
      <url>http://czhzero.com/2016/07/15/leakcanary-simple-analysis/</url>
      <content type="html"><![CDATA[<h3 id="LeakCanary"><a href="#LeakCanary" class="headerlink" title="LeakCanary"></a>LeakCanary</h3><p>内存泄漏(traditional memory leak)的原因是：当该对象的所有引用都已经释放了，对象仍未被释放。逻辑内存泄漏(logical memory leak)的原因是：当应用不再需要这个对象，当仍未释放该对象的所有引用。如果持有对象的强引用，垃圾回收器是无法在内存中回收这个对象。<br>常见的原因在<a href="http://www.czhzero.com/2016/07/04/memory-leak-possibility/" target="_blank" rel="external">Android内存泄漏常见场景分析</a>一文已经有了详细的介绍。</p>
<p>LeakCanary是一个开源的检测内存泄露的java库。项目地址：<a href="https://github.com/square/leakcanary" target="_blank" rel="external">https://github.com/square/leakcanary</a><br>LeakCanary实际上就是在本机上自动做了Heap dump，对生成的hprof文件分析，展示结果。和手工分析Heap Dump的方式一样。</p>
<a id="more"></a>
<p>下面是一个LeakCanary的结果截图：</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/003/1.png" alt="LeakCanary内存泄露检测工具"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android内存泄漏常见场景分析]]></title>
      <url>http://czhzero.com/2016/07/04/memory-leak-possibility/</url>
      <content type="html"><![CDATA[<p>Java是垃圾回收语言的一种，其优点是开发者无需特意管理内存分配，降低了应用由于局部故障(segmentation fault)导致崩溃，同时防止未释放的内存把堆栈(heap)挤爆的可能，所以写出来的代码更为安全。</p>
<p>不幸的是，在Java中仍存在很多容易导致内存泄漏的逻辑可能(logical leak)。如果不小心，你的Android应用很容易浪费掉未释放的内存，最终导致内存用光的错误抛出(out-of-memory，OOM)。</p>
<a id="more"></a>
<p>一般内存泄漏(traditional memory leak)的原因是：当该对象的所有引用都已经释放了，对象仍未被释放。逻辑内存泄漏(logical memory leak)的原因是：当应用不再需要这个对象，当仍未释放该对象的所有引用。如果持有对象的强引用，垃圾回收器是无法在内存中回收这个对象。</p>
<p>在Android开发中，最容易引发的内存泄漏问题的是Context。比如Activity的Context，就包含大量的内存引用，例如View Hierarchies和其他资源。一旦泄漏了Context，也意味泄漏它指向的所有对象。Android机器内存有限，太多的内存泄漏容易导致OOM。</p>
<p>一般来说, 内存泄漏的主要问题可以分为以下几种类型：</p>
<ul>
<li><strong>静态变量引起的内存泄漏</strong></li>
</ul>
<p>例如: Static Activities, Static Views , SensorManager等系统static对象</p>
<ul>
<li><strong>非静态内部类引起的内存泄漏</strong></li>
</ul>
<p>例如: Inner Classes, Anonymous Classes, Handler。</p>
<ul>
<li><strong>资源未关闭引起的内存泄漏</strong></li>
</ul>
<p>例如: BroadcastReceiver、Cursor、Bitmap</p>
<ul>
<li><strong>耗时线程引起的内存泄漏</strong></li>
</ul>
<p>例如: Thread, TimeTask, AsyncTask</p>
<ul>
<li><strong>频繁创建对象引起的内存泄漏</strong></li>
</ul>
<p>例如: 构造Adapter时，没有使用缓存的convertView</p>
<p>下面是常见的一些内存泄漏的例子。检查一下你有没有遇到下列的情况。</p>
<h2 id="静态变量引起的内存泄漏"><a href="#静态变量引起的内存泄漏" class="headerlink" title="静态变量引起的内存泄漏"></a>静态变量引起的内存泄漏</h2><blockquote>
<p>解决方案: </p>
<ol>
<li>及时释放无用的静态变量</li>
<li>寻找与该静态变量生命周期差不多的替代对象</li>
<li>将强引用方式改成弱引用</li>
</ol>
</blockquote>
<h3 id="Static-Object"><a href="#Static-Object" class="headerlink" title="Static Object"></a>Static Object</h3><p>在类中定义了静态Activity变量，把当前运行的Activity实例赋值于这个静态变量。<br>如果这个静态变量在Activity生命周期结束后没有清空，就导致内存泄漏。因为static变量是贯穿这个应用的生命周期的，所以被泄漏的Activity就会一直存在于应用的进程中，不会被垃圾回收器回收。</p>
<p>代码示例:</p>
<p><strong>修正前</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static Activity activity;</span><br><span class="line"></span><br><span class="line">   void setStaticActivity() &#123;</span><br><span class="line">     activity = this;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   View saButton = findViewById(R.id.sa_button);</span><br><span class="line">   saButton.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">     @Override public void onClick(View v) &#123;</span><br><span class="line">       setStaticActivity();</span><br><span class="line">       nextActivity();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>
<p><strong><em>修正后</em></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static WeakReference&lt;Activity&gt; weakActivity;</span><br><span class="line"></span><br><span class="line">    void setStaticActivity() &#123;</span><br><span class="line">        weakActivity = new WeakReference&lt;Activity&gt;(this);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    View saButton = findViewById(R.id.sa_button);</span><br><span class="line">    saButton.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">      @Override public void onClick(View v) &#123;</span><br><span class="line">        setStaticActivity();</span><br><span class="line">        nextActivity();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="SensorManager"><a href="#SensorManager" class="headerlink" title="SensorManager"></a>SensorManager</h3><p>最后，通过Context.getSystemService(int name)可以获取系统服务。这些服务工作在各自的进程中，帮助应用处理后台任务，处理硬件交互。如果需要使用这些服务，可以注册监听器，这会导致服务持有了Context的引用，如果在Activity销毁的时候没有注销这些监听器，会导致内存泄漏。</p>
<p>代码示例:</p>
<p><strong>修正前</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void registerListener() &#123;</span><br><span class="line">               SensorManager sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);</span><br><span class="line">               Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ALL);</span><br><span class="line">               sensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_FASTEST);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        View smButton = findViewById(R.id.sm_button);</span><br><span class="line">        smButton.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override public void onClick(View v) &#123;</span><br><span class="line">                registerListener();</span><br><span class="line">                nextActivity();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>修正后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//增加unregist方法，即清空系统static对象对context的引用。</span><br><span class="line">sensorManager.unregisterListener(this);</span><br></pre></td></tr></table></figure>
<h2 id="非静态内部类引起的内存泄漏"><a href="#非静态内部类引起的内存泄漏" class="headerlink" title="非静态内部类引起的内存泄漏"></a>非静态内部类引起的内存泄漏</h2><blockquote>
<p>解决方案: 1. 将内部类变成静态内部类, 2. 如果有强引用Activity中的属性，则将该属性的引用方式改为弱引用, 3. 在业务允许的情况下，当Activity执行onDestory时，结束这些耗时任务</p>
</blockquote>
<h3 id="Inner-Classes"><a href="#Inner-Classes" class="headerlink" title="Inner Classes"></a>Inner Classes</h3><p>继续，假设Activity中有个内部类，这样做可以提高可读性和封装性。将如我们创建一个内部类，而且持有一个静态变量的引用，恭喜，内存泄漏就离你不远了。</p>
<p>内部类的优势之一就是可以访问外部类，不幸的是，导致内存泄漏的原因，就是内部类持有外部类实例的强引用。</p>
<p>代码示例:</p>
<p><strong>修正前</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private static Object inner;</span><br><span class="line"></span><br><span class="line">   void createInnerClass() &#123;</span><br><span class="line">       class InnerClass &#123;</span><br><span class="line">       &#125;</span><br><span class="line">       inner = new InnerClass();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   View icButton = findViewById(R.id.ic_button);</span><br><span class="line">   icButton.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">       @Override public void onClick(View v) &#123;</span><br><span class="line">           createInnerClass();</span><br><span class="line">           nextActivity();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>修正后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private static Object inner;</span><br><span class="line"></span><br><span class="line">   void createInnerClass() &#123;</span><br><span class="line">       class InnerClass &#123;</span><br><span class="line">       &#125;</span><br><span class="line">       inner = new InnerClass();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   View icButton = findViewById(R.id.ic_button);</span><br><span class="line">   icButton.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">       @Override public void onClick(View v) &#123;</span><br><span class="line">           createInnerClass();</span><br><span class="line">           nextActivity();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   onDestroy() &#123;</span><br><span class="line">     </span><br><span class="line">     inner == null;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Anonymous-Classes"><a href="#Anonymous-Classes" class="headerlink" title="Anonymous Classes"></a>Anonymous Classes</h3><p>相似地，匿名类也维护了外部类的引用。所以内存泄漏很容易发生，当你在Activity中定义了匿名的AsyncTsk<br>。当异步任务在后台执行耗时任务期间，Activity不幸被销毁了，这个被AsyncTask持有的Activity实例就不会被垃圾回收器回收，直到异步任务结束。</p>
<p>代码示例:</p>
<p><strong>修正前</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">void startAsyncTask() &#123;</span><br><span class="line">        new AsyncTask&lt;Void, Void, Void&gt;() &#123;</span><br><span class="line">            @Override protected Void doInBackground(Void... params) &#123;</span><br><span class="line">                while(true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    View aicButton = findViewById(R.id.at_button);</span><br><span class="line">    aicButton.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">        @Override public void onClick(View v) &#123;</span><br><span class="line">            startAsyncTask();</span><br><span class="line">            nextActivity();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>修正后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//增加状态位，在onDestroy时候停止AsyncTask。</span><br></pre></td></tr></table></figure>
<h3 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3><p>同样道理，定义匿名的Runnable，用匿名类Handler执行。Runnable内部类会持有外部类的隐式引用，被传递到Handler的消息队列MessageQueue中，在Message消息没有被处理之前，Activity实例不会被销毁了，于是导致内存泄漏。</p>
<p>代码示例:</p>
<p><strong>修正前</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">void createHandler() &#123;</span><br><span class="line">       new Handler() &#123;</span><br><span class="line">           @Override public void handleMessage(Message message) &#123;</span><br><span class="line">               super.handleMessage(message);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;.postDelayed(new Runnable() &#123;</span><br><span class="line">           @Override public void run() &#123;</span><br><span class="line">               while(true);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, Long.MAX_VALUE &gt;&gt; 1);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   View hButton = findViewById(R.id.h_button);</span><br><span class="line">   hButton.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">       @Override public void onClick(View v) &#123;</span><br><span class="line">           createHandler();</span><br><span class="line">           nextActivity();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>修正后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//handler 改为静态</span><br><span class="line">//handler 内对象改为弱引用</span><br></pre></td></tr></table></figure>
<h2 id="耗时线程引起的内存泄漏"><a href="#耗时线程引起的内存泄漏" class="headerlink" title="耗时线程引起的内存泄漏"></a>耗时线程引起的内存泄漏</h2><blockquote>
<p>解决方案:1.将内部类变成静态内部类 , 2.如果有强引用Activity中的属性，则将该属性的引用方式改为弱引用, 3.在业务允许的情况下，当Activity执行onDestory时，结束这些耗时任务</p>
</blockquote>
<h3 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h3><p>我们再次通过Thread和TimerTask来展现内存泄漏。</p>
<p>代码示例:</p>
<p><strong>修正前</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">void spawnThread() &#123;</span><br><span class="line">        new Thread() &#123;</span><br><span class="line">            @Override public void run() &#123;</span><br><span class="line">                while(true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    View tButton = findViewById(R.id.t_button);</span><br><span class="line">    tButton.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">      @Override public void onClick(View v) &#123;</span><br><span class="line">          spawnThread();</span><br><span class="line">          nextActivity();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>修正后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//优化后的方式</span><br><span class="line">private static class BetterThread extends Thread &#123;</span><br><span class="line">    private boolean isRunning = true;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        super.run();</span><br><span class="line">        while(isRunning)&#123;</span><br><span class="line">            //doing something</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    public void stopThread()&#123;</span><br><span class="line">        isRunning=false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//停止线程</span><br><span class="line">@Override</span><br><span class="line">protected void onDestroy() &#123;</span><br><span class="line">    mBetterThread.stopThread();</span><br><span class="line">    super.onDestroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="TimerTask"><a href="#TimerTask" class="headerlink" title="TimerTask"></a>TimerTask</h3><p>只要是匿名类的实例，不管是不是在工作线程，都会持有Activity的引用，导致内存泄漏。</p>
<p>代码示例:</p>
<p><strong>修正前</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">void scheduleTimer() &#123;</span><br><span class="line">        new Timer().schedule(new TimerTask() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                while(true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, Long.MAX_VALUE &gt;&gt; 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    View ttButton = findViewById(R.id.tt_button);</span><br><span class="line">    ttButton.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">        @Override public void onClick(View v) &#123;</span><br><span class="line">            scheduleTimer();</span><br><span class="line">            nextActivity();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p><strong>修正后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//解决方案与Threads解决方案相同</span><br></pre></td></tr></table></figure>
<h2 id="资源未关闭引起的内存泄漏"><a href="#资源未关闭引起的内存泄漏" class="headerlink" title="资源未关闭引起的内存泄漏"></a>资源未关闭引起的内存泄漏</h2><blockquote>
<p>解决方案: 在资源使用完成后，记得关闭资源。</p>
</blockquote>
<h3 id="Cursor"><a href="#Cursor" class="headerlink" title="Cursor"></a>Cursor</h3><p>资源性对象比如(Cursor，File文件等)往往都用了一些缓冲，我们在不使用的时候，应该及时关闭它们，以便它们的缓冲及时回收内存。它们的缓冲不仅存在于 java虚拟机内，还存在于java虚拟机外。如果我们仅仅是把它的引用设置为null,而不关闭它们，往往会造成内存泄漏。因为有些资源性对象，比如 SQLiteCursor(在析构函数finalize(),如果我们没有关闭它，它自己会调close()关闭)，如果我们没有关闭它，系统在回收它时也会关闭它，但是这样的效率太低了。因此对于资源性对象在不使用的时候，应该调用它的close()函数，将其关闭掉，然后才置为null.在我们的程序退出时一定要确保我们的资源性对象已经关闭。</p>
<p>程序中经常会进行查询数据库的操作，但是经常会有使用完毕Cursor后没有关闭的情况。如果我们的查询结果集比较小，对内存的消耗不容易被发现，只有在常时间大量操作的情况下才会复现内存问题，这样就会给以后的测试和问题排查带来困难和风险。</p>
<p>代码示例:</p>
<p><strong>修正前</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cursor cursor = getContentResolver().query(uri...); </span><br><span class="line"> </span><br><span class="line">if (cursor.moveToNext()) &#123; </span><br><span class="line"> </span><br><span class="line">... ... </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>修正后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Cursor cursor = null; </span><br><span class="line"> </span><br><span class="line">try &#123; </span><br><span class="line"> </span><br><span class="line">cursor = getContentResolver().query(uri...); </span><br><span class="line"> </span><br><span class="line">if (cursor != null &amp;&amp;cursor.moveToNext()) &#123; </span><br><span class="line"> </span><br><span class="line">... ... </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">&#125; finally &#123; </span><br><span class="line"> </span><br><span class="line">if (cursor != null) &#123; </span><br><span class="line"> </span><br><span class="line">try &#123; </span><br><span class="line"> </span><br><span class="line">cursor.close(); </span><br><span class="line"> </span><br><span class="line">&#125; catch (Exception e) &#123; </span><br><span class="line"> </span><br><span class="line">//ignore this </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="频繁创建对象引起的内存泄漏"><a href="#频繁创建对象引起的内存泄漏" class="headerlink" title="频繁创建对象引起的内存泄漏"></a>频繁创建对象引起的内存泄漏</h2><blockquote>
<p>解决方案: 复用对象，避免过多的重复创建</p>
</blockquote>
<h3 id="Adapter-View"><a href="#Adapter-View" class="headerlink" title="Adapter View"></a>Adapter View</h3><p>初始时ListView会从BaseAdapter中根据当前的屏幕布局实例化一定数量的 view对象，同时ListView会将这些view对象缓存起来。当向上滚动ListView时，原先位于最上面的list item的view对象会被回收，然后被用来构造新出现的最下面的list item。这个构造过程就是由getView()方法完成的，getView()的第二个形参View convertView就是被缓存起来的list item的view对象(初始化时缓存中没有view对象则convertView是null)。由此可以看出，如果我们不去使用 convertView，而是每次都在getView()中重新实例化一个View对象的话，即浪费资源也浪费时间，也会使得内存占用越来越大。</p>
<p>代码示例:</p>
<p><strong>修正前</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public View getView(int position, ViewconvertView, ViewGroup parent) &#123; </span><br><span class="line"> </span><br><span class="line">View view = new Xxx(...); </span><br><span class="line"> </span><br><span class="line">... ... </span><br><span class="line"> </span><br><span class="line">return view; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>修正后</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public View getView(int position, ViewconvertView, ViewGroup parent) &#123; </span><br><span class="line"> </span><br><span class="line">View view = null; </span><br><span class="line"> </span><br><span class="line">if (convertView != null) &#123; </span><br><span class="line"> </span><br><span class="line">view = convertView; </span><br><span class="line"> </span><br><span class="line">populate(view, getItem(position)); </span><br><span class="line"> </span><br><span class="line">... </span><br><span class="line"> </span><br><span class="line">&#125; else &#123; </span><br><span class="line"> </span><br><span class="line">view = new Xxx(...); </span><br><span class="line"> </span><br><span class="line">... </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">return view; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>参考文献</li>
</ul>
<ol>
<li><a href="http://www.jianshu.com/p/ac00e370f83d" target="_blank" rel="external">Android内存泄漏的八种可能</a></li>
<li><a href="https://www.douban.com/note/542644739/" target="_blank" rel="external">Android内存泄漏终极解决篇</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java代码规范]]></title>
      <url>http://czhzero.com/2016/06/29/java-rules/</url>
      <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><strong>为什么需要编码规范</strong></p>
<ul>
<li>一个软件的生命周期中，80%的花费在于维护 </li>
<li>几乎没有任何一个软件，在其整个生命周期中，均由最初的开发人员来维护 </li>
<li>编码规范可以改善软件的可读性，可以让程序员尽快而彻底地理解新的代码 </li>
<li>如果你将源码作为产品发布，就需要确任它是否被很好的打包并且清晰无</li>
<li>误，一如你已构建的其它任何产品</li>
</ul>
<a id="more"></a>
<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><h3 id="1-Java源文件的命名"><a href="#1-Java源文件的命名" class="headerlink" title="1.Java源文件的命名"></a>1.Java源文件的命名</h3><p>JAVA源文件名必须和源文件中所定义的类的类名相同</p>
<h3 id="2-Package的命名"><a href="#2-Package的命名" class="headerlink" title="2.Package的命名"></a>2.Package的命名</h3><p>Package名的第一部分应是小写ASCII字符，并且是顶级域名之一，通常是com、edu、gov、mil、net、org或由ISO标准3166、1981定义的国家唯一标志码。Package名的后续部分由各组织内部命名规则决定，内部命名规则指定了各组件的目录名，所属部门名、项目名等。</p>
<p>示例:</p>
<blockquote>
<p>package com.apple.quicktime.v2;</p>
</blockquote>
<h3 id="3-Class-Interface的命名"><a href="#3-Class-Interface的命名" class="headerlink" title="3.Class/Interface的命名"></a>3.Class/Interface的命名</h3><p>Class名应是首字母大写的名词。命名时应该使其简洁而又具有描述性。异常类的命名，应以Exception结尾。Interface的命名规则与Class相同。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public interface Set &#123;</span><br><span class="line">        …</span><br><span class="line">&#125;;</span><br><span class="line">public class CounterSet implement Set &#123;</span><br><span class="line">        …</span><br><span class="line">&#125;;</span><br><span class="line">public class InvalidException extends Exception &#123;</span><br><span class="line">        …</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="4-常量的命名"><a href="#4-常量的命名" class="headerlink" title="4.常量的命名"></a>4.常量的命名</h3><p>常量名的字母应全部大写，不同的单词之间通过下划线进行连接，并且名字组合应该赋予含义。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static final int MIN_WIDTH = 4;</span><br></pre></td></tr></table></figure>
<h3 id="5-变量的命名"><a href="#5-变量的命名" class="headerlink" title="5.变量的命名"></a>5.变量的命名</h3><p>普通变量名的首字母小写，其它每个单词的首字母大写。命名时应该使其简短而又有特定含义，简洁明了的向使用者展示其使用意图。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">float floatWidth = 0.0;</span><br><span class="line">float doubleWidth = 0.0;</span><br></pre></td></tr></table></figure>
<h3 id="6-方法的命名"><a href="#6-方法的命名" class="headerlink" title="6.方法的命名"></a>6.方法的命名</h3><p>方法名的第一个单词应是动词，并且首字母小写，其它每个单词首字母大写。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void findPersonID(int nID);</span><br><span class="line">void isStringEmpty(String str);</span><br></pre></td></tr></table></figure>
<h3 id="7-方法参数的命名"><a href="#7-方法参数的命名" class="headerlink" title="7.方法参数的命名"></a>7.方法参数的命名</h3><p>应该选择有意义的名称作为方法的参数名。如果可能的话，选择和需要赋值的字段一样的名字。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void setCounter(int size) &#123;</span><br><span class="line">    this.size = size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="样式结构"><a href="#样式结构" class="headerlink" title="样式结构"></a>样式结构</h2><h3 id="1-缩进与对齐"><a href="#1-缩进与对齐" class="headerlink" title="1.缩进与对齐"></a>1.缩进与对齐</h3><p>一个缩进单位为四个空格，缩进排版时以缩进一个单位为最小缩进量。不要使用制表符（Tab键），因为不同的系统对它的解释不尽相同。</p>
<ul>
<li>缩进</li>
</ul>
<p>当某行语句在逻辑上比下面的语句高一个层次时，该行下面的语句都要在该行的基础上缩进一个单位。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public void someMethod(parameterA,parameterB) &#123;</span><br><span class="line">        int variantA=0;</span><br><span class="line"></span><br><span class="line">        Sentence1;</span><br><span class="line">        if (Conditions) &#123;</span><br><span class="line">            Sentence2;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-行宽"><a href="#2-行宽" class="headerlink" title="2.行宽"></a>2.行宽</h3><p>为了和linux,unix等字符界面的操作系统兼容，JAVA代码行应限制在100个字符之内，多余部分应换行。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">variantA = someMethod(longExpression1, longExpression2, longExpression3);</span><br><span class="line">    应改为：</span><br><span class="line">variantA = someMethod(longExpression1, longExpression2, </span><br><span class="line">                          longExpression3);</span><br></pre></td></tr></table></figure>
<h3 id="3-断行规则"><a href="#3-断行规则" class="headerlink" title="3.断行规则"></a>3.断行规则</h3><p>当一句完整的语句大于100个字符时需要断行，断行时 ，应遵循下面规则。</p>
<ul>
<li><p>在逗号后换行</p>
</li>
<li><p>在操作符前换行</p>
</li>
<li><p>换行后，应和断行处的前一层次对齐</p>
</li>
<li><p>换行时尽量选择高层次的地方进行换行</p>
</li>
<li><p>在使用上述的规则换行后对齐时，如果次行的长度大于80个字符，应改用两个单位的缩进来代替层次对齐</p>
</li>
</ul>
<h3 id="5-空白的使用"><a href="#5-空白的使用" class="headerlink" title="5.空白的使用"></a>5.空白的使用</h3><h4 id="空格的使用"><a href="#空格的使用" class="headerlink" title="空格的使用"></a>空格的使用</h4><ul>
<li>关键字和括号()之间要用空格隔开</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">   while (condition) &#123;</span><br><span class="line">       Sentence1;</span><br><span class="line">   &#125;</span><br><span class="line">   if (condition) &#123;</span><br><span class="line">       Sentence2;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>参数列表中逗号的后面应该使用空格</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    public void methodA(parameterA, parameterB, parameterC) &#123;</span><br><span class="line">        Sentence1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>所有的二元运算符，除了”.”，应该使用空格将之与操作数分开</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    longName1 = longName2 * (longName3 + longName4) + 4 * longName5;</span><br></pre></td></tr></table></figure>
<ul>
<li>强制类型转换后应该跟一个空格</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">  methodA((byte) parameterA, (Object) parameterB);</span><br></pre></td></tr></table></figure>
<ul>
<li>左括号右边和右括号左边不能有空格</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    longName1 = longName2 * ( longName3 + longName4 );</span><br><span class="line">    应改为：</span><br><span class="line">    longName1 = longName2 * (longName3 + longName4);</span><br></pre></td></tr></table></figure>
<ul>
<li>方法名与其参数列表的左括号之间不能有空格</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    methodA (parameter1, parameter2);</span><br><span class="line">    应改为：</span><br><span class="line">    methodA(parameter1, parameter2);</span><br></pre></td></tr></table></figure>
<ul>
<li>一元操作符和操作数之间不应该加空格，比如：负号(“-“)、自增(“++”)和自减(“–”)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">variantA += variantB --;</span><br><span class="line">    应改为：</span><br><span class="line">variantA += variantB--;</span><br></pre></td></tr></table></figure>
<h4 id="空白行的使用"><a href="#空白行的使用" class="headerlink" title="空白行的使用"></a>空白行的使用</h4><p>空白行将逻辑相关的代码段分隔开，以提高可读性，有如下几种情形</p>
<ul>
<li>两个类声明或接口声明之间使用两个空白行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    public class A &#123;</span><br><span class="line">        …</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class B &#123;</span><br><span class="line">        …</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>两个方法的声明之间使用一个空白行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    public class A &#123;</span><br><span class="line">        private void methodA() &#123;</span><br><span class="line">            …</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        priavte void methodB() &#123;</span><br><span class="line">            …</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="1-简单语句"><a href="#1-简单语句" class="headerlink" title="1.简单语句"></a>1.简单语句</h3><ul>
<li>每行至多包含一条完整语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    variantA++; variantB++;</span><br><span class="line">    应改为：</span><br><span class="line">    variantA++;</span><br><span class="line">    variantB++;</span><br></pre></td></tr></table></figure>
<ul>
<li>在没有必要的情况下，不要在return语句中使用括号</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    return (0);</span><br><span class="line">    应改成：</span><br><span class="line">    return 0;</span><br></pre></td></tr></table></figure>
<h3 id="2-复合语句"><a href="#2-复合语句" class="headerlink" title="2.复合语句"></a>2.复合语句</h3><p>复合语句是包含在大括号中的语句序列，形如”{ 语句 }”，其编码应有如下基本规则：</p>
<ul>
<li>被括其中的语句应该比复合语句缩进一个层次</li>
<li>左大括号”{“应位于复合语句起始行的行尾，并且空一个空格，右大括号”}”应另起一行并与复合语句首行对齐</li>
<li>复合语句即使只有一个语句，也要有大括号作为界定</li>
<li>每行至多包含一条完整语句</li>
</ul>
<h4 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    if-else语句应该具有如下格式：</span><br><span class="line">    if (condition) &#123;</span><br><span class="line">        Sentences;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (condition) &#123;</span><br><span class="line">        Sentences;</span><br><span class="line">    &#125; else if (condition) &#123;</span><br><span class="line">        Sentences;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        Sentences;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h4><p>在选择语句中应添加 default情况，防止不可预知的情况发生。当一个case在没有break语句的情况下，它将顺着往下执行。应在break语句的位置添加注释.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    switch (condition) &#123;</span><br><span class="line">    case ABC:</span><br><span class="line">        Sentences;</span><br><span class="line">        </span><br><span class="line">    case DEF:</span><br><span class="line">        Sentences;</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    case XYZ:</span><br><span class="line">        Sentences;</span><br><span class="line">        break;</span><br><span class="line"></span><br><span class="line">    default:</span><br><span class="line">        Sentences;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><p>在for语句的初始化或更新子句中，如果存在多项，各项间应用逗号隔开。同时，应避免使用三个以上子句，从而导致复杂度提高；若确实需要，可以在for循环之前放置初始化子句或在for循环末尾放置更新子句。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    for (int i = 0, j = 10, k = 10, m = 50; i &lt; j + k + m; i++, j--, k--, m--) &#123;</span><br><span class="line">        Sentences;</span><br><span class="line">    &#125;</span><br><span class="line">    应改为：</span><br><span class="line">    int i = 0;</span><br><span class="line">    int j = 100;</span><br><span class="line">    int k = 1000;</span><br><span class="line">    int m = 500;</span><br><span class="line"></span><br><span class="line">    for (; i &lt; j + k + m ;) &#123;</span><br><span class="line">        Sentences;</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">        k--;</span><br><span class="line">        m--;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><h3 id="1-变量的声明"><a href="#1-变量的声明" class="headerlink" title="1.变量的声明"></a>1.变量的声明</h3><ul>
<li>一行只声明一个变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    int variantA = 0, variantB = 0;</span><br><span class="line">    应改为：</span><br><span class="line">    int variantA = 0;</span><br><span class="line">    int variantB = 0;</span><br></pre></td></tr></table></figure>
<ul>
<li>临时变量放在其作用域内声明</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    int tempA = 0;</span><br><span class="line"></span><br><span class="line">    if (condition) &#123;</span><br><span class="line">        tempA = methodA();</span><br><span class="line">        methodB(tempA);</span><br><span class="line">    &#125;</span><br><span class="line">    应改为：</span><br><span class="line">    if (condition) &#123;</span><br><span class="line">        int tempA = 0;</span><br><span class="line"></span><br><span class="line">        tempA = methodA();</span><br><span class="line">        methodB(tempA);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>声明应集中放在作用域的顶端</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    if (condition) &#123;</span><br><span class="line">        int tempA = 0;</span><br><span class="line"></span><br><span class="line">        tempA = methodA();</span><br><span class="line">        int tempB = 0;</span><br><span class="line"></span><br><span class="line">        tempB = methodB();</span><br><span class="line">    &#125;</span><br><span class="line">    应改为：</span><br><span class="line">    if (condition) &#123;</span><br><span class="line">        int tempA = 0;</span><br><span class="line">        int tempB = 0;</span><br><span class="line"></span><br><span class="line">        tempA = methodA();</span><br><span class="line">        tempB = methodB();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>临时变量放在其作用域内声明</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    int tempA = 0;</span><br><span class="line"></span><br><span class="line">    if (condition) &#123;</span><br><span class="line">        tempA = methodA();</span><br><span class="line">        methodB(tempA);</span><br><span class="line">    &#125;</span><br><span class="line">    应改为：</span><br><span class="line">    if (condition) &#123;</span><br><span class="line">        int tempA = 0;</span><br><span class="line"></span><br><span class="line">        tempA = methodA();</span><br><span class="line">        methodB(tempA);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>避免声明的局部变量覆盖上一级声明的变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    int counter = 0;</span><br><span class="line"></span><br><span class="line">    if (condition) &#123;</span><br><span class="line">        int counter = 0;</span><br><span class="line"></span><br><span class="line">        counter = methodA();</span><br><span class="line">    &#125;</span><br><span class="line">    应改为：</span><br><span class="line">    int counter = 0;</span><br><span class="line"></span><br><span class="line">    if (condition) &#123;</span><br><span class="line">        int counterTemp = 0;</span><br><span class="line"></span><br><span class="line">        counterTemp = methodA();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-类和接口的声明"><a href="#2-类和接口的声明" class="headerlink" title="2.类和接口的声明"></a>2.类和接口的声明</h3><p>当编写类和接口时，应该遵守以下规则：</p>
<ul>
<li>在方法名与其参数列表之前的左括号”(“间不要有空格</li>
<li>左大括号”{“位于声明语句同行的末尾，并与末尾之间留有一个空格</li>
<li>右大括号”}”另起一行，与相应的声明语句对齐。如果是一个空语句，”}”应紧跟在”{“之后</li>
<li>方法与方法之间以空白行分隔</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Sample extends Object &#123;</span><br><span class="line">        private int ivar1;</span><br><span class="line">        private int ivar2;</span><br><span class="line"></span><br><span class="line">        public Sample(int i, int j) &#123;</span><br><span class="line">            ivar1 = i;</span><br><span class="line">            ivar2 = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int emptyMethod() &#123;&#125;</span><br><span class="line">        …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java代码规范之CheckStyle + Git Hook]]></title>
      <url>http://czhzero.com/2016/06/29/checkstyle-githook/</url>
      <content type="html"><![CDATA[<h3 id="CheckStyle简介"><a href="#CheckStyle简介" class="headerlink" title="CheckStyle简介"></a>CheckStyle简介</h3><p>CheckStyle提供了一个帮助JAVA开发人员遵守某些编码规范的工具。它能够自动化代码规范检查过程，从而使得开发人员从这项重要，但是枯燥的任务中解脱出来。</p>
<a id="more"></a>
<p>CheckStyle检验的主要内容如下。</p>
<ul>
<li>Annotations</li>
<li>Block Checks</li>
<li>Class Design</li>
<li>Coding</li>
<li>Headers</li>
<li>Imports</li>
<li>Javadoc Comments</li>
<li>Metrics</li>
<li>Miscellaneous</li>
<li>Modifiers</li>
<li>Naming Conventions</li>
<li>Regexp</li>
<li>Size Violations</li>
<li>Whitespace</li>
</ul>
<p>官网给出了两个规则示例, <a href="http://checkstyle.sourceforge.net/google_style.html" target="_blank" rel="external">Google’s Style</a> 和 <a href="http://checkstyle.sourceforge.net/sun_style.html" target="_blank" rel="external">Sun’s Style
</a> 用以参考。</p>
<p>除了上述检验内容，CheckStyle还支持<a href="http://checkstyle.sourceforge.net/writingchecks.html" target="_blank" rel="external">自定义规则</a>,用来定义自己想要的代码风格。</p>
<h3 id="Git-Hook简介"><a href="#Git-Hook简介" class="headerlink" title="Git Hook简介"></a>Git Hook简介</h3><p>和其它版本控制系统一样，Git 能在特定的重要动作发生时触发自定义脚本。 有两组这样的钩子：客户端的和服务器端的。 客户端钩子由诸如提交和合并这样的操作所调用，而服务器端钩子作用于诸如接收被推送的提交这样的联网操作。 你可以随心所欲地运用这些钩子。</p>
<p>钩子都被存储在 Git 目录下的 hooks 子目录中。 也即绝大部分项目中的 .git/hooks 。 当你用 git init 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。这些脚本除了本身可以被调用外，它们还透露了被触发时所传入的参数。 所有的示例都是 shell 脚本，其中一些还混杂了 Perl 代码，不过，任何正确命名的可执行脚本都可以正常使用 —— 你可以用 Ruby 或 Python，或其它语言编写它们。 这些示例的名字都是以 .sample 结尾，如果你想启用它们，得先移除这个后缀。</p>
<p>把一个正确命名且可执行的文件放入 Git 目录下的 hooks 子目录中，即可激活该钩子脚本。 这样一来，它就能被 Git 调用。</p>
<p>客户端钩子分为很多种。代码规范检查我们使用pre-commit钩子即可，pre-commit 钩子在键入提交信息前运行。 它用于检查即将提交的快照，例如，检查是否有所遗漏，确保测试运行，以及核查代码。 如果该钩子以非零值退出，Git 将放弃此次提交，不过你可以用 git commit –no-verify 来绕过这个环节。 你可以利用该钩子，来检查代码风格是否一致（运行类似 lint 的程序）、尾随空白字符是否存在（自带的钩子就是这么做的），或新方法的文档是否适当。</p>
<p>更多关于Git Hook内容的请看 <a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90" target="_blank" rel="external">这里</a>。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>GitHook的pre-commit脚本配合CheckStyle即可完成代码规范的自动检查。每次代码commit之前，若代码不符合规范，则无法commit成功。 </p>
<p>要执行CheckStyle需要以下几个条件。</p>
<ul>
<li>jdk与git环境配置</li>
<li>pre-commit脚本, 用来执行代码检测与结果分析</li>
<li>checkstyle的jar包 , 例如 <a href="http://downloads.sourceforge.net/project/checkstyle/checkstyle/7.0/checkstyle-7.0-all.jar" target="_blank" rel="external">checkstyle-7.0-all.jar</a></li>
<li>规则配置的xml文件, 例如 <a href="https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/sun_checks.xml" target="_blank" rel="external">sun_checks</a>。</li>
</ul>
<h3 id="自定义检查规则示例"><a href="#自定义检查规则示例" class="headerlink" title="自定义检查规则示例"></a>自定义检查规则示例</h3><p>官方提供的代码规范往往太过严格，在工作中使用不太现实，所以有必要根据具体情况来定制具体的代码规范，CheckStyle对代码规范的定制提供了很多大灵活性。<br>下面我们来定义一些基本的规范，后续有增加我们再修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE module PUBLIC</span><br><span class="line">    &quot;-//Puppy Crawl//DTD Check Configuration 1.3//EN&quot;</span><br><span class="line">    &quot;http://www.puppycrawl.com/dtds/configuration_1_3.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;module name = &quot;Checker&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;charset&quot; value=&quot;UTF-8&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=&quot;severity&quot; value=&quot;warning&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=&quot;fileExtensions&quot; value=&quot;java, properties, xml&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 检查文件中是否含有tab键--&gt;</span><br><span class="line">    &lt;module name=&quot;FileTabCharacter&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 代码行数最大不超过1000行 --&gt;</span><br><span class="line">    &lt;module name=&quot;FileLength&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;max&quot; value=&quot;1500&quot;/&gt;</span><br><span class="line">    &lt;/module&gt;</span><br><span class="line"></span><br><span class="line">    &lt;module name=&quot;TreeWalker&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 避免.*,重复多余的和不使用的import--&gt;</span><br><span class="line">        &lt;module name=&quot;AvoidStarImport&quot;/&gt;</span><br><span class="line">        &lt;module name=&quot;RedundantImport&quot;/&gt;</span><br><span class="line">        &lt;module name=&quot;UnusedImports&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 常量全部用大写--&gt;</span><br><span class="line">        &lt;module name=&quot;ConstantName&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 方法名称 --&gt;</span><br><span class="line">        &lt;module name=&quot;MethodName&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 检查代码块:起始大括号和if等同行，不能有空的代码块，结束大括号另起一行--&gt;</span><br><span class="line">        &lt;module name=&quot;LeftCurly&quot;/&gt;</span><br><span class="line">        &lt;module name=&quot;NeedBraces&quot;/&gt;</span><br><span class="line">        &lt;module name=&quot;RightCurly&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 代码缩进格式 --&gt;</span><br><span class="line">        &lt;module name=&quot;Indentation&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;basicOffset&quot; value=&quot;4&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;braceAdjustment&quot; value=&quot;0&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;caseIndent&quot; value=&quot;4&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;throwsIndent&quot; value=&quot;4&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;lineWrappingIndentation&quot; value=&quot;4&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;arrayInitIndent&quot; value=&quot;4&quot;/&gt;</span><br><span class="line">        &lt;/module&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 操作符周围要有空格 --&gt;</span><br><span class="line">        &lt;module name=&quot;WhitespaceAround&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 当有多重修饰符时,修饰符采用以下顺序:</span><br><span class="line">             (public,protected,private,abstract,static,final,</span><br><span class="line">             transient,volatile,synchronized,native,strictfp) --&gt;</span><br><span class="line">        &lt;module name=&quot;ModifierOrder&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 检查是否有多余的修饰符，例如：接口中的方法不必使用public、abstract修饰</span><br><span class="line">                   tokens: 检查的类型 --&gt;</span><br><span class="line">        &lt;module name=&quot;RedundantModifier&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 禁止空catch快 --&gt;</span><br><span class="line">        &lt;module name=&quot;EmptyCatchBlock&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;exceptionVariableName&quot; value=&quot;expected&quot;/&gt;</span><br><span class="line">        &lt;/module&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 代码最长长度不能超过100 --&gt;</span><br><span class="line">        &lt;module name=&quot;LineLength&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;max&quot; value=&quot;100&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;ignorePattern&quot; value=&quot;^package.*|^import.*|a href|href|http://|https://|ftp://&quot;/&gt;</span><br><span class="line">        &lt;/module&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 最多方法数不超过30 --&gt;</span><br><span class="line">        &lt;module name=&quot;MethodCount&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;maxTotal&quot; value=&quot;30&quot;/&gt;</span><br><span class="line">        &lt;/module&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 方法长度不超过60 --&gt;</span><br><span class="line">        &lt;module name=&quot;MethodLength&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;tokens&quot; value=&quot;METHOD_DEF&quot;/&gt;</span><br><span class="line">            &lt;property name=&quot;max&quot; value=&quot;60&quot;/&gt;</span><br><span class="line">        &lt;/module&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 避免Equals左边为空 --&gt;</span><br><span class="line">        &lt;module name=&quot;EqualsAvoidNull&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 避免复杂内联函数 --&gt;</span><br><span class="line">        &lt;module name=&quot;AvoidInlineConditionals&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--</span><br><span class="line">        1. 类（静态）变量。首先应当是public类变量，然后是protected类变量，然后是package类变量（没有访问标识符），最后是private类变量。</span><br><span class="line">        2. 实例变量。首先应当是public类变量，然后是protected类变量，然后是package类变量（没有访问标识符），最后是private类变量。</span><br><span class="line">        3. 构造器</span><br><span class="line">        4. 方法</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;module name=&quot;DeclarationOrder&quot;/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 避免忘记break,continue等 --&gt;</span><br><span class="line">        &lt;module name=&quot;FallThrough&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- for循环深度最多为2 --&gt;</span><br><span class="line">        &lt;module name=&quot;NestedForDepth&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;max&quot; value=&quot;1&quot;/&gt;</span><br><span class="line">        &lt;/module&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- if else深度最多为3 --&gt;</span><br><span class="line">        &lt;module name=&quot;NestedIfDepth&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;max&quot; value=&quot;2&quot;/&gt;</span><br><span class="line">        &lt;/module&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- try catch深度最多为3--&gt;</span><br><span class="line">        &lt;module name=&quot;NestedTryDepth&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;max&quot; value=&quot;2&quot;/&gt;</span><br><span class="line">        &lt;/module&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/module&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/module&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Git-Hook-脚本示例"><a href="#Git-Hook-脚本示例" class="headerlink" title="Git Hook 脚本示例"></a>Git Hook 脚本示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env python</span><br><span class="line"># -*- encoding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import sys,os,re</span><br><span class="line"></span><br><span class="line">print &apos;\n.......................Code Style Checking....................\n&apos;</span><br><span class="line"></span><br><span class="line">#the count of level, like ERROR,WARN</span><br><span class="line">def get_level(content, level):</span><br><span class="line">    return len(re.compile(r&quot;\[%s\]&quot; % level).findall(content))</span><br><span class="line"></span><br><span class="line">#get the commit file name (whole path)</span><br><span class="line">def get_file_name(content, postfix=None):</span><br><span class="line">    content = content.replace(&quot;\t&quot;, &quot; &quot;)</span><br><span class="line">    line_divided = content.split(&quot;\n&quot;)</span><br><span class="line">    space_divided = [[j for j in i.split(&quot; &quot;) if j.strip()]for i in line_divided]</span><br><span class="line">    filenames = [i[5] for i in space_divided if i]</span><br><span class="line">    if not postfix:</span><br><span class="line">        return filenames</span><br><span class="line">    return [i for i in filenames if &quot;.%s&quot; % postfix in i]</span><br><span class="line"></span><br><span class="line">jarpath = os.popen(&apos;git config --get checkstyle.jar&apos;).read()</span><br><span class="line">checkfilepath = os.popen(&apos;git config --get checkstyle.checkfile&apos;).read()</span><br><span class="line"></span><br><span class="line">#check code command</span><br><span class="line">command = &apos;java -jar &apos; + jarpath[:-1] + &apos; -c &apos; + checkfilepath[:-1]</span><br><span class="line"></span><br><span class="line">#the file to check</span><br><span class="line">files = os.popen(&apos;git diff-index --cached HEAD&apos;).read()</span><br><span class="line"></span><br><span class="line">#the result of command</span><br><span class="line">content = get_file_name(files, &apos;java&apos;)</span><br><span class="line"></span><br><span class="line">resultsum = 0</span><br><span class="line"></span><br><span class="line">for i in content:</span><br><span class="line">    result = os.popen(command + &apos; &apos; + i).read()</span><br><span class="line">    print result</span><br><span class="line">    resultsum += get_level(result,&apos;ERROR&apos;)</span><br><span class="line">    resultsum += get_level(result,&apos;WARN&apos;)</span><br><span class="line"></span><br><span class="line">if resultsum &gt; 0:</span><br><span class="line">    print &apos;\n.......................You must fix the errors and warnings first, then excute commit command again...........\n&apos;</span><br><span class="line">    sys.exit(-1)</span><br><span class="line">else:</span><br><span class="line">    print &apos;\n.................................Code is very good...................\n&apos;</span><br><span class="line">    sys.exit(0)</span><br></pre></td></tr></table></figure>
<p>以上pre-commit脚本使用的是python语言, 主要做了三件事。</p>
<ul>
<li>通过git diff命令找到本次提交的java文件的完整路径</li>
<li>循环执行check命令</li>
</ul>
<blockquote>
<p>java -jar checkstyle-7.0-all.jar -c /sun_checks.xml MyClass.java</p>
</blockquote>
<ul>
<li>找出check命令结果中的ERROR和WARN数量, 返回0, commit成功, 否则,  commit失败</li>
</ul>
<h3 id="部署到项目中"><a href="#部署到项目中" class="headerlink" title="部署到项目中"></a>部署到项目中</h3><p>因为pre-commit脚本,是存放在.git/hooks目录下的。所以他不会被提交到远程服务器。所以只能将<br>pre-commit脚本, checkstyle-7.0-all.jar, 以及checks.xml存放到项目目录下。</p>
<p>每个终端通过git pull拉取到文件后, 执行下列三个命令。</p>
<ul>
<li>git config –add checkstyle.jar ../../config/checkstyle-7.0-all.jar</li>
<li>git config –add checkstyle.checkfile ../../config/test_checks.xml</li>
<li>cp ../../config/pre-commit ./.git/hooks/ </li>
</ul>
<p>这样,再运行git commit的时候就会自动帮你检查你的代码了。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/002/1.png" alt="Alt text"></p>
<p>根据提示修改代码吧。</p>
<p>注: 若有submodule模块,pre-commit要拷贝到.git/modules/…/hooks目录下。</p>
<p>参考文献:</p>
<ul>
<li><a href="http://checkstyle.sourceforge.net/" target="_blank" rel="external">check style官网</a></li>
<li><a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90" target="_blank" rel="external">git hook</a></li>
<li><a href="http://blog.csdn.net/yang1982_0907/article/details/18086693" target="_blank" rel="external">详解CheckStyle的检查规则（共138条规则）</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio 使用小技巧和快捷键]]></title>
      <url>http://czhzero.com/2016/06/28/android-studio-tips/</url>
      <content type="html"><![CDATA[<p>原文地址:<a href="http://www.open-open.com/lib/view/open1458715872710.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1458715872710.html</a></p>
<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>本文翻译自 <a href="https://github.com/pavlospt/Android-Studio-Tips-by-Philippe-Breault/wiki" target="_blank" rel="external">Android Studio Tips by Philippe Breault</a>，一共收集了62个 Android Studio 使用小技巧和快捷键。 根据这些小技巧的使用场景，本文将这62个小技巧分为常用技巧（1 – 28）、编码技巧（29 – 49）和调试技巧（50 – 62），分成三个部分。</p>
<a id="more"></a>
<h3 id="1-书签"><a href="#1-书签" class="headerlink" title="1.书签"></a>1.书签</h3><ul>
<li>描述：这是一个很有用的功能，让你可以在某处做个标记（书签），方便后面再跳转到此处。</li>
<li>调用：Menu → Navigate → Bookmarks</li>
<li><p>快捷键：</p>
<ul>
<li>添加/移除书签：F3(OS X) 、F11(Windows/Linux);</li>
<li>添加/移除书签(带标记)：Alt + F3(OS X)、Ctrl + F11(Windows/Linux);</li>
<li>显示全部书签：Cmd + F3(OS X) 、Shift + F11(Windows/Linux)，显示所有的书签列表，并且是可以搜索的。</li>
<li>上一个/下一个书签：无，可以在设置中设置快捷键。</li>
</ul>
</li>
<li><p>更多：当你为某个书签指定了标记，你可以使用快捷键 Ctrl + 标记 来快速跳转到标记处，比如输入Ctrl + 1，跳到标记为1的书签处。</p>
</li>
</ul>
<h3 id="2-折叠-展开代码块"><a href="#2-折叠-展开代码块" class="headerlink" title="2.折叠/展开代码块"></a>2.折叠/展开代码块</h3><ul>
<li>描述：该操作提供一种方法，让你隐藏你不关心的部分代码，以一种较为简洁的格式显示关键代码。一个有意思的用法是隐藏匿名内部类的代码，让其看起来像一个Lambda表达式。</li>
<li>快捷键：Cmd + “+”/”-“(OS X)、Ctrl + Shift + “+”/”-“(Windows/Linux);</li>
<li>更多：可以在Settig → Editor → General → Code Folding 中设置折叠规则。</li>
</ul>
<h3 id="3-与分支对比"><a href="#3-与分支对比" class="headerlink" title="3.与分支对比"></a>3.与分支对比</h3><ul>
<li>描述：该操作提供一种方法，让你隐藏你不关心的部分代码，以一种较为简洁的格式显示关键代码。一个有意思的用法是隐藏匿名内部类的代码，让其看起来像一个Lambda表达式。</li>
<li>快捷键：Cmd + “+”/”-“(OS X)、Ctrl + Shift + “+”/”-“(Windows/Linux);</li>
<li>更多：可以在Settig → Editor → General → Code Folding 中设置折叠规则。</li>
</ul>
<h3 id="4-与剪切板比对"><a href="#4-与剪切板比对" class="headerlink" title="4.与剪切板比对"></a>4.与剪切板比对</h3><ul>
<li>描述：将当前选中的部分与剪切板上的内容进行比对。</li>
<li>调用：右键选中的部分，在右键菜单中选择“Compare With Clipboard”。</li>
</ul>
<h3 id="5-上下文信息"><a href="#5-上下文信息" class="headerlink" title="5.上下文信息"></a>5.上下文信息</h3><ul>
<li>描述：当前作用域定义超过滚动区域，执行该操作将显示所在的上下文信息，通常它显示的是类名或者内部类类名或者当前所在的方法名。该操作在xml文件中同样适用。</li>
<li>调用：Menu → View → Context Info</li>
<li>快捷键：Alt + Q (Windows/Linux)<br>更多：个人认为，这个功能更好的用法是快速查看当前类继承的父类或者实现的接口。</li>
</ul>
<h3 id="6-查找操作"><a href="#6-查找操作" class="headerlink" title="6.查找操作"></a>6.查找操作</h3><ul>
<li>描述：输入某个操作的名称，快速查找，对于没有快捷键的部分操作这是一个很有用的技巧。</li>
<li>快捷键：Cmd +Shift + A(OS X)、Ctrl + Shift + A(Windows/Linux)；</li>
<li>更多：当某个操作是有快捷键的，会显示在旁边。</li>
</ul>
<h3 id="7-查找补全"><a href="#7-查找补全" class="headerlink" title="7.查找补全"></a>7.查找补全</h3><ul>
<li>描述：当你在一个文件中进行查找时，使用自动补全快捷键可以给出在当前文件中出现的建议单词；</li>
<li>快捷键：Cmd + F(OS X),Ctrl + F(Windows/Linux),输入一些字符，然后使用自动补全；</li>
</ul>
<h3 id="8-隐藏所有面板"><a href="#8-隐藏所有面板" class="headerlink" title="8.隐藏所有面板"></a>8.隐藏所有面板</h3><ul>
<li>描述：切换编辑器铺满整个程序界面，隐藏其他的面板。再次执行该操作，将会回到隐藏前的状态。</li>
<li>调用：Menu → Window → Active Tool Window → Hide All Windows；</li>
<li>快捷键：Cmd +Shift + F12(OS X)、Ctrl + Shift + F12(Windows/Linux)；</li>
</ul>
<h3 id="9-高亮一切"><a href="#9-高亮一切" class="headerlink" title="9.高亮一切"></a>9.高亮一切</h3><ul>
<li>描述：该操作将会高亮某个字符在当前文件中所有出现的地方。这不仅仅是简单的匹配，实际上它会分析当前的作用域，只高亮相关的部分。</li>
<li>调用：Menu → Edit → Find → Highlight Usages in File；</li>
<li>定位到上一处/下一处：Menu → Edit → Find → Find Next/Previous；</li>
<li>快捷键：相关快捷键请在菜单中查看；</li>
<li><p>更多：</p>
<ul>
<li>如果高亮一个方法的return或throw语句，将会高亮这个方法的所有出口/结束点；</li>
<li>如果高亮某个类定义处的extend或implements语句，将会高亮继承的或实现的方法；</li>
<li>高亮一个import语句也会高亮使用到的地方；</li>
<li>按下Esc可以退出高亮模式</li>
</ul>
<h3 id="10-回到上一个工具窗口"><a href="#10-回到上一个工具窗口" class="headerlink" title="10.回到上一个工具窗口"></a>10.回到上一个工具窗口</h3><ul>
<li>描述：有时候你会从某个工具窗口跳到编辑器里面，然后又需要重新回到刚才操作的那个工具窗，比如你查找使用情况的时，使用该操作可以在不使用鼠标的情况下跳转到之前的工具窗口。</li>
<li>快捷键：F12；</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HEXO + Github 搭建自己的博客系统]]></title>
      <url>http://czhzero.com/2016/06/25/hexoblog/</url>
      <content type="html"><![CDATA[<p>Hexo 是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。GitHub可以托管各种git库，同时提供了免费的域名。这两者相结合，就可以简单快速的搭建起自己的免费博客网站。</p>
<a id="more"></a>
<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h3><ul>
<li>安装<a href="https://git-scm.com/" target="_blank" rel="external">Git</a></li>
<li>安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></li>
<li>申请<a href="www.github.com">Github</a>账号</li>
<li>申请<a href="http://tongji.baidu.com/" target="_blank" rel="external">百度统计</a>账号</li>
<li>申请<a href="www.duoshuo.com">多说</a>账号</li>
<li>申请<a href="https://leancloud.cn" target="_blank" rel="external">LeanCloud</a>账号</li>
<li>申请<a href="https://portal.qiniu.com" target="_blank" rel="external">七牛云存储</a>账号</li>
</ul>
<h3 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2.安装Hexo"></a>2.安装Hexo</h3><p>安装Node.js完成后，命令行安装nexo。详细安装说明可参考<a href="https://hexo.io/docs/" target="_blank" rel="external">Hexo</a>官方文档。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//hexo</span><br><span class="line">mkdir hexo  #创建一个文件夹</span><br><span class="line">cd hexo</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">//安装hexo插件</span><br><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@0.2 --save</span><br><span class="line">npm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">npm install hexo-generator-feed@1 --save</span><br><span class="line">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure>
<p>安装成功后，可看到如下目录结构。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/001/1.png" alt="Alt text"></p>
<p>_config.yml 全局配置文件。要注意的是，该文件格式要求极为严格，缺少一个空格都会导致运行错误。小提示：不要用Tab缩进，两个空格符， 冒号：后面只用一个空格即可 。</p>
<p>themes 存放主题的文件夹</p>
<p>source 博客文章资源文件夹</p>
<p>source/_drafts 草稿文件夹</p>
<p>source/_posts 文章文件夹</p>
<p>具体目录结构介绍, 看<a href="https://hexo.io/docs/setup.html" target="_blank" rel="external">这里</a>。</p>
<h3 id="3-配置GitHub-Pages"><a href="#3-配置GitHub-Pages" class="headerlink" title="3.配置GitHub Pages"></a>3.配置GitHub Pages</h3><p>注册github后，新建一个仓库，名字必须为 “github用户名.github.io”,如图所示。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/001/2.png" alt="Alt text"></p>
<p>打开仓库，点击设置，选择 <strong>Launch automatic page generator</strong> 按钮，生成个人网站。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/001/3.png" alt="Alt text"></p>
<p>至此，你可以在浏览器中输入 <a href="http://czhzero.github.io" target="_blank" rel="external">http://czhzero.github.io</a> 访问你的GitHubPages。</p>
<p>若你有自己的域名，则可以在仓库里面添加CNAME文件。CNAME没有后缀名，里面的内容就写上你的域名，里面内容为你的域名(如:www.czhzero.com)。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/001/4.png" alt="Alt text"></p>
<p>申请域名比较简单，想好名字给钱就行。至于哪家域名服务性价比高，就仁者见仁，智者见智。<br>我这边是使用的<a href="https://sg.godaddy.com" target="_blank" rel="external">Godaddy</a>域名。不过Godaddy解析域名速度慢，后面我又使用了免费的<a href="https://www.dnspod.cn" target="_blank" rel="external">DnsPod</a>进行配置。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/001/5.png" alt="Alt text"></p>
<h3 id="4-主题设定"><a href="#4-主题设定" class="headerlink" title="4.主题设定"></a>4.主题设定</h3><p>Hexo安装完成后，一般都要配置一个自己喜欢的主题，默认主题确实不是很好看。</p>
<p>主要配置文件有两个:</p>
<ul>
<li>根目录下 _build.yml , 即站点配置文件</li>
<li>主题目录下 _build.yml, 即主题配置文件</li>
</ul>
<p>Next主题的配置方法，在<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">Next</a>官网里都有具体描述。</p>
<h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd hexo目录</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<h4 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h4><p>在hexo目录下找到_config.yml配置文件，找到 theme 字段，并将其值更改为 next，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<h4 id="站点配置文件示例"><a href="#站点配置文件示例" class="headerlink" title="站点配置文件示例"></a>站点配置文件示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: Alvin-一座小楼</span><br><span class="line">subtitle: Test</span><br><span class="line">description: 大海从不拒绝走过弯路的小溪 </span><br><span class="line">author: Alvin-一座小楼</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone:</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://czhzero.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :year-:month-:day-:title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: false</span><br><span class="line">post_asset_folder: false</span><br><span class="line">relative_link: false</span><br><span class="line">future: true</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">	type: git</span><br><span class="line">	repository: https://github.com/czhzero/czhzero.github.com.git</span><br><span class="line">	branch: master</span><br></pre></td></tr></table></figure>
<h4 id="主题配置文件示例"><a href="#主题配置文件示例" class="headerlink" title="主题配置文件示例"></a>主题配置文件示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Site Information Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Put your favicon.ico into `hexo-site/source/` directory.</span><br><span class="line">favicon: /favicon.ico</span><br><span class="line"></span><br><span class="line"># Set default keywords (Use a comma to separate)</span><br><span class="line">keywords: &quot;Hexo, NexT&quot;</span><br><span class="line"></span><br><span class="line"># Set rss to false to disable feed link.</span><br><span class="line"># Leave rss as empty to use site&apos;s feed link.</span><br><span class="line"># Set rss to specific value if you have burned your feed already.</span><br><span class="line">rss:</span><br><span class="line"></span><br><span class="line"># Specify the date when the site was setup</span><br><span class="line">since: 2016</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Menu Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash (/archives -&gt; archives)</span><br><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  categories: /categories</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br><span class="line">  #about: /about</span><br><span class="line">  #commonweal: /404.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Enable/Disable menu icons.</span><br><span class="line"># Icon Mapping:</span><br><span class="line">#   Map a menu item to a specific FontAwesome icon name.</span><br><span class="line">#   Key is the name of menu item and value is the name of FontAwsome icon. Key is case-senstive.</span><br><span class="line">#   When an question mask icon presenting up means that the item has no mapping icon.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  commonweal: heartbeat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Font Settings</span><br><span class="line"># - Find fonts on Google Fonts (https://www.google.com/fonts)</span><br><span class="line"># - All fonts set here will have the following styles:</span><br><span class="line">#     light, light italic, normal, normal intalic, bold, bold italic</span><br><span class="line"># - Be aware that setting too much fonts will cause site running slowly</span><br><span class="line"># - Introduce in 5.0.1</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line">font:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # Uri of fonts host. E.g. //fonts.googleapis.com (Default)</span><br><span class="line">  host:</span><br><span class="line"></span><br><span class="line">  # Global font settings used on &lt;body&gt; element.</span><br><span class="line">  global:</span><br><span class="line">    # external: true will load this font family from host.</span><br><span class="line">    external: true</span><br><span class="line">    family: Lato</span><br><span class="line"></span><br><span class="line">  # Font settings for Headlines (h1, h2, h3, h4, h5, h6)</span><br><span class="line">  # Fallback to `global` font settings.</span><br><span class="line">  headings:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line"></span><br><span class="line">  # Font settings for posts</span><br><span class="line">  # Fallback to `global` font settings.</span><br><span class="line">  posts:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line"></span><br><span class="line">  # Font settings for Logo</span><br><span class="line">  # Fallback to `global` font settings.</span><br><span class="line">  # The `size` option use `px` as unit</span><br><span class="line">  logo:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line">    size:</span><br><span class="line"></span><br><span class="line">  # Font settings for &lt;code&gt; and code blocks.</span><br><span class="line">  codes:</span><br><span class="line">    external: true</span><br><span class="line">    family:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Sidebar Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Social Links</span><br><span class="line"># Key is the link label showing to end users.</span><br><span class="line"># Value is the target link (E.g. GitHub: https://github.com/iissnan)</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/czhzero</span><br><span class="line">  微博: http://weibo.com/u/1765185530</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Social Links Icons</span><br><span class="line"># Icon Mapping:</span><br><span class="line">#   Map a menu item to a specific FontAwesome icon name.</span><br><span class="line">#   Key is the name of the item and value is the name of FontAwsome icon. Key is case-senstive.</span><br><span class="line">#   When an globe mask icon presenting up means that the item has no mapping icon.</span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mappings.</span><br><span class="line">  # KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome</span><br><span class="line">  GitHub: github</span><br><span class="line">  Twitter: twitter</span><br><span class="line">  Weibo: weibo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source/images): /images/avatar.jpg</span><br><span class="line"># in site  directory(source/uploads): /uploads/avatar.jpg</span><br><span class="line">avatar: /images/my_head.jpeg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Table Of Contents in the Sidebar</span><br><span class="line">toc:</span><br><span class="line">  enable: true</span><br><span class="line"></span><br><span class="line">  # Automatically add list number to toc.</span><br><span class="line">  number: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Creative Commons 4.0 International License.</span><br><span class="line"># http://creativecommons.org/</span><br><span class="line"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span><br><span class="line">#creative_commons: by-nc-sa</span><br><span class="line">#creative_commons:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sidebar:</span><br><span class="line">  # Sidebar Position, available value: left | right</span><br><span class="line">  position: left</span><br><span class="line">  #position: right</span><br><span class="line"></span><br><span class="line">  # Sidebar Display, available value:</span><br><span class="line">  #  - post    expand on posts automatically. Default.</span><br><span class="line">  #  - always  expand for all pages automatically</span><br><span class="line">  #  - hide    expand only when click on the sidebar toggle icon.</span><br><span class="line">  #  - remove  Totally remove sidebar including sidebar toggler.</span><br><span class="line">  display: post</span><br><span class="line">  #display: always</span><br><span class="line">  #display: hide</span><br><span class="line">  #display: remove</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Blogrolls</span><br><span class="line">#links_title: Links</span><br><span class="line">#links_layout: block</span><br><span class="line">#links_layout: inline</span><br><span class="line">#links:</span><br><span class="line">  #Title: http://example.com/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Misc Theme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Custom Logo.</span><br><span class="line"># !!Only available for Default Scheme currently.</span><br><span class="line"># Options:</span><br><span class="line">#   enabled: [true/false] - Replace with specific image</span><br><span class="line">#   image: url-of-image   - Images&apos;s url</span><br><span class="line">custom_logo:</span><br><span class="line">  enabled: false</span><br><span class="line">  image:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Code Highlight theme</span><br><span class="line"># Available value:</span><br><span class="line">#    normal | night | night eighties | night blue | night bright</span><br><span class="line"># https://github.com/chriskempson/tomorrow-theme</span><br><span class="line">highlight_theme: night</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Automatically scroll page to section which is under &lt;!-- more --&gt; mark.</span><br><span class="line">scroll_to_more: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Automatically Excerpt. Not recommand.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Wechat Subscriber</span><br><span class="line">#wechat_subscriber:</span><br><span class="line">  #enabled: true</span><br><span class="line">  #qcode: /path/to/your/wechatqcode ex. /uploads/wechat-qcode.jpg</span><br><span class="line">  #description: ex. subscribe to my blog by scanning my public wechat account</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Third Party Services Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">  enable: false</span><br><span class="line">  cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Swiftype Search API Key  </span><br><span class="line">#swiftype_key:</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line"></span><br><span class="line"># Baidu Analytics ID</span><br><span class="line">baidu_analytics: 70ce034e45a712ab10da0f89af899b0c</span><br><span class="line"></span><br><span class="line"># Duoshuo ShortName</span><br><span class="line">duoshuo_shortname: czhzero</span><br><span class="line"></span><br><span class="line"># Disqus</span><br><span class="line">#disqus_shortname: czhzero</span><br><span class="line"></span><br><span class="line"># Baidu Share</span><br><span class="line"># Available value:</span><br><span class="line">#    button | slide</span><br><span class="line">#baidushare:</span><br><span class="line">##  type: button</span><br><span class="line"></span><br><span class="line"># Share</span><br><span class="line">#jiathis:</span><br><span class="line">#add_this_id:</span><br><span class="line"></span><br><span class="line"># Share</span><br><span class="line">duoshuo_share: true</span><br><span class="line">duoshuo_hotartical : true</span><br><span class="line"># Google Webmaster tools verification setting</span><br><span class="line"># See: https://www.google.com/webmasters/</span><br><span class="line">#google_site_verification:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Google Analytics</span><br><span class="line">#google_analytics:</span><br><span class="line"></span><br><span class="line"># CNZZ count</span><br><span class="line">#cnzz_siteid:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Make duoshuo show UA</span><br><span class="line"># user_id must NOT be null when admin_enable is true!</span><br><span class="line"># you can visit http://dev.duoshuo.com get duoshuo user id.</span><br><span class="line">duoshuo_info:</span><br><span class="line">  ua_enable: true</span><br><span class="line">  admin_enable: true</span><br><span class="line">  user_id: 6289947422453925000</span><br><span class="line">  admin_nickname: 一座小楼</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Facebook SDK Support.</span><br><span class="line"># https://github.com/iissnan/hexo-theme-next/pull/410</span><br><span class="line">facebook_sdk:</span><br><span class="line">  enable: false</span><br><span class="line">  app_id:       #&lt;app_id&gt;</span><br><span class="line">  fb_admin:     #&lt;user_id&gt;</span><br><span class="line">  like_button:  #true</span><br><span class="line">  webmaster:    #true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Show number of visitors to each article.</span><br><span class="line"># You can visit https://leancloud.cn get AppID and AppKey.</span><br><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: bWQ0bNnPvEx2cikhn5zECb2z-gzGzoHsz</span><br><span class="line">  app_key: MT29shr3Wj61Uz3y31too94a</span><br><span class="line"></span><br><span class="line"># Show PV/UV of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: false</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;</span><br><span class="line">  site_uv_footer:</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</span><br><span class="line">  site_pv_footer:</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: true</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt;</span><br><span class="line">  page_pv_footer:</span><br><span class="line"></span><br><span class="line"># Tencent analytics ID</span><br><span class="line"># tencent_analytics:</span><br><span class="line"></span><br><span class="line"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</span><br><span class="line">baidu_push: false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#! ---------------------------------------------------------------</span><br><span class="line">#! DO NOT EDIT THE FOLLOWING SETTINGS</span><br><span class="line">#! UNLESS YOU KNOW WHAT YOU ARE DOING</span><br><span class="line">#! ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Motion</span><br><span class="line">use_motion: true</span><br><span class="line"></span><br><span class="line"># Fancybox</span><br><span class="line">fancybox: true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Script Vendors.</span><br><span class="line"># Set a CDN address for the vendor you want to customize.</span><br><span class="line"># For example</span><br><span class="line">#    jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js</span><br><span class="line"># Be aware that you should use the same version as internal ones to avoid potential problems.</span><br><span class="line">vendors:</span><br><span class="line">  # Internal path prefix. Please do not edit it.</span><br><span class="line">  _internal: vendors</span><br><span class="line"></span><br><span class="line">  # Internal version: 2.1.3</span><br><span class="line">  jquery:</span><br><span class="line"></span><br><span class="line">  # Internal version: 2.1.5</span><br><span class="line">  # http://fancyapps.com/fancybox/</span><br><span class="line">  fancybox:</span><br><span class="line">  fancybox_css:</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.0.6</span><br><span class="line">  # https://github.com/ftlabs/fastclick</span><br><span class="line">  fastclick:</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.9.7</span><br><span class="line">  # https://github.com/tuupola/jquery_lazyload</span><br><span class="line">  lazyload:</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.2.1</span><br><span class="line">  # http://VelocityJS.org</span><br><span class="line">  velocity:</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.2.1</span><br><span class="line">  # http://VelocityJS.org</span><br><span class="line">  velocity_ui:</span><br><span class="line"></span><br><span class="line">  # Internal version: 0.7.9</span><br><span class="line">  # https://faisalman.github.io/ua-parser-js/</span><br><span class="line">  ua_parser:</span><br><span class="line"></span><br><span class="line">  # Internal version: 4.4.0</span><br><span class="line">  # http://fontawesome.io/</span><br><span class="line">  fontawesome:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Assets</span><br><span class="line">css: css</span><br><span class="line">js: js</span><br><span class="line">images: images</span><br><span class="line"></span><br><span class="line"># Theme version</span><br><span class="line">version: 5.0.1</span><br></pre></td></tr></table></figure>
<h3 id="5-集成第三方服务"><a href="#5-集成第三方服务" class="headerlink" title="5.集成第三方服务"></a>5.集成第三方服务</h3><h4 id="多说评论"><a href="#多说评论" class="headerlink" title="多说评论"></a>多说评论</h4><p>在每一条多说评论后显示评论者所使用的代理信息（如 操作系统、浏览器），效果如下：</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/001/6.png" alt="Alt text"></p>
<p>首先，新建多说站点,建立完成后，进入 [我的主页] , 网址最后的那串数字就是user_id。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/001/8.png" alt="Alt text"></p>
<p>要启用此功能，需要配置 duoshuo_info 这个字段。 编辑 主题配置文件，查找 duoshuo_info 字段， 设置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Make duoshuo show UA</span><br><span class="line"># user_id must NOT be null when admin_enable is true!</span><br><span class="line"># you can visit http://dev.duoshuo.com get duoshuo user id.</span><br><span class="line">duoshuo_info:</span><br><span class="line">  ua_enable: true</span><br><span class="line">  admin_enable: false</span><br><span class="line">  user_id:</span><br><span class="line">  admin_nickname:</span><br></pre></td></tr></table></figure>
<p>只要设置 ua_enable 为 true 即可显示 UA 信息。 admin_enable 是用于显示 「博主」 文字，表明评论者是博主，此字段需要同时配置 user_id 和 admin_nickname 字段。 </p>
<h4 id="网站访问统计"><a href="#网站访问统计" class="headerlink" title="网站访问统计"></a>网站访问统计</h4><p>登录百度统计，转到获取代码截面，找到百度统计脚本id，然后把themes\next_config.yml文件下的baidu_analytics字段改成你的id，如下所示：</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/001/7.png" alt="Alt text"></p>
<p>hm.js?后面一串数字就是百度统计的id。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//配置百度统计id</span><br><span class="line">baidu_analytics: 340874ba9357cbe81570aa4ac1185941</span><br></pre></td></tr></table></figure>
<h4 id="阅读量统计"><a href="#阅读量统计" class="headerlink" title="阅读量统计"></a>阅读量统计</h4><p>打开LeanCloud官网，进入注册页面注册。完成邮箱激活后，点击头像，进入控制台页面，如下：</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/001/9.png" alt="Alt text"></p>
<p>创建新应用</p>
<p>创建一个新应用(类型为JavaScript SDK)，点击应用进入；</p>
<p>创建名称为Counter的Class。这里的Class名字必须为Counter。</p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/001/10.png" alt="Alt text"></p>
<p><img src="http://o7y1sf21i.bkt.clouddn.com/blog/001/11.png" alt="Alt text"></p>
<p>打开NexT主题的根目录下的 _config.yml 文件，在任意位置添加以下内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: #&lt;LeanCloud AppID&gt;</span><br><span class="line">  app_key: #&lt;LeanCloud AppKEY&gt;</span><br></pre></td></tr></table></figure>
<p>修改 zh-Hans.yml 文件</p>
<p>在NexT目录的 languages 路径下的 zh-Hans.yml 文件，在 post: 结点下添加 visitors: 阅读次数 ，像这个样子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">post:</span><br><span class="line">  posted: 发表于</span><br><span class="line">  visitors: 阅读次数</span><br><span class="line">  updated: 更新于</span><br><span class="line">  in: 分类于</span><br><span class="line">  read_more: 阅读全文</span><br><span class="line">  untitled: 未命名</span><br><span class="line">  toc_empty: 此文章未包含目录</span><br></pre></td></tr></table></figure>
<p>如果你使用的是其它NexT的语言，请相应的添加该字段即可。</p>
<p>网上有些文章说，还需要配置一下主题底下的lean-analytics.swig 和 post.swig文件。 但是我记得我下载主题完成后，这两个文件已经是存在的。<br>如果你在你的next主题下没有找到lean-analytics.swig ,请参照<a href="http://www.tuicool.com/articles/YB3EJnz" target="_blank" rel="external">这里</a></p>
<h4 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h4><p>next主题集成了swiftype搜索，你需要到swiftype配置一个搜索引擎， 而后编辑 站点配置文件， 新增 swiftype_key 字段，值为你的 swiftype 搜索引擎的 key。 详细的配置请参考：swfitype教程。</p>
<h3 id="6-Hexo部署与发布"><a href="#6-Hexo部署与发布" class="headerlink" title="6.Hexo部署与发布"></a>6.Hexo部署与发布</h3><h4 id="自动部署到github"><a href="#自动部署到github" class="headerlink" title="自动部署到github"></a>自动部署到github</h4><p>部署到Github前，需要修改站点配置文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">	type: git</span><br><span class="line">	repository: git@github.com:EZLippi/EZLippi.github.io.git</span><br><span class="line">	branch: master</span><br></pre></td></tr></table></figure>
<p>若没有配置ssh-key, 请先配置一下ssh-key，配置方法看<a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="external">这里</a>。</p>
<p>然后只需输入两个命令，即可自动部署到github上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<h4 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h4><p>执行new命令，生成指定名称的文章至hexo\source_posts\postName.md。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &quot;postName&quot; #新建文章</span><br></pre></td></tr></table></figure>
<p>其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\scaffolds\post.md</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: &#123; &#123; title &#125; &#125;</span><br><span class="line">date: &#123; &#123; date &#125; &#125;</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: &#123; &#123; title &#125; &#125;</span><br><span class="line">date: &#123; &#123; date &#125; &#125;</span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>更多命令用法看<a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">这里</a></p>
<h4 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h4><p>因为github网站空间大小有限，而且访问速度并不快，所以博客的图片我都是托管在第三方的七牛云服务器上。</p>
<p>添加fancybox效果，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: </span><br><span class="line">photos:</span><br><span class="line">- http://xxxx.jpg</span><br><span class="line">- http://xxxx.jpg</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<hr>
<p>参考文献:</p>
<p><a href="http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html" target="_blank" rel="external">Jekyll迁移到Hexo搭建个人博客</a></p>
<p><a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Hexo Docs</a></p>
<p><a href="http://www.tuicool.com/articles/YB3EJnz" target="_blank" rel="external">为NexT主题添加文章阅读量统计功能</a></p>
<p><a href="http://theme-next.iissnan.com" target="_blank" rel="external">Next 主题</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iterm2 常用快捷键总结]]></title>
      <url>http://czhzero.com/2016/06/15/item2-basic-command/</url>
      <content type="html"><![CDATA[<h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">清除当前行：ctrl + u</span><br><span class="line">到行首：ctrl + a</span><br><span class="line">到行尾：ctrl + e</span><br><span class="line">删除到文本末尾：ctrl + k</span><br><span class="line"></span><br><span class="line">删除当前光标的字符：ctrl + d</span><br><span class="line">删除光标之前的字符：ctrl + h</span><br><span class="line">删除光标之前的单词：ctrl + w</span><br><span class="line">交换光标处文本：ctrl + t</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">垂直分屏：command + d</span><br><span class="line">水平分屏：command + shift + d</span><br><span class="line">切换屏幕：command + option + 方向键 </span><br><span class="line">        command + [ 或 command + ]</span><br><span class="line">置空屏幕: clear 或者 ctrl + l</span><br><span class="line">清空屏幕: command + k</span><br><span class="line">最大化窗口: command + Alt + =</span><br><span class="line">全屏幕窗口: command + enter</span><br><span class="line">字体调大:  command + +</span><br><span class="line">字体调小:  command + -</span><br></pre></td></tr></table></figure>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看历史命令：command + ;</span><br><span class="line">上一条命令：ctrl + p</span><br><span class="line">搜索命令历史：ctrl + r</span><br></pre></td></tr></table></figure>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开搜索框：command + f</span><br><span class="line">切换搜索结果：command + g</span><br></pre></td></tr></table></figure>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新建标签：command + t</span><br><span class="line">关闭标签：command + w</span><br><span class="line">切换标签：command + 数字 或 command + 左右方向键</span><br><span class="line">切换全屏：command + enter</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux命令-基本命令入门]]></title>
      <url>http://czhzero.com/2016/05/31/linux-basic-commond/</url>
      <content type="html"><![CDATA[<p>Linux系统命令非常多，不会Linux的命令，在Linux系统下可以说是寸步难行。每个人使用Linux系统的目的不同，其使用的命令差异也十分巨大。本人参考网上一些博客，根据自己的需要做这么一篇文章进行总结，以便自己日后忘记了，进行查阅。</p>
<a id="more"></a>
<h3 id="1-cd命令"><a href="#1-cd命令" class="headerlink" title="1.cd命令"></a>1.cd命令</h3><p>这个一个最基本的linux目录跳转命令，用于切换当前目录。一般可与<strong>pwd命令</strong> 结合使用。pwd命令用于显示当前目录的实际路径。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /root/Docements  # 切换到目录/root/Docements  </span><br><span class="line">cd ./path           # 切换到当前目录下的path目录中，“.”表示当前目录    </span><br><span class="line">cd ../path          # 切换到上层目录中的path目录中，“..”表示上一层目录  </span><br><span class="line">cd /					# 切换到系统根目录</span><br><span class="line">cd ~                # 切换到当前用户的根目录</span><br></pre></td></tr></table></figure>
<h3 id="2-ls命令"><a href="#2-ls命令" class="headerlink" title="2.ls命令"></a>2.ls命令</h3><p>查看文件与目录属性的命令，ls后不加路径，表示查看路径，添加路径则表示查看指定目录与路径。</p>
<p>常用参数列表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-l ：列出长数据串，包含文件的属性与权限数据等  </span><br><span class="line">-a ：列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用）  </span><br><span class="line">-d ：仅列出目录本身，而不是列出目录的文件数据  </span><br><span class="line">-h ：将文件容量以较易读的方式（GB，kB等）列出来  </span><br><span class="line">-R ：连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来</span><br></pre></td></tr></table></figure>
<p>命令参数也可以组合使用，例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -lR  #递归显示所有文件的长数据信息</span><br><span class="line">ls /root/download</span><br></pre></td></tr></table></figure>
<h3 id="3-cp命令"><a href="#3-cp命令" class="headerlink" title="3.cp命令"></a>3.cp命令</h3><p>复制命令，可以单个文件或者目录，复制到指定位置。</p>
<p>常用参数列表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-a ：将文件的特性一起复制  </span><br><span class="line">-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份  </span><br><span class="line">-i ：若目标文件已经存在时，在覆盖时会先询问操作的进行  </span><br><span class="line">-r ：递归持续复制，用于目录的复制行为  </span><br><span class="line">-u ：目标文件与源文件有差异时才会复制</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -a file1 file2 #连同文件的所有特性把文件file1复制成文件file2  </span><br><span class="line">cp file1 file2 file3 dir #把文件file1、file2、file3复制到目录dir中</span><br></pre></td></tr></table></figure>
<h3 id="4-mv命令"><a href="#4-mv命令" class="headerlink" title="4.mv命令"></a>4.mv命令</h3><p>移动命令，可以用于移动文件、目录或者重命名。</p>
<p>常用参数列表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖  </span><br><span class="line">-i ：若目标文件已经存在，就会询问是否覆盖  </span><br><span class="line">-u ：若目标文件已经存在，且比目标文件新，才会更新</span><br></pre></td></tr></table></figure>
<p>注：该命令可以把一个文件或多个文件一次移动一个文件夹中，但是最后一个目标文件一定要是“目录”。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv file1 file2 dir # 把文件file1、file2移动到目录dir中  </span><br><span class="line">mv file1 file2 # 把文件file1重命名为file2  </span><br><span class="line">mv dir1 dir2   # 若dir2存在，则将dir1移动到dir2中</span><br><span class="line">               # 若dir2不存在， 则将dir1改名为dir2</span><br></pre></td></tr></table></figure>
<h3 id="5-rm命令"><a href="#5-rm命令" class="headerlink" title="5.rm命令"></a>5.rm命令</h3><p>删除命令，可以用来删除文件或者目录。</p>
<p>常用参数列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f ：就是force的意思，忽略不存在的文件，不会出现警告消息  </span><br><span class="line">-i ：互动模式，在删除前会询问用户是否操作  </span><br><span class="line">-r ：递归删除，最常用于目录删除，它是一个非常危险的参数</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">rm -rf dir # 强制删除目录dir下的所有文件  </span><br><span class="line">rm -rf *   # 强制删除当前目录下的所有文件，不包括隐藏文件</span><br><span class="line">rm -rf .*  # 强制删除所有文件，包括隐藏文件</span><br></pre></td></tr></table></figure>
<h3 id="6-ps命令"><a href="#6-ps命令" class="headerlink" title="6.ps命令"></a>6.ps命令</h3><p>查看进程命令。将系统某个时间点的进程运行情况选取下来。</p>
<p>常用参数列表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-A ：所有的进程均显示出来  </span><br><span class="line">-a ：不与terminal有关的所有进程  </span><br><span class="line">-u ：有效用户的相关进程  </span><br><span class="line">-x ：一般与a参数一起使用，可列出较完整的信息  </span><br><span class="line">-l ：较长，较详细地将PID的信息列出</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps aux # 查看系统所有的进程数据  </span><br><span class="line">ps ax # 查看不与terminal有关的所有进程  </span><br><span class="line">ps -lA # 查看系统所有的进程数据  </span><br><span class="line">ps axjf # 查看连同一部分进程树状态</span><br></pre></td></tr></table></figure>
<h3 id="7-kill命令"><a href="#7-kill命令" class="headerlink" title="7.kill命令"></a>7.kill命令</h3><p>该命令用于向某个工作（%jobnumber）或者是某个PID（数字）传送一个信号，它通常与ps和jobs命令一起使用。</p>
<p>常用参数列表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1：SIGHUP，启动被终止的进程  </span><br><span class="line">2：SIGINT，相当于输入ctrl+c，中断一个程序的进行  </span><br><span class="line">9：SIGKILL，强制中断一个进程的进行  </span><br><span class="line">15：SIGTERM，以正常的结束进程方式来终止进程  </span><br><span class="line">17：SIGSTOP，相当于输入ctrl+z，暂停一个进程的进行</span><br></pre></td></tr></table></figure>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 以正常的结束进程方式来终于第一个后台工作，可用jobs命令查看后台中的第一个工作进程  </span><br><span class="line">kill -SIGTERM %1   </span><br><span class="line"></span><br><span class="line">#强制结束进程号为16778的进程</span><br><span class="line">kill -9 16778</span><br></pre></td></tr></table></figure>
<h3 id="8-tar命令"><a href="#8-tar命令" class="headerlink" title="8.tar命令"></a>8.tar命令</h3><p>该命令用于对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压。</p>
<p>常用参数示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-c ：新建打包文件  </span><br><span class="line">-t ：查看打包文件的内容含有哪些文件名  </span><br><span class="line">-x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中  </span><br><span class="line">-j ：通过bzip2的支持进行压缩/解压缩  </span><br><span class="line">-z ：通过gzip的支持进行压缩/解压缩  </span><br><span class="line">-v ：在压缩/解压缩过程中，将正在处理的文件名显示出来  </span><br><span class="line">-f filename ：filename为要处理的文件  </span><br><span class="line">-C dir ：指定压缩/解压缩的目录dir</span><br></pre></td></tr></table></figure>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">压缩：tar -jcv -f filename.tar.bz2 要被处理的文件或目录名称  </span><br><span class="line">查询：tar -jtv -f filename.tar.bz2  </span><br><span class="line">解压：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录</span><br></pre></td></tr></table></figure>
<h3 id="9-chmod命令"><a href="#9-chmod命令" class="headerlink" title="9.chmod命令"></a>9.chmod命令</h3><p>该命令用于改变文件的权限，可以使用u（user）、g（group）、o（other）、a（all）和+（加入）、-（删除）、=（设置）跟rwx搭配来对文件的权限进行更改。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 0755 file # 把file的文件权限改变为-rxwr-xr-x  </span><br><span class="line">chmod g+w file # 向file的文件权限中加入用户组</span><br></pre></td></tr></table></figure>
<h3 id="10-cat命令"><a href="#10-cat命令" class="headerlink" title="10.cat命令"></a>10.cat命令</h3><p>该命令用于查看文本文件的内容，后接要查看的文件名，通常可用管道与more和less一起使用，从而可以一页页地查看数据。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat text | less # 查看text文件中的内容  </span><br><span class="line"># 注：这条命令也可以使用less text来代替</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo如何在索引页显示摘要和阅读全文按钮]]></title>
      <url>http://czhzero.com/2016/05/28/hexo-summary-help/</url>
      <content type="html"><![CDATA[<p>使用Hexo时，在使用markdown语法编辑文件时可以在index.html页面上显示摘要和阅读全文按钮</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>
<p>在合适的位置插入下列内容作为分隔符</p>
<p>标签以前的内容将会在索引页上显示为摘要。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LocalBroadcastManager源码解析]]></title>
      <url>http://czhzero.com/2016/05/28/LocalBroadcastManager-Source-analysis/</url>
      <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>LocalBroadcastManager是Android v4兼容包提供的应用内广播发送与接收的工具类。BroadcastReceiver的通信是基于Binder机制，而LocalBroadcastManager的核心是基于Handler机制。</p>
<p>相比BroadcastReceiver的广播，LocalBroadcastManager有以下几点优点。</p>
<ul>
<li>广播数据只在本应用内传播，不用担心数据泄露，</li>
<li>广播数据不用担心别的应用伪造广播，更加安全。</li>
<li>因为只在应用内广播，所以更加的高效。</li>
</ul>
<a id="more"></a>
<h2 id="2-基本使用方法"><a href="#2-基本使用方法" class="headerlink" title="2.基本使用方法"></a>2.基本使用方法</h2><h3 id="2-1-自定义-BroadcastReceiver-子类"><a href="#2-1-自定义-BroadcastReceiver-子类" class="headerlink" title="2.1 自定义 BroadcastReceiver 子类"></a>2.1 自定义 BroadcastReceiver 子类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//处理广播信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-注册广播"><a href="#2-2-注册广播" class="headerlink" title="2.2 注册广播"></a>2.2 注册广播</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalBroadcastReceiver localReceiver = <span class="keyword">new</span> LocalBroadcastReceiver();  </span><br><span class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter(ACTION_LOCAL_SEND);</span><br><span class="line">LocalBroadcastManager.getInstance(context).registerReceiver(localReceiver, filter);</span><br></pre></td></tr></table></figure>
<h3 id="2-3-发送广播"><a href="#2-3-发送广播" class="headerlink" title="2.3 发送广播"></a>2.3 发送广播</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalBroadcastManager.getInstance(context).sendBroadcast(<span class="keyword">new</span> Intent(ACTION_LOCAL_SEND));</span><br></pre></td></tr></table></figure>
<h3 id="2-4-取消广播注册"><a href="#2-4-取消广播注册" class="headerlink" title="2.4 取消广播注册"></a>2.4 取消广播注册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalBroadcastManager.getInstance(context).unregisterReceiver(localReceiver);</span><br></pre></td></tr></table></figure>
<h2 id="3-源码解析"><a href="#3-源码解析" class="headerlink" title="3.源码解析"></a>3.源码解析</h2><h3 id="3-1-LocalBroadcastManager原理概要"><a href="#3-1-LocalBroadcastManager原理概要" class="headerlink" title="3.1 LocalBroadcastManager原理概要"></a>3.1 LocalBroadcastManager原理概要</h3><p>LocalBroadcastManager使用单例模式对象，初始化时会在内部初始化一个Handler对象用来接受广播。注册广播时，会将自定义的BroadcastReceiver对象和IntentFilter对象保存到HashMap中。发送广播时，则根据IntentFilter的Action值从已保存的HashMap找到对应接受者，并发送Handler消息去执行receiver的onReceive方法。</p>
<p>LocalBroadcastManager核心代码为以下四个函数。</p>
<ul>
<li>registerReceiver(BroadcastReceiver receiver, IntentFilter filter)    //注册广播函数</li>
<li>unregisterReceiver(BroadcastReceiver receiver)    //取消注册函数</li>
<li>sendBroadcast(Intent intent)            //发送广播</li>
<li>executePendingBroadcasts()           //处理接受到的广播</li>
</ul>
<h3 id="3-2-LocalBroadcastManager基本数据结构"><a href="#3-2-LocalBroadcastManager基本数据结构" class="headerlink" title="3.2 LocalBroadcastManager基本数据结构"></a>3.2 LocalBroadcastManager基本数据结构</h3><p>LocalBroadcastManager需要保存三样东西，一个是 <strong>mReceivers</strong>, 用来保存已注册的自定义的receiver和intentFilter。一个是 <strong>mActions</strong> 键值对，保存action和ReceiverRecord列表的键值对。一个是 <strong>mPendingBroadcasts</strong> , 用来保存待通知的receiver对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//注册广播Record类</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiverRecord</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> IntentFilter filter;</span><br><span class="line">        <span class="keyword">final</span> BroadcastReceiver receiver;</span><br><span class="line">        <span class="keyword">boolean</span> broadcasting;</span><br><span class="line">        </span><br><span class="line">        ReceiverRecord(IntentFilter _filter, BroadcastReceiver _receiver) &#123;</span><br><span class="line">            filter = _filter;</span><br><span class="line">            receiver = _receiver;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;BroadcastReceiver, ArrayList&lt;IntentFilter&gt;&gt; mReceivers</span><br><span class="line">        = <span class="keyword">new</span> HashMap&lt;BroadcastReceiver, ArrayList&lt;IntentFilter&gt;&gt;();</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, ArrayList&lt;ReceiverRecord&gt;&gt; mActions</span><br><span class="line">        = <span class="keyword">new</span> HashMap&lt;String, ArrayList&lt;ReceiverRecord&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;BroadcastRecord&gt; mPendingBroadcasts</span><br><span class="line">        = <span class="keyword">new</span> ArrayList&lt;BroadcastRecord&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//待广播的Record类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadcastRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Intent intent;</span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ReceiverRecord&gt; receivers;</span><br><span class="line"></span><br><span class="line">    BroadcastRecord(Intent _intent, ArrayList&lt;ReceiverRecord&gt; _receivers) &#123;</span><br><span class="line">        intent = _intent;</span><br><span class="line">        receivers = _receivers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-注册广播"><a href="#3-3-注册广播" class="headerlink" title="3.3  注册广播"></a>3.3  注册广播</h3><p>将需要注册的receiver对象和该receiver需要监听的filter保存到 <strong>mReceivers</strong> 和 <strong>mPendingBroadcasts</strong> 中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Register a receive for any local broadcasts that match the given IntentFilter.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> receiver The BroadcastReceiver to handle the broadcast.</span><br><span class="line"> * <span class="doctag">@param</span> filter Selects the Intent broadcasts to be received.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@see</span> #unregisterReceiver</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerReceiver</span><span class="params">(BroadcastReceiver receiver, IntentFilter filter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mReceivers) &#123;</span><br><span class="line">        ReceiverRecord entry = <span class="keyword">new</span> ReceiverRecord(filter, receiver);</span><br><span class="line">        ArrayList&lt;IntentFilter&gt; filters = mReceivers.get(receiver);</span><br><span class="line">        <span class="keyword">if</span> (filters == <span class="keyword">null</span>) &#123;</span><br><span class="line">            filters = <span class="keyword">new</span> ArrayList&lt;IntentFilter&gt;(<span class="number">1</span>);</span><br><span class="line">            mReceivers.put(receiver, filters);    <span class="comment">//保存receiver和filter到List</span></span><br><span class="line">        &#125;</span><br><span class="line">        filters.add(filter);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;filter.countActions(); i++) &#123;</span><br><span class="line">            String action = filter.getAction(i);</span><br><span class="line">            ArrayList&lt;ReceiverRecord&gt; entries = mActions.get(action);</span><br><span class="line">            <span class="keyword">if</span> (entries == <span class="keyword">null</span>) &#123;</span><br><span class="line">                entries = <span class="keyword">new</span> ArrayList&lt;ReceiverRecord&gt;(<span class="number">1</span>);</span><br><span class="line">                mActions.put(action, entries);   <span class="comment">//保存到action和ReceiverRecord到HashMap</span></span><br><span class="line">            &#125;</span><br><span class="line">            entries.add(entry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-取消广播注册"><a href="#3-4-取消广播注册" class="headerlink" title="3.4  取消广播注册"></a>3.4  取消广播注册</h3><p>根据receiver对象移除 <strong>mReceivers</strong> 和 <strong>mPendingBroadcasts</strong> 中对应的对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Unregister a previously registered BroadcastReceiver.  All</span><br><span class="line"> * filters that have been registered for this BroadcastReceiver will be</span><br><span class="line"> * removed.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> receiver The BroadcastReceiver to unregister.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@see</span> #registerReceiver</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterReceiver</span><span class="params">(BroadcastReceiver receiver)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mReceivers) &#123;</span><br><span class="line">        <span class="comment">//从mReceivers中移除</span></span><br><span class="line">        ArrayList&lt;IntentFilter&gt; filters = mReceivers.remove(receiver);</span><br><span class="line">        <span class="keyword">if</span> (filters == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;filters.size(); i++) &#123;</span><br><span class="line">            IntentFilter filter = filters.get(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;filter.countActions(); j++) &#123;</span><br><span class="line">                String action = filter.getAction(j);</span><br><span class="line">                ArrayList&lt;ReceiverRecord&gt; receivers = mActions.get(action);</span><br><span class="line">                <span class="keyword">if</span> (receivers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;receivers.size(); k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (receivers.get(k).receiver == receiver) &#123;</span><br><span class="line">                            receivers.remove(k);</span><br><span class="line">                            k--;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (receivers.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        mActions.remove(action);  <span class="comment">//从mActions中移除</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-通过Handler发送广播"><a href="#3-5-通过Handler发送广播" class="headerlink" title="3.5  通过Handler发送广播"></a>3.5  通过Handler发送广播</h3><p>发送广播时，先根据intent中的action到<strong>mActions</strong>中找到对应的记录，然后再完整匹配filter里面的各个字段，若匹配成功，则将对应的receiver添加的<strong>mPendingBroadcasts</strong>列表中，等待handler对象的handleMessage()方法处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Broadcast the given intent to all interested BroadcastReceivers.  This</span><br><span class="line"> * call is asynchronous; it returns immediately, and you will continue</span><br><span class="line"> * executing while the receivers are run.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> intent The Intent to broadcast; all receivers matching this</span><br><span class="line"> *     Intent will receive the broadcast.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@see</span> #registerReceiver</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendBroadcast</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mReceivers) &#123;</span><br><span class="line">        <span class="keyword">final</span> String action = intent.getAction();</span><br><span class="line">        <span class="keyword">final</span> String type = intent.resolveTypeIfNeeded(</span><br><span class="line">                mAppContext.getContentResolver());</span><br><span class="line">        <span class="keyword">final</span> Uri data = intent.getData();</span><br><span class="line">        <span class="keyword">final</span> String scheme = intent.getScheme();</span><br><span class="line">        <span class="keyword">final</span> Set&lt;String&gt; categories = intent.getCategories();</span><br><span class="line"></span><br><span class="line">		  ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据intent的action寻找ReceverRecord</span></span><br><span class="line">        ArrayList&lt;ReceiverRecord&gt; entries = mActions.get(intent.getAction());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (entries != <span class="keyword">null</span>) &#123;</span><br><span class="line"> </span><br><span class="line">            ArrayList&lt;ReceiverRecord&gt; receivers = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;entries.size(); i++) &#123;</span><br><span class="line">            </span><br><span class="line">                ReceiverRecord receiver = entries.get(i);</span><br><span class="line">					<span class="comment">//相同的receiver,只添加一次 </span></span><br><span class="line">                <span class="keyword">if</span> (receiver.broadcasting) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> match = receiver.filter.match(action, type, scheme, data,</span><br><span class="line">                        categories, <span class="string">"LocalBroadcastManager"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (match &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (receivers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        receivers = <span class="keyword">new</span> ArrayList&lt;ReceiverRecord&gt;();</span><br><span class="line">                    &#125;</span><br><span class="line">                    receivers.add(receiver);</span><br><span class="line">                    <span class="comment">//标记为已添加，待广播状态 </span></span><br><span class="line">                    receiver.broadcasting = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> 						...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (receivers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            		<span class="comment">//receivers添加完成后，将broadcasting状态回归</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;receivers.size(); i++) &#123;</span><br><span class="line">                    receivers.get(i).broadcasting = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//添加到待广播列表</span></span><br><span class="line">                mPendingBroadcasts.add(<span class="keyword">new</span> BroadcastRecord(intent, receivers));</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//若无正在处理的消息，则handler发送广播消息</span></span><br><span class="line">                <span class="keyword">if</span> (!mHandler.hasMessages(MSG_EXEC_PENDING_BROADCASTS)) &#123;</span><br><span class="line">                    mHandler.sendEmptyMessage(MSG_EXEC_PENDING_BROADCASTS);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>
<h3 id="3-6-Handler接受和消费广播"><a href="#3-6-Handler接受和消费广播" class="headerlink" title="3.6  Handler接受和消费广播"></a>3.6  Handler接受和消费广播</h3><p>在handler对象的handleMessage()方法中遍历 <strong>mPendingBroadcasts</strong> 列表, 依次循环调用其中的onReceive()方法，并将intent中的数据传入，从而消费广播信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LocalBroadcastManager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    mAppContext = context;</span><br><span class="line">    mHandler = <span class="keyword">new</span> Handler(context.getMainLooper()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> MSG_EXEC_PENDING_BROADCASTS:</span><br><span class="line">                    executePendingBroadcasts();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executePendingBroadcasts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        BroadcastRecord[] brs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (mReceivers) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> N = mPendingBroadcasts.size();</span><br><span class="line">            <span class="keyword">if</span> (N &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//拷贝数据到brs数组</span></span><br><span class="line">            brs = <span class="keyword">new</span> BroadcastRecord[N];</span><br><span class="line">            mPendingBroadcasts.toArray(brs);</span><br><span class="line">            mPendingBroadcasts.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;brs.length; i++) &#123;</span><br><span class="line">            BroadcastRecord br = brs[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;br.receivers.size(); j++) &#123;</span><br><span class="line">                <span class="comment">//循环数组里的内容，调用其onReceive方法，消费广播内容</span></span><br><span class="line">                br.receivers.get(j).receiver.onReceive(mAppContext, br.intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>LocalBroadcastManager在应用内使用起来比较简单高效，但是其也是有一些缺点的。比如LocalBroadcastManager并不支持静态注册广播，也不支持有序广播的一些功能。不过如果仅仅是普通广播通信也是够用了。</p>
]]></content>
    </entry>
    
  
  
</search>
