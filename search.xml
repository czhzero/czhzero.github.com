<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Linux命令-基本命令入门]]></title>
      <url>http://czhzero.com/2016/05/31/linux-basic-commond/</url>
      <content type="html"><![CDATA[<p>Linux系统命令非常多，不会Linux的命令，在Linux系统下可以说是寸步难行。每个人使用Linux系统的目的不同，其使用的命令差异也十分巨大。本人参考网上一些博客，根据自己的需要做这么一篇文章进行总结，以便自己日后忘记了，进行查阅。</p>
<a id="more"></a>
<h3 id="1-cd命令"><a href="#1-cd命令" class="headerlink" title="1.cd命令"></a>1.cd命令</h3><p>这个一个最基本的linux目录跳转命令，用于切换当前目录。一般可与<strong>pwd命令</strong> 结合使用。pwd命令用于显示当前目录的实际路径。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /root/Docements  # 切换到目录/root/Docements  </span><br><span class="line">cd ./path           # 切换到当前目录下的path目录中，“.”表示当前目录    </span><br><span class="line">cd ../path          # 切换到上层目录中的path目录中，“..”表示上一层目录  </span><br><span class="line">cd /					# 切换到系统根目录</span><br><span class="line">cd ~                # 切换到当前用户的根目录</span><br></pre></td></tr></table></figure>
<h3 id="2-ls命令"><a href="#2-ls命令" class="headerlink" title="2.ls命令"></a>2.ls命令</h3><p>查看文件与目录属性的命令，ls后不加路径，表示查看路径，添加路径则表示查看指定目录与路径。</p>
<p>常用参数列表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-l ：列出长数据串，包含文件的属性与权限数据等  </span><br><span class="line">-a ：列出全部的文件，连同隐藏文件（开头为.的文件）一起列出来（常用）  </span><br><span class="line">-d ：仅列出目录本身，而不是列出目录的文件数据  </span><br><span class="line">-h ：将文件容量以较易读的方式（GB，kB等）列出来  </span><br><span class="line">-R ：连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来</span><br></pre></td></tr></table></figure>
<p>命令参数也可以组合使用，例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -lR  #递归显示所有文件的长数据信息</span><br><span class="line">ls /root/download</span><br></pre></td></tr></table></figure>
<h3 id="3-cp命令"><a href="#3-cp命令" class="headerlink" title="3.cp命令"></a>3.cp命令</h3><p>复制命令，可以单个文件或者目录，复制到指定位置。</p>
<p>常用参数列表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-a ：将文件的特性一起复制  </span><br><span class="line">-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份  </span><br><span class="line">-i ：若目标文件已经存在时，在覆盖时会先询问操作的进行  </span><br><span class="line">-r ：递归持续复制，用于目录的复制行为  </span><br><span class="line">-u ：目标文件与源文件有差异时才会复制</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -a file1 file2 #连同文件的所有特性把文件file1复制成文件file2  </span><br><span class="line">cp file1 file2 file3 dir #把文件file1、file2、file3复制到目录dir中</span><br></pre></td></tr></table></figure>
<h3 id="4-mv命令"><a href="#4-mv命令" class="headerlink" title="4.mv命令"></a>4.mv命令</h3><p>移动命令，可以用于移动文件、目录或者重命名。</p>
<p>常用参数列表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖  </span><br><span class="line">-i ：若目标文件已经存在，就会询问是否覆盖  </span><br><span class="line">-u ：若目标文件已经存在，且比目标文件新，才会更新</span><br></pre></td></tr></table></figure>
<p>注：该命令可以把一个文件或多个文件一次移动一个文件夹中，但是最后一个目标文件一定要是“目录”。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv file1 file2 dir # 把文件file1、file2移动到目录dir中  </span><br><span class="line">mv file1 file2 # 把文件file1重命名为file2  </span><br><span class="line">mv dir1 dir2   # 若dir2存在，则将dir1移动到dir2中</span><br><span class="line">               # 若dir2不存在， 则将dir1改名为dir2</span><br></pre></td></tr></table></figure>
<h3 id="5-rm命令"><a href="#5-rm命令" class="headerlink" title="5.rm命令"></a>5.rm命令</h3><p>删除命令，可以用来删除文件或者目录。</p>
<p>常用参数列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f ：就是force的意思，忽略不存在的文件，不会出现警告消息  </span><br><span class="line">-i ：互动模式，在删除前会询问用户是否操作  </span><br><span class="line">-r ：递归删除，最常用于目录删除，它是一个非常危险的参数</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">rm -rf dir # 强制删除目录dir下的所有文件  </span><br><span class="line">rm -rf *   # 强制删除当前目录下的所有文件，不包括隐藏文件</span><br><span class="line">rm -rf .*  # 强制删除所有文件，包括隐藏文件</span><br></pre></td></tr></table></figure>
<h3 id="6-ps命令"><a href="#6-ps命令" class="headerlink" title="6.ps命令"></a>6.ps命令</h3><p>查看进程命令。将系统某个时间点的进程运行情况选取下来。</p>
<p>常用参数列表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-A ：所有的进程均显示出来  </span><br><span class="line">-a ：不与terminal有关的所有进程  </span><br><span class="line">-u ：有效用户的相关进程  </span><br><span class="line">-x ：一般与a参数一起使用，可列出较完整的信息  </span><br><span class="line">-l ：较长，较详细地将PID的信息列出</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps aux # 查看系统所有的进程数据  </span><br><span class="line">ps ax # 查看不与terminal有关的所有进程  </span><br><span class="line">ps -lA # 查看系统所有的进程数据  </span><br><span class="line">ps axjf # 查看连同一部分进程树状态</span><br></pre></td></tr></table></figure>
<h3 id="7-kill命令"><a href="#7-kill命令" class="headerlink" title="7.kill命令"></a>7.kill命令</h3><p>该命令用于向某个工作（%jobnumber）或者是某个PID（数字）传送一个信号，它通常与ps和jobs命令一起使用。</p>
<p>常用参数列表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1：SIGHUP，启动被终止的进程  </span><br><span class="line">2：SIGINT，相当于输入ctrl+c，中断一个程序的进行  </span><br><span class="line">9：SIGKILL，强制中断一个进程的进行  </span><br><span class="line">15：SIGTERM，以正常的结束进程方式来终止进程  </span><br><span class="line">17：SIGSTOP，相当于输入ctrl+z，暂停一个进程的进行</span><br></pre></td></tr></table></figure>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 以正常的结束进程方式来终于第一个后台工作，可用jobs命令查看后台中的第一个工作进程  </span><br><span class="line">kill -SIGTERM %1   </span><br><span class="line"></span><br><span class="line">#强制结束进程号为16778的进程</span><br><span class="line">kill -9 16778</span><br></pre></td></tr></table></figure>
<h3 id="8-tar命令"><a href="#8-tar命令" class="headerlink" title="8.tar命令"></a>8.tar命令</h3><p>该命令用于对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压。</p>
<p>常用参数示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-c ：新建打包文件  </span><br><span class="line">-t ：查看打包文件的内容含有哪些文件名  </span><br><span class="line">-x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中  </span><br><span class="line">-j ：通过bzip2的支持进行压缩/解压缩  </span><br><span class="line">-z ：通过gzip的支持进行压缩/解压缩  </span><br><span class="line">-v ：在压缩/解压缩过程中，将正在处理的文件名显示出来  </span><br><span class="line">-f filename ：filename为要处理的文件  </span><br><span class="line">-C dir ：指定压缩/解压缩的目录dir</span><br></pre></td></tr></table></figure>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">压缩：tar -jcv -f filename.tar.bz2 要被处理的文件或目录名称  </span><br><span class="line">查询：tar -jtv -f filename.tar.bz2  </span><br><span class="line">解压：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录</span><br></pre></td></tr></table></figure>
<h3 id="9-chmod命令"><a href="#9-chmod命令" class="headerlink" title="9.chmod命令"></a>9.chmod命令</h3><p>该命令用于改变文件的权限，可以使用u（user）、g（group）、o（other）、a（all）和+（加入）、-（删除）、=（设置）跟rwx搭配来对文件的权限进行更改。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 0755 file # 把file的文件权限改变为-rxwr-xr-x  </span><br><span class="line">chmod g+w file # 向file的文件权限中加入用户组</span><br></pre></td></tr></table></figure>
<h3 id="10-cat命令"><a href="#10-cat命令" class="headerlink" title="10.cat命令"></a>10.cat命令</h3><p>该命令用于查看文本文件的内容，后接要查看的文件名，通常可用管道与more和less一起使用，从而可以一页页地查看数据。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat text | less # 查看text文件中的内容  </span><br><span class="line"># 注：这条命令也可以使用less text来代替</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo如何在索引页显示摘要和阅读全文按钮]]></title>
      <url>http://czhzero.com/2016/05/28/hexo-summary-help/</url>
      <content type="html"><![CDATA[<p>使用Hexo时，在使用markdown语法编辑文件时可以在index.html页面上显示摘要和阅读全文按钮</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>
<p>在合适的位置插入下列内容作为分隔符</p>
<p>标签以前的内容将会在索引页上显示为摘要。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[LocalBroadcastManager源码解析]]></title>
      <url>http://czhzero.com/2016/05/28/LocalBroadcastManager-Source-analysis/</url>
      <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>LocalBroadcastManager是Android v4兼容包提供的应用内广播发送与接收的工具类。BroadcastReceiver的通信是基于Binder机制，而LocalBroadcastManager的核心是基于Handler机制。</p>
<p>相比BroadcastReceiver的广播，LocalBroadcastManager有以下几点优点。</p>
<ul>
<li>广播数据只在本应用内传播，不用担心数据泄露，</li>
<li>广播数据不用担心别的应用伪造广播，更加安全。</li>
<li>因为只在应用内广播，所以更加的高效。</li>
</ul>
<a id="more"></a>
<h2 id="2-基本使用方法"><a href="#2-基本使用方法" class="headerlink" title="2.基本使用方法"></a>2.基本使用方法</h2><h3 id="2-1-自定义-BroadcastReceiver-子类"><a href="#2-1-自定义-BroadcastReceiver-子类" class="headerlink" title="2.1 自定义 BroadcastReceiver 子类"></a>2.1 自定义 BroadcastReceiver 子类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//处理广播信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-注册广播"><a href="#2-2-注册广播" class="headerlink" title="2.2 注册广播"></a>2.2 注册广播</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalBroadcastReceiver localReceiver = <span class="keyword">new</span> LocalBroadcastReceiver();  </span><br><span class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter(ACTION_LOCAL_SEND);</span><br><span class="line">LocalBroadcastManager.getInstance(context).registerReceiver(localReceiver, filter);</span><br></pre></td></tr></table></figure>
<h3 id="2-3-发送广播"><a href="#2-3-发送广播" class="headerlink" title="2.3 发送广播"></a>2.3 发送广播</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalBroadcastManager.getInstance(context).sendBroadcast(<span class="keyword">new</span> Intent(ACTION_LOCAL_SEND));</span><br></pre></td></tr></table></figure>
<h3 id="2-4-取消广播注册"><a href="#2-4-取消广播注册" class="headerlink" title="2.4 取消广播注册"></a>2.4 取消广播注册</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalBroadcastManager.getInstance(context).unregisterReceiver(localReceiver);</span><br></pre></td></tr></table></figure>
<h2 id="3-源码解析"><a href="#3-源码解析" class="headerlink" title="3.源码解析"></a>3.源码解析</h2><h3 id="3-1-LocalBroadcastManager原理概要"><a href="#3-1-LocalBroadcastManager原理概要" class="headerlink" title="3.1 LocalBroadcastManager原理概要"></a>3.1 LocalBroadcastManager原理概要</h3><p>LocalBroadcastManager使用单例模式对象，初始化时会在内部初始化一个Handler对象用来接受广播。注册广播时，会将自定义的BroadcastReceiver对象和IntentFilter对象保存到HashMap中。发送广播时，则根据IntentFilter的Action值从已保存的HashMap找到对应接受者，并发送Handler消息去执行receiver的onReceive方法。</p>
<p>LocalBroadcastManager核心代码为以下四个函数。</p>
<ul>
<li>registerReceiver(BroadcastReceiver receiver, IntentFilter filter)    //注册广播函数</li>
<li>unregisterReceiver(BroadcastReceiver receiver)    //取消注册函数</li>
<li>sendBroadcast(Intent intent)            //发送广播</li>
<li>executePendingBroadcasts()           //处理接受到的广播</li>
</ul>
<h3 id="3-2-LocalBroadcastManager基本数据结构"><a href="#3-2-LocalBroadcastManager基本数据结构" class="headerlink" title="3.2 LocalBroadcastManager基本数据结构"></a>3.2 LocalBroadcastManager基本数据结构</h3><p>LocalBroadcastManager需要保存三样东西，一个是 <strong>mReceivers</strong>, 用来保存已注册的自定义的receiver和intentFilter。一个是 <strong>mActions</strong> 键值对，保存action和ReceiverRecord列表的键值对。一个是 <strong>mPendingBroadcasts</strong> , 用来保存待通知的receiver对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//注册广播Record类</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiverRecord</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> IntentFilter filter;</span><br><span class="line">        <span class="keyword">final</span> BroadcastReceiver receiver;</span><br><span class="line">        <span class="keyword">boolean</span> broadcasting;</span><br><span class="line">        </span><br><span class="line">        ReceiverRecord(IntentFilter _filter, BroadcastReceiver _receiver) &#123;</span><br><span class="line">            filter = _filter;</span><br><span class="line">            receiver = _receiver;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;BroadcastReceiver, ArrayList&lt;IntentFilter&gt;&gt; mReceivers</span><br><span class="line">        = <span class="keyword">new</span> HashMap&lt;BroadcastReceiver, ArrayList&lt;IntentFilter&gt;&gt;();</span><br><span class="line">        </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, ArrayList&lt;ReceiverRecord&gt;&gt; mActions</span><br><span class="line">        = <span class="keyword">new</span> HashMap&lt;String, ArrayList&lt;ReceiverRecord&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;BroadcastRecord&gt; mPendingBroadcasts</span><br><span class="line">        = <span class="keyword">new</span> ArrayList&lt;BroadcastRecord&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//待广播的Record类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadcastRecord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Intent intent;</span><br><span class="line">    <span class="keyword">final</span> ArrayList&lt;ReceiverRecord&gt; receivers;</span><br><span class="line"></span><br><span class="line">    BroadcastRecord(Intent _intent, ArrayList&lt;ReceiverRecord&gt; _receivers) &#123;</span><br><span class="line">        intent = _intent;</span><br><span class="line">        receivers = _receivers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3-注册广播"><a href="#3-3-注册广播" class="headerlink" title="3.3  注册广播"></a>3.3  注册广播</h3><p>将需要注册的receiver对象和该receiver需要监听的filter保存到 <strong>mReceivers</strong> 和 <strong>mPendingBroadcasts</strong> 中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Register a receive for any local broadcasts that match the given IntentFilter.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> receiver The BroadcastReceiver to handle the broadcast.</span><br><span class="line"> * <span class="doctag">@param</span> filter Selects the Intent broadcasts to be received.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@see</span> #unregisterReceiver</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerReceiver</span><span class="params">(BroadcastReceiver receiver, IntentFilter filter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mReceivers) &#123;</span><br><span class="line">        ReceiverRecord entry = <span class="keyword">new</span> ReceiverRecord(filter, receiver);</span><br><span class="line">        ArrayList&lt;IntentFilter&gt; filters = mReceivers.get(receiver);</span><br><span class="line">        <span class="keyword">if</span> (filters == <span class="keyword">null</span>) &#123;</span><br><span class="line">            filters = <span class="keyword">new</span> ArrayList&lt;IntentFilter&gt;(<span class="number">1</span>);</span><br><span class="line">            mReceivers.put(receiver, filters);    <span class="comment">//保存receiver和filter到List</span></span><br><span class="line">        &#125;</span><br><span class="line">        filters.add(filter);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;filter.countActions(); i++) &#123;</span><br><span class="line">            String action = filter.getAction(i);</span><br><span class="line">            ArrayList&lt;ReceiverRecord&gt; entries = mActions.get(action);</span><br><span class="line">            <span class="keyword">if</span> (entries == <span class="keyword">null</span>) &#123;</span><br><span class="line">                entries = <span class="keyword">new</span> ArrayList&lt;ReceiverRecord&gt;(<span class="number">1</span>);</span><br><span class="line">                mActions.put(action, entries);   <span class="comment">//保存到action和ReceiverRecord到HashMap</span></span><br><span class="line">            &#125;</span><br><span class="line">            entries.add(entry);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-取消广播注册"><a href="#3-4-取消广播注册" class="headerlink" title="3.4  取消广播注册"></a>3.4  取消广播注册</h3><p>根据receiver对象移除 <strong>mReceivers</strong> 和 <strong>mPendingBroadcasts</strong> 中对应的对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Unregister a previously registered BroadcastReceiver.  All</span><br><span class="line"> * filters that have been registered for this BroadcastReceiver will be</span><br><span class="line"> * removed.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> receiver The BroadcastReceiver to unregister.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@see</span> #registerReceiver</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterReceiver</span><span class="params">(BroadcastReceiver receiver)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mReceivers) &#123;</span><br><span class="line">        <span class="comment">//从mReceivers中移除</span></span><br><span class="line">        ArrayList&lt;IntentFilter&gt; filters = mReceivers.remove(receiver);</span><br><span class="line">        <span class="keyword">if</span> (filters == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;filters.size(); i++) &#123;</span><br><span class="line">            IntentFilter filter = filters.get(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;filter.countActions(); j++) &#123;</span><br><span class="line">                String action = filter.getAction(j);</span><br><span class="line">                ArrayList&lt;ReceiverRecord&gt; receivers = mActions.get(action);</span><br><span class="line">                <span class="keyword">if</span> (receivers != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;receivers.size(); k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (receivers.get(k).receiver == receiver) &#123;</span><br><span class="line">                            receivers.remove(k);</span><br><span class="line">                            k--;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (receivers.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        mActions.remove(action);  <span class="comment">//从mActions中移除</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-5-通过Handler发送广播"><a href="#3-5-通过Handler发送广播" class="headerlink" title="3.5  通过Handler发送广播"></a>3.5  通过Handler发送广播</h3><p>发送广播时，先根据intent中的action到<strong>mActions</strong>中找到对应的记录，然后再完整匹配filter里面的各个字段，若匹配成功，则将对应的receiver添加的<strong>mPendingBroadcasts</strong>列表中，等待handler对象的handleMessage()方法处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Broadcast the given intent to all interested BroadcastReceivers.  This</span><br><span class="line"> * call is asynchronous; it returns immediately, and you will continue</span><br><span class="line"> * executing while the receivers are run.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@param</span> intent The Intent to broadcast; all receivers matching this</span><br><span class="line"> *     Intent will receive the broadcast.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@see</span> #registerReceiver</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendBroadcast</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mReceivers) &#123;</span><br><span class="line">        <span class="keyword">final</span> String action = intent.getAction();</span><br><span class="line">        <span class="keyword">final</span> String type = intent.resolveTypeIfNeeded(</span><br><span class="line">                mAppContext.getContentResolver());</span><br><span class="line">        <span class="keyword">final</span> Uri data = intent.getData();</span><br><span class="line">        <span class="keyword">final</span> String scheme = intent.getScheme();</span><br><span class="line">        <span class="keyword">final</span> Set&lt;String&gt; categories = intent.getCategories();</span><br><span class="line"></span><br><span class="line">		  ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据intent的action寻找ReceverRecord</span></span><br><span class="line">        ArrayList&lt;ReceiverRecord&gt; entries = mActions.get(intent.getAction());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (entries != <span class="keyword">null</span>) &#123;</span><br><span class="line"> </span><br><span class="line">            ArrayList&lt;ReceiverRecord&gt; receivers = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;entries.size(); i++) &#123;</span><br><span class="line">            </span><br><span class="line">                ReceiverRecord receiver = entries.get(i);</span><br><span class="line">					<span class="comment">//相同的receiver,只添加一次 </span></span><br><span class="line">                <span class="keyword">if</span> (receiver.broadcasting) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> match = receiver.filter.match(action, type, scheme, data,</span><br><span class="line">                        categories, <span class="string">"LocalBroadcastManager"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (match &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (receivers == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        receivers = <span class="keyword">new</span> ArrayList&lt;ReceiverRecord&gt;();</span><br><span class="line">                    &#125;</span><br><span class="line">                    receivers.add(receiver);</span><br><span class="line">                    <span class="comment">//标记为已添加，待广播状态 </span></span><br><span class="line">                    receiver.broadcasting = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> 						...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (receivers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            		<span class="comment">//receivers添加完成后，将broadcasting状态回归</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;receivers.size(); i++) &#123;</span><br><span class="line">                    receivers.get(i).broadcasting = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//添加到待广播列表</span></span><br><span class="line">                mPendingBroadcasts.add(<span class="keyword">new</span> BroadcastRecord(intent, receivers));</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//若无正在处理的消息，则handler发送广播消息</span></span><br><span class="line">                <span class="keyword">if</span> (!mHandler.hasMessages(MSG_EXEC_PENDING_BROADCASTS)) &#123;</span><br><span class="line">                    mHandler.sendEmptyMessage(MSG_EXEC_PENDING_BROADCASTS);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>
<h3 id="3-6-Handler接受和消费广播"><a href="#3-6-Handler接受和消费广播" class="headerlink" title="3.6  Handler接受和消费广播"></a>3.6  Handler接受和消费广播</h3><p>在handler对象的handleMessage()方法中遍历 <strong>mPendingBroadcasts</strong> 列表, 依次循环调用其中的onReceive()方法，并将intent中的数据传入，从而消费广播信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LocalBroadcastManager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    mAppContext = context;</span><br><span class="line">    mHandler = <span class="keyword">new</span> Handler(context.getMainLooper()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> MSG_EXEC_PENDING_BROADCASTS:</span><br><span class="line">                    executePendingBroadcasts();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executePendingBroadcasts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        BroadcastRecord[] brs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (mReceivers) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> N = mPendingBroadcasts.size();</span><br><span class="line">            <span class="keyword">if</span> (N &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//拷贝数据到brs数组</span></span><br><span class="line">            brs = <span class="keyword">new</span> BroadcastRecord[N];</span><br><span class="line">            mPendingBroadcasts.toArray(brs);</span><br><span class="line">            mPendingBroadcasts.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;brs.length; i++) &#123;</span><br><span class="line">            BroadcastRecord br = brs[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;br.receivers.size(); j++) &#123;</span><br><span class="line">                <span class="comment">//循环数组里的内容，调用其onReceive方法，消费广播内容</span></span><br><span class="line">                br.receivers.get(j).receiver.onReceive(mAppContext, br.intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>LocalBroadcastManager在应用内使用起来比较简单高效，但是其也是有一些缺点的。比如LocalBroadcastManager并不支持静态注册广播，也不支持有序广播的一些功能。不过如果仅仅是普通广播通信也是够用了。</p>
]]></content>
    </entry>
    
  
  
</search>
